name: Build and Test openDAQ

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

### TODO: Enable Python binding tests on all distributions

env:
  cmake_preset: ci
  test_path: ${{ github.workspace }}/junit_reports/
  package_path: ${{ github.workspace }}/build/_packages/
  python_version_build: 3.11
  python_versions: 3.8 3.9 3.10 3.11 3.12
  OPENDAQ_SINK_CONSOLE_LOG_LEVEL: 1

jobs:
  build_windows:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    if: '! github.event.pull_request.draft'

    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref }}-${{ matrix.name }}
      cancel-in-progress: true
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
        include:
          # - name: Windows VS 2019 x64 Release
            # runner: windows-2019
            # cmake_generator: "Visual Studio 16 2019"
            # cmake_generator_platform: x64
            # cmake_build_type: Release
            # cmake_defines: -DOPENDAQ_MSVC_SINGLE_PROCESS_BUILD=ON -DOPENDAQ_GENERATE_PYTHON_BINDINGS=OFF
            # cpack: NSIS
          - name: Windows VS 2022 x64 Release
            runner: windows-2022
            cmake_generator: "Visual Studio 17 2022"
            cmake_generator_platform: x64
            cmake_build_type: Release
            cmake_defines: -DOPENDAQ_MSVC_SINGLE_PROCESS_BUILD=ON
            cpack: NSIS
          # - name: Windows VS 2022 x64 Debug
            # runner: windows-2022
            # cmake_generator: "Visual Studio 17 2022"
            # cmake_generator_platform: x64
            # cmake_build_type: Debug
            # cmake_defines: -DOPENDAQ_MSVC_SINGLE_PROCESS_BUILD=ON
            # cpack: NSIS
          - name: Windows VS 2022 Win32 Release
            runner: windows-2022
            cmake_generator: "Visual Studio 17 2022"
            cmake_generator_platform: Win32
            cmake_build_type: Release
            cmake_defines: -DOPENDAQ_GENERATE_PYTHON_BINDINGS=OFF -DOPENDAQ_MSVC_SINGLE_PROCESS_BUILD=ON
            cpack: NSIS
          - name: Windows Clang Release
            runner: windows-2022
            cmake_generator: Ninja
            cmake_build_type: Release
            cmake_defines: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DOPENDAQ_GENERATE_PYTHON_BINDINGS=OFF
            cpack: NSIS

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install ninja-build
        if: matrix.cmake_generator == 'Ninja'
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          version: 1.10.2

      - name: Install Python dependencies
        run: |
          foreach($version in "${{ env.python_versions }}".split(" ")) {
            Write-Output "Installing numpy for Python $version"
            Invoke-Expression "py -$version -m pip install numpy"
          }

      - name: Configure
        run: |
          mkdir build
          cd build
          if ( "${{ matrix.cmake_generator_platform }}" -eq "" )
          {
            cmake -G "${{ matrix.cmake_generator }}" --preset ${{ env.cmake_preset }} -DCI_GIT_BRANCH=${{ github.head_ref }} ${{ matrix.cmake_defines }} ..
          }
          else
          {
            cmake -G "${{ matrix.cmake_generator }}" -A ${{ matrix.cmake_generator_platform }} --preset ${{ env.cmake_preset }} -DCI_GIT_BRANCH=${{ github.head_ref }} ${{ matrix.cmake_defines }} ..
          }

      - name: Build
        working-directory: build
        run: cmake --build . --config ${{ matrix.cmake_build_type }}

      - name: Test
        working-directory: build
        env:
          GTEST_OUTPUT: "xml:${{ env.test_path }}"
        run: ctest --output-on-failure -C ${{ matrix.cmake_build_type }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Results (${{ matrix.name }})
          path: ${{ env.test_path }}

      - name: Package
        if: matrix.cpack != ''
        working-directory: build
        run: cpack -C ${{ matrix.cmake_build_type }} -G ${{ matrix.cpack }}

      - name: Upload package
        if: matrix.cpack != ''
        uses: actions/upload-artifact@v3
        with:
          name: Packages (${{ matrix.name }})
          path: ${{ env.package_path }}
          retention-days: 7

  build_linux:
    runs-on: ubuntu-latest
    name: ${{ matrix.name }}
    if: '! github.event.pull_request.draft'

    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref }}-${{ matrix.name }}
      cancel-in-progress: true
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu 22.04 gcc-12 Release
            image: ubuntu:22.04
            cmake_generator: Ninja
            cmake_build_type: Release
            apt_packages: g++-12
            cc: gcc-12
            cxx: g++-12
            cpack: DEB
          # - name: Ubuntu 22.04 gcc-12 Debug
            # image: ubuntu:22.04
            # cmake_generator: Ninja
            # cmake_build_type: Debug
            # apt_packages: g++-12
            # cc: gcc-12
            # cxx: g++-12
            # cpack: DEB
          # - name: Ubuntu 20.04 gcc-7 Release
            # image: ubuntu:20.04
            # cmake_generator: Ninja
            # cmake_build_type: Release
            # cmake_defines: -DOPENDAQ_GENERATE_PYTHON_BINDINGS=OFF
            # apt_packages: g++-7
            # cc: gcc-7
            # cxx: g++-7
          - name: Ubuntu 22.04 clang-14 Release
            image: ubuntu:22.04
            cmake_generator: Ninja
            cmake_build_type: Release
            apt_packages: clang++-14
            cc: clang-14
            cxx: clang++-14
          # - name: Ubuntu 22.04 clang-14 libc++ Release
            # image: ubuntu:22.04
            # cmake_generator: Ninja
            # cmake_build_type: Release
            # cmake_defines: -DCMAKE_CXX_FLAGS=-stdlib=libc++
            # apt_packages: clang++-14 libc++-14-dev libc++abi-14-dev
            # cc: clang-14
            # cxx: clang++-14
            # cpack: ZIP
          - name: Ubuntu 22.04 preinstalled packages
            image: ubuntu:22.04
            cmake_generator: Ninja
            cmake_build_type: Release
            apt_packages: g++ googletest libfmt-dev libsfml-dev libspdlog-dev libtsl-ordered-map-dev libxxhash-dev pybind11-dev rapidjson-dev
            cc: gcc
            cxx: g++
            cpack: DEB

    container:
      image: ${{ matrix.image }}
      env:
        TZ: Europe/Berlin
        DEBIAN_FRONTEND: noninteractive
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

    steps:
      - name: Install basic dependencies
        run: |
          apt-get update
          apt-get install -y git openssh-client
          
      - name: Disable git safe directory checks
        run : git config --global --add safe.directory '*'
        
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          apt-get install -y --no-install-recommends ${{ matrix.apt_packages }} \
            lld ninja-build curl \
            python3-dev python3-numpy python3-distutils python3-pip \
            mono-runtime libmono-system-json-microsoft4.0-cil libmono-system-data4.0-cil \
            libx11-dev libxcursor-dev libxrandr-dev libgl-dev libudev-dev libfreetype6-dev

      - name: Install latest CMake
        run: pip install cmake

      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -G ${{ matrix.cmake_generator }} --preset ${{ env.cmake_preset }} ${{ matrix.cmake_defines }} -DCI_GIT_BRANCH=${{ github.head_ref }} -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} ..

      - name: Build
        working-directory: build
        run: cmake --build .

      - name: Test
        working-directory: build
        env:
          GTEST_OUTPUT: "xml:${{ env.test_path }}"
        run: ctest --output-on-failure -C ${{ matrix.cmake_build_type }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Results (${{ matrix.name }})
          path: ${{ env.test_path }}

      - name: Package
        if: matrix.cpack != ''
        working-directory: build
        run: cpack -C ${{ matrix.cmake_build_type }} -G ${{ matrix.cpack }}

      - name: Upload package
        if: matrix.cpack != ''
        uses: actions/upload-artifact@v3
        with:
          name: Packages (${{ matrix.name }})
          path: ${{ env.package_path }}
          retention-days: 7

  build_linux_centos:
    runs-on: ubuntu-latest
    name: ${{ matrix.name }}
    if: '! github.event.pull_request.draft'

    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref }}-${{ matrix.name }}
      cancel-in-progress: true
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: manylinux2014 gcc Release
            image: quay.io/pypa/manylinux2014_x86_64
            cmake_generator: Ninja
            cmake_build_type: Release
            additional_packages:
            cc: gcc
            cxx: g++
            cpack: ZIP

    container:
      image: ${{ matrix.image }}
      env:
        TZ: Europe/Berlin
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

    steps:
      - name: Install basic dependencies
        run: |
          yum update -y
          yum install -y git
          
      - name: Disable git safe directory checks
        run : git config --global --add safe.directory '*'
        
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          yum install -y ${{ matrix.additional_packages }} \
              ninja-build \
              mono-core \
              freetype-devel libudev-devel libX11-devel libXcursor-devel libXrandr-devel

      - name: Create build dir
        run: mkdir build

      - name: Configure and build python packages
        working-directory: build
        run: |
          mkdir wheels
          last_version="3.7"
          for version in ${{ env.python_versions }}; do
              echo "Building for Python $version"
              cmake -G "${{ matrix.cmake_generator }}" --preset ${{ env.cmake_preset }} -DCI_GIT_BRANCH=${{ github.head_ref }} -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} -DOPENDAQ_PYTHON_VERSION=$version -DOPENDAQ_VENV_PYTHON_EXECUTABLE_TESTS=ON ..
              cmake --build .
              python$version -m venv venv
              . venv/bin/activate
              pip install numpy pybind11-stubgen
              python${{env.python_version_build}} ../bindings/python/package/build_pip.py -r
              cp -f pip/packages/opendaq*.whl wheels
              deactivate
              rm -rf venv
              last_version=$version
          done
          echo "last_version=$last_version" >> "$GITHUB_ENV"

      - name: Test
        working-directory: build
        env:
          GTEST_OUTPUT: "xml:${{ env.test_path }}"
        run: |
          python$last_version -m venv venv
          . venv/bin/activate
          pip install numpy
          pip install pip/packages/opendaq*.whl
          ctest --output-on-failure -C ${{ matrix.cmake_build_type }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Results (${{ matrix.name }})
          path: ${{ env.test_path }}

      - name: Package
        if: matrix.cpack != ''
        working-directory: build
        run: cpack -C ${{ matrix.cmake_build_type }} -G ${{ matrix.cpack }}

      - name: Upload package
        if: matrix.cpack != ''
        uses: actions/upload-artifact@v3
        with:
          name: Packages (${{ matrix.name }})
          path: ${{ env.package_path }}
          retention-days: 7

      - name: Upload PIP packages
        uses: actions/upload-artifact@v3
        with:
          name: PIP Package (${{ matrix.name }})
          path: ${{ github.workspace }}/build/wheels/opendaq*.whl
          retention-days: 7

  build_macos:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    if: '! github.event.pull_request.draft'

    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref }}-${{ matrix.name }}
      cancel-in-progress: true
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macos-12 clang Release
            cmake_generator: Ninja
            cmake_build_type: Release
            runner: macos-12
          # - name: macos-12 clang Debug
            # cmake_generator: Ninja
            # cmake_build_type: Debug
            # runner: macos-12

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install ninja-build
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          version: 1.10.2
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install numpy
        run: python -m pip install numpy

      - name: Configure, fetch dependencies
        run: |
          mkdir -p build
          cd build
          cmake -G ${{ matrix.cmake_generator }} --preset ${{ env.cmake_preset }} ${{ matrix.cmake_defines }}-DCI_GIT_BRANCH=${{ github.head_ref }}  -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} ${{ github.workspace }}

      - name: Build
        working-directory: build
        run: cmake --build .

      - name: Test
        working-directory: build
        env:
          GTEST_OUTPUT: "xml:${{ env.test_path }}"
        run: ctest --output-on-failure -C ${{ matrix.cmake_build_type }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Results (${{ matrix.name }})
          path: ${{ env.test_path }}

  build_windows_pip:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    if: '! github.event.pull_request.draft'

    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref }}-${{ matrix.name }}
      cancel-in-progress: true
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
        include:
          - name: Windows VS 2022 x64 Release PIP
            runner: windows-2022
            cmake_generator: "Visual Studio 17 2022"
            cmake_generator_platform: x64
            cmake_build_type: Release
            cmake_defines: -DOPENDAQ_MSVC_SINGLE_PROCESS_BUILD=ON -DOPENDAQ_VENV_PYTHON_EXECUTABLE_TESTS=ON -DOPENDAQ_ENABLE_PYTHON_BINDINGS_TESTS_ONLY=ON
            cpack: NSIS
            cmake_preset: package

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install ninja-build
        if: matrix.cmake_generator == 'Ninja'
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          version: 1.10.2

      - name: Create build dir
        run: New-Item build -ItemType Directory

      - name: Configure, build and test Python packages
        working-directory: build
        run: |
          New-Item wheels -ItemType Directory
          foreach ($version in "${{ env.python_versions }}".split(" ")) {
            Write-Output "Building for Python $version"
            if ( "${{ matrix.cmake_generator_platform }}" -eq "" )
            {
              cmake -G "${{ matrix.cmake_generator }}" --preset ${{ matrix.cmake_preset }} ${{ matrix.cmake_defines }} -DCI_GIT_BRANCH=${{ github.head_ref }} "-DOPENDAQ_PYTHON_VERSION=$version" ..
            }
            else
            {
              cmake -G "${{ matrix.cmake_generator }}" -A ${{ matrix.cmake_generator_platform }} --preset ${{ matrix.cmake_preset }} ${{ matrix.cmake_defines }}  -DCI_GIT_BRANCH=${{ github.head_ref }} "-DOPENDAQ_PYTHON_VERSION=$version" ..
            }
            cmake --build . --config ${{ matrix.cmake_build_type }}
            Write-Output "Creating virtual environment for Python $version"
            Invoke-Expression "py -$version -m venv venv"
            ./venv/Scripts/activate
            pip install numpy pybind11-stubgen
            py -${{env.python_version_build}} ../bindings/python/package/build_pip.py -l bin/${{ matrix.cmake_build_type }} -r
            foreach ($file in Get-ChildItem -Filter *.whl -Path pip/packages) {
              Write-Output "Installing $file"
              pip install $file
            }
            cmake --build . --config ${{ matrix.cmake_build_type }} -t test_py_opendaq
            Copy-Item pip/packages/*.whl wheels
            deactivate
            Remove-Item venv -Recurse
          }

      - name: Upload PIP packages
        uses: actions/upload-artifact@v3
        with:
          name: PIP Package (${{ matrix.name }})
          path: ${{ github.workspace }}/build/wheels/*.whl
          retention-days: 7

  # build_android:
  #   runs-on: ubuntu-latest-8-cores
  #   if: '! github.event.pull_request.draft'
  #
  #   concurrency:
  #     group: ${{ github.workflow }}-${{ github.head_ref }}-${{ matrix.abi }}
  #     cancel-in-progress: true
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       android_abi: [arm64-v8a]
  #       # android_abi: [arm64-v8a, armeabi-v7a, x86_64]
  #       android_version: [24]
  #       cmake_build_type: [Debug]
  #   env:
  #     android_ndk_version: r25c
  #     android_ndk_path: ${{ github.workspace }}/android-ndk-r25c
  #     android_ndk_zip: ${{ github.workspace }}/android-ndk-r25c-linux.zip
  #     android_ndk_url: https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
  #
  #   steps:
  #
  #     - uses: actions/checkout@v3
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #
  #     - name: Install build dependencies
  #       run: |
  #         sudo apt-get install -y --no-install-recommends ninja-build
  #     - name: Cache Android NDK
  #       id: cache-ndk
  #       uses: actions/cache@v3
  #       with:
  #         path: ${{ env.android_ndk_zip }}
  #         key: ${{ runner.os }}-android-ndk
  #
  #     - name: Download Android NDK
  #       if: steps.cache-ndk.outputs.cache-hit != 'true'
  #       run: wget ${{ env.android_ndk_url }}
  #
  #     - name: Extract Android NDK
  #       run: unzip ${{ env.android_ndk_zip }}
  #
  #     - name: Configure
  #       run: |
  #         mkdir build
  #         cd build
  #         cmake -G Ninja --preset ${{ env.cmake_preset }} \
  #           -DOPENDAQ_USE_SOURCE_BOOST=ON \
  #           -DOPENDAQ_GENERATE_PYTHON_BINDINGS=OFF \
  #           -DOPENDAQ_ENABLE_TESTS=OFF \
  #           -DCMAKE_TOOLCHAIN_FILE=${{ env.android_ndk_path }}/build/cmake/android.toolchain.cmake \
  #           -DCMAKE_ANDROID_NDK=${{ env.android_ndk_path }} \
  #           -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
  #           -DCMAKE_SYSTEM_NAME=Android \
  #           -DCMAKE_SYSTEM_VERSION=${{ matrix.android_version }} \
  #           -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
  #           -DANDROID_ABI=${{ matrix.android_abi }} \
  #           -DANDROID_NDK=${{ env.android_ndk_path }} \
  #           -DANDROID_PLATFORM=android-${{ matrix.android_version }} \
  #           -DCI_GIT_BRANCH=${{ github.head_ref }} \ 
  #           ..
  #     - name: Build
  #       working-directory: build
  #       run: cmake --build .
