name: Generate openDAQ regression test simulator binaries

on:
  workflow_dispatch:
  push: 
    branches: # TODO: delete this before merge
      - regression-tests 
    tags:
      - '**'

env:
  regression_tests_target_tag: v3.0.0

jobs:
  regression_tests:
    runs-on: ubuntu-latest
    name: ${{ matrix.name }}
    # ${{ }} expression syntax because of leading '!'
    # if: ${{ ! github.event.pull_request.draft }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref }}-${{ matrix.name }}
      cancel-in-progress: true
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu 22.04 gcc-12 Release
            image: ubuntu:22.04
            cmake_generator: Ninja
            cmake_build_type: Release
            cmake_defines_target: -DDAQMODULES_EMPTY_MODULE=OFF -DDAQMODULES_AUDIO_DEVICE_MODULE=OFF -DAPP_ENABLE_WEBPAGE_EXAMPLES=OFF -DOPENDAQ_DOCUMENTATION_TESTS=OFF -DOPENDAQ_GENERATE_PYTHON_BINDINGS=OFF -DOPENDAQ_GENERATE_CSHARP_BINDINGS=OFF -DAPP_ENABLE_AUDIO_APP=OFF -DAPP_ENABLE_EXAMPLE_APPS=OFF -DDAQSIMULATOR_ENABLE_SIMULATOR_APP=OFF 
            apt_packages: g++-12
            cc: gcc-12
            cxx: g++-12
            cpack: DEB

    container:
      image: ${{ matrix.image }}
      env:
        TZ: Europe/Berlin
        DEBIAN_FRONTEND: noninteractive
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}

    steps:
      - name: Install basic dependencies
        run: |
          apt-get update
          apt-get install -y git openssh-client
          
      - name: Disable git safe directory checks
        run : git config --global --add safe.directory '*'

      - name: Install build dependencies
        run: |
          apt-get install -y --no-install-recommends ${{ matrix.apt_packages }} \
            lld ninja-build curl \
            python3-dev python3-numpy python3-distutils python3-pip \
            mono-runtime libmono-system-json-microsoft4.0-cil libmono-system-data4.0-cil \
            libx11-dev libxcursor-dev libxrandr-dev libgl-dev libudev-dev libfreetype6-dev

      - name: Install latest CMake
        run: pip install cmake

      - name: Checkout target
        uses: actions/checkout@v3
        with:
          ref: ${{ env.regression_tests_target_tag }}
          path: target

      - name: Checkout current
        uses: actions/checkout@v3
        with:
          path: current

      - name: Copy regression simulator to top folder
        run: cp -r current/regression/simulator .
        
      - name: Move and rename CMakeListsTop.txt from current to top folder and move CMakePresets.json from target to top folder (to build simulator with target version)
        run: |
          mv current/regression/CMakeListsTop.txt CMakeLists.txt
          mv target/CMakePresets.json .

      - name: Configure target (with regression simulator)
        working-directory: target
        run: |
          mkdir build
          cd build
          cmake -G ${{ matrix.cmake_generator }} --preset ci ${{ matrix.cmake_defines_target }} -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} ../..

      - name: Build target (with regression simulator)
        working-directory: target/build
        run: cmake --build .
        
      - name: Move simulator binary to bin
        run: mv target/build/simulator/regression_simulator target/build/bin
        
      - name: Upload target bin .zip
        uses: actions/upload-artifact@v3
        with: 
          name: regression target bin ${{ env.regression_tests_target_tag }} (${{ matrix.name }})
          path: |
            target/build/bin/*daqcoreobjects-*
            target/build/bin/*daqcoretypes-*
            target/build/bin/*native_stream_srv_module-*
            target/build/bin/*opcua_server_module-*
            target/build/bin/libopendaq-*
            target/build/bin/*ref_device_module-*
            target/build/bin/*ref_fb_module-*
            target/build/bin/*ws_stream_srv_module-*
            target/build/bin/regression_simulator

      # TODO: upload regression target bin .zip artifact to AWS automagically
      # Currently, this has to be done manually
