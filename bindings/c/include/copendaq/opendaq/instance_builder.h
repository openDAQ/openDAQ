//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.5.0) on 14.04.2025 21:37:33.
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#ifdef __cplusplus
extern "C"
{
#endif

#include "ccommon.h"

    typedef struct InstanceBuilder InstanceBuilder;
    typedef struct Instance Instance;
    typedef struct ConfigProvider ConfigProvider;
    typedef struct Context Context;
    typedef struct Logger Logger;
    typedef struct String String;
    typedef struct Dict Dict;
    typedef struct LoggerSink LoggerSink;
    typedef struct List List;
    typedef struct ModuleManager ModuleManager;
    typedef struct AuthenticationProvider AuthenticationProvider;
    typedef struct Scheduler Scheduler;
    typedef struct PropertyObject PropertyObject;
    typedef struct DeviceInfo DeviceInfo;

    EXPORTED extern const IntfID INSTANCE_BUILDER_INTF_ID;

    ErrCode EXPORTED InstanceBuilder_build(InstanceBuilder* self, Instance** instance);
    ErrCode EXPORTED InstanceBuilder_addConfigProvider(InstanceBuilder* self, ConfigProvider* configProvider);
    ErrCode EXPORTED InstanceBuilder_setContext(InstanceBuilder* self, Context* context);
    ErrCode EXPORTED InstanceBuilder_getContext(InstanceBuilder* self, Context** context);
    ErrCode EXPORTED InstanceBuilder_setLogger(InstanceBuilder* self, Logger* logger);
    ErrCode EXPORTED InstanceBuilder_getLogger(InstanceBuilder* self, Logger** logger);
    ErrCode EXPORTED InstanceBuilder_setGlobalLogLevel(InstanceBuilder* self, LogLevel logLevel);
    ErrCode EXPORTED InstanceBuilder_getGlobalLogLevel(InstanceBuilder* self, LogLevel* logLevel);
    ErrCode EXPORTED InstanceBuilder_setComponentLogLevel(InstanceBuilder* self, String* component, LogLevel logLevel);
    ErrCode EXPORTED InstanceBuilder_getComponentsLogLevel(InstanceBuilder* self, Dict** components);
    ErrCode EXPORTED InstanceBuilder_addLoggerSink(InstanceBuilder* self, LoggerSink* sink);
    ErrCode EXPORTED InstanceBuilder_setSinkLogLevel(InstanceBuilder* self, LoggerSink* sink, LogLevel logLevel);
    ErrCode EXPORTED InstanceBuilder_getLoggerSinks(InstanceBuilder* self, List** sinks);
    ErrCode EXPORTED InstanceBuilder_setModulePath(InstanceBuilder* self, String* path);
    ErrCode EXPORTED InstanceBuilder_getModulePath(InstanceBuilder* self, String** path);
    ErrCode EXPORTED InstanceBuilder_addModulePath(InstanceBuilder* self, String* path);
    ErrCode EXPORTED InstanceBuilder_getModulePathsList(InstanceBuilder* self, List** paths);
    ErrCode EXPORTED InstanceBuilder_setModuleManager(InstanceBuilder* self, ModuleManager* moduleManager);
    ErrCode EXPORTED InstanceBuilder_getModuleManager(InstanceBuilder* self, ModuleManager** moduleManager);
    ErrCode EXPORTED InstanceBuilder_setAuthenticationProvider(InstanceBuilder* self, AuthenticationProvider* authenticationProvider);
    ErrCode EXPORTED InstanceBuilder_getAuthenticationProvider(InstanceBuilder* self, AuthenticationProvider** authenticationProvider);
    ErrCode EXPORTED InstanceBuilder_setSchedulerWorkerNum(InstanceBuilder* self, SizeT numWorkers);
    ErrCode EXPORTED InstanceBuilder_getSchedulerWorkerNum(InstanceBuilder* self, SizeT* numWorkers);
    ErrCode EXPORTED InstanceBuilder_setScheduler(InstanceBuilder* self, Scheduler* scheduler);
    ErrCode EXPORTED InstanceBuilder_getScheduler(InstanceBuilder* self, Scheduler** scheduler);
    ErrCode EXPORTED InstanceBuilder_setDefaultRootDeviceLocalId(InstanceBuilder* self, String* localId);
    ErrCode EXPORTED InstanceBuilder_getDefaultRootDeviceLocalId(InstanceBuilder* self, String** localId);
    ErrCode EXPORTED InstanceBuilder_setRootDevice(InstanceBuilder* self, String* connectionString, PropertyObject* config);
    ErrCode EXPORTED InstanceBuilder_getRootDevice(InstanceBuilder* self, String** connectionString);
    ErrCode EXPORTED InstanceBuilder_getRootDeviceConfig(InstanceBuilder* self, PropertyObject** config);
    ErrCode EXPORTED InstanceBuilder_setDefaultRootDeviceInfo(InstanceBuilder* self, DeviceInfo* deviceInfo);
    ErrCode EXPORTED InstanceBuilder_getDefaultRootDeviceInfo(InstanceBuilder* self, DeviceInfo** deviceInfo);
    ErrCode EXPORTED InstanceBuilder_getOptions(InstanceBuilder* self, Dict** options);
    ErrCode EXPORTED InstanceBuilder_enableStandardProviders(InstanceBuilder* self, Bool flag);
    ErrCode EXPORTED InstanceBuilder_getDiscoveryServers(InstanceBuilder* self, List** serverNames);
    ErrCode EXPORTED InstanceBuilder_addDiscoveryServer(InstanceBuilder* self, String* serverName);
    ErrCode EXPORTED InstanceBuilder_createInstanceBuilder(InstanceBuilder** obj);

#ifdef __cplusplus
}
#endif
