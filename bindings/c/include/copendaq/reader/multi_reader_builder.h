//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.6.0) on 27.04.2025 18:33:45.
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#ifdef __cplusplus
extern "C"
{
#endif

#include <ccommon.h>

    typedef struct MultiReaderBuilder MultiReaderBuilder;
    typedef struct MultiReader MultiReader;
    typedef struct Signal Signal;
    typedef struct InputPort InputPort;
    typedef struct List List;
    typedef struct Ratio Ratio;

    EXPORTED extern const IntfID MULTI_READER_BUILDER_INTF_ID;

    ErrCode EXPORTED MultiReaderBuilder_build(MultiReaderBuilder* self, MultiReader** multiReader);
    ErrCode EXPORTED MultiReaderBuilder_addSignal(MultiReaderBuilder* self, Signal* signal);
    ErrCode EXPORTED MultiReaderBuilder_addInputPort(MultiReaderBuilder* self, InputPort* port);
    ErrCode EXPORTED MultiReaderBuilder_getSourceComponents(MultiReaderBuilder* self, List** ports);
    ErrCode EXPORTED MultiReaderBuilder_setValueReadType(MultiReaderBuilder* self, SampleType type);
    ErrCode EXPORTED MultiReaderBuilder_getValueReadType(MultiReaderBuilder* self, SampleType* type);
    ErrCode EXPORTED MultiReaderBuilder_setDomainReadType(MultiReaderBuilder* self, SampleType type);
    ErrCode EXPORTED MultiReaderBuilder_getDomainReadType(MultiReaderBuilder* self, SampleType* type);
    ErrCode EXPORTED MultiReaderBuilder_setReadMode(MultiReaderBuilder* self, ReadMode mode);
    ErrCode EXPORTED MultiReaderBuilder_getReadMode(MultiReaderBuilder* self, ReadMode* mode);
    ErrCode EXPORTED MultiReaderBuilder_setReadTimeoutType(MultiReaderBuilder* self, ReadTimeoutType type);
    ErrCode EXPORTED MultiReaderBuilder_getReadTimeoutType(MultiReaderBuilder* self, ReadTimeoutType* type);
    ErrCode EXPORTED MultiReaderBuilder_setRequiredCommonSampleRate(MultiReaderBuilder* self, Int sampleRate);
    ErrCode EXPORTED MultiReaderBuilder_getRequiredCommonSampleRate(MultiReaderBuilder* self, Int* sampleRate);
    ErrCode EXPORTED MultiReaderBuilder_setStartOnFullUnitOfDomain(MultiReaderBuilder* self, Bool enabled);
    ErrCode EXPORTED MultiReaderBuilder_getStartOnFullUnitOfDomain(MultiReaderBuilder* self, Bool* enabled);
    ErrCode EXPORTED MultiReaderBuilder_setMinReadCount(MultiReaderBuilder* self, SizeT minReadCount);
    ErrCode EXPORTED MultiReaderBuilder_getMinReadCount(MultiReaderBuilder* self, SizeT* minReadCount);
    ErrCode EXPORTED MultiReaderBuilder_setTickOffsetTolerance(MultiReaderBuilder* self, Ratio* offsetTolerance);
    ErrCode EXPORTED MultiReaderBuilder_getTickOffsetTolerance(MultiReaderBuilder* self, Ratio** offsetTolerance);
    ErrCode EXPORTED MultiReaderBuilder_createMultiReaderBuilder(MultiReaderBuilder** obj);

#ifdef __cplusplus
}
#endif
