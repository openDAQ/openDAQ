//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.7.0) on 03.06.2025 22:07:24.
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#ifdef __cplusplus
extern "C"
{
#endif

#include <ccommon.h>

    typedef struct daqMultiReaderBuilder daqMultiReaderBuilder;
    typedef struct daqMultiReader daqMultiReader;
    typedef struct daqSignal daqSignal;
    typedef struct daqInputPort daqInputPort;
    typedef struct daqList daqList;
    typedef struct daqRatio daqRatio;

    EXPORTED extern const daqIntfID DAQ_MULTI_READER_BUILDER_INTF_ID;

    daqErrCode EXPORTED daqMultiReaderBuilder_build(daqMultiReaderBuilder* self, daqMultiReader** multiReader);
    daqErrCode EXPORTED daqMultiReaderBuilder_addSignal(daqMultiReaderBuilder* self, daqSignal* signal);
    daqErrCode EXPORTED daqMultiReaderBuilder_addInputPort(daqMultiReaderBuilder* self, daqInputPort* port);
    daqErrCode EXPORTED daqMultiReaderBuilder_getSourceComponents(daqMultiReaderBuilder* self, daqList** ports);
    daqErrCode EXPORTED daqMultiReaderBuilder_setValueReadType(daqMultiReaderBuilder* self, daqSampleType type);
    daqErrCode EXPORTED daqMultiReaderBuilder_getValueReadType(daqMultiReaderBuilder* self, daqSampleType* type);
    daqErrCode EXPORTED daqMultiReaderBuilder_setDomainReadType(daqMultiReaderBuilder* self, daqSampleType type);
    daqErrCode EXPORTED daqMultiReaderBuilder_getDomainReadType(daqMultiReaderBuilder* self, daqSampleType* type);
    daqErrCode EXPORTED daqMultiReaderBuilder_setReadMode(daqMultiReaderBuilder* self, daqReadMode mode);
    daqErrCode EXPORTED daqMultiReaderBuilder_getReadMode(daqMultiReaderBuilder* self, daqReadMode* mode);
    daqErrCode EXPORTED daqMultiReaderBuilder_setReadTimeoutType(daqMultiReaderBuilder* self, daqReadTimeoutType type);
    daqErrCode EXPORTED daqMultiReaderBuilder_getReadTimeoutType(daqMultiReaderBuilder* self, daqReadTimeoutType* type);
    daqErrCode EXPORTED daqMultiReaderBuilder_setRequiredCommonSampleRate(daqMultiReaderBuilder* self, daqInt sampleRate);
    daqErrCode EXPORTED daqMultiReaderBuilder_getRequiredCommonSampleRate(daqMultiReaderBuilder* self, daqInt* sampleRate);
    daqErrCode EXPORTED daqMultiReaderBuilder_setStartOnFullUnitOfDomain(daqMultiReaderBuilder* self, daqBool enabled);
    daqErrCode EXPORTED daqMultiReaderBuilder_getStartOnFullUnitOfDomain(daqMultiReaderBuilder* self, daqBool* enabled);
    daqErrCode EXPORTED daqMultiReaderBuilder_setMinReadCount(daqMultiReaderBuilder* self, daqSizeT minReadCount);
    daqErrCode EXPORTED daqMultiReaderBuilder_getMinReadCount(daqMultiReaderBuilder* self, daqSizeT* minReadCount);
    daqErrCode EXPORTED daqMultiReaderBuilder_setTickOffsetTolerance(daqMultiReaderBuilder* self, daqRatio* offsetTolerance);
    daqErrCode EXPORTED daqMultiReaderBuilder_getTickOffsetTolerance(daqMultiReaderBuilder* self, daqRatio** offsetTolerance);
    daqErrCode EXPORTED daqMultiReaderBuilder_createMultiReaderBuilder(daqMultiReaderBuilder** obj);

#ifdef __cplusplus
}
#endif
