//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.5.0) on 14.04.2025 21:37:53.
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#ifdef __cplusplus
extern "C"
{
#endif

#include "ccommon.h"

    typedef struct DataRule DataRule;
    typedef struct Dict Dict;
    typedef struct Number Number;
    typedef struct DataRuleBuilder DataRuleBuilder;

    EXPORTED extern const IntfID DATA_RULE_INTF_ID;

    ErrCode EXPORTED DataRule_getType(DataRule* self, DataRuleType* type);
    ErrCode EXPORTED DataRule_getParameters(DataRule* self, Dict** parameters);
    ErrCode EXPORTED DataRule_createLinearDataRule(DataRule** obj, Number* delta, Number* start);
    ErrCode EXPORTED DataRule_createConstantDataRule(DataRule** obj);
    ErrCode EXPORTED DataRule_createExplicitDataRule(DataRule** obj);
    ErrCode EXPORTED DataRule_createExplicitDomainDataRule(DataRule** obj, Number* minExpectedDelta, Number* maxExpectedDelta);
    ErrCode EXPORTED DataRule_createDataRule(DataRule** obj, DataRuleType ruleType, Dict* parameters);
    ErrCode EXPORTED DataRule_createDataRuleFromBuilder(DataRule** obj, DataRuleBuilder* builder);

#ifdef __cplusplus
}
#endif
