//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.6.0) on 27.04.2025 18:33:24.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/device/device.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const IntfID DEVICE_INTF_ID = { daq::IDevice::Id.Data1, daq::IDevice::Id.Data2, daq::IDevice::Id.Data3, daq::IDevice::Id.Data4_UInt64 };

ErrCode Device_getInfo(Device* self, DeviceInfo** info)
{
    return reinterpret_cast<daq::IDevice*>(self)->getInfo(reinterpret_cast<daq::IDeviceInfo**>(info));
}

ErrCode Device_getDomain(Device* self, DeviceDomain** domain)
{
    return reinterpret_cast<daq::IDevice*>(self)->getDomain(reinterpret_cast<daq::IDeviceDomain**>(domain));
}

ErrCode Device_getInputsOutputsFolder(Device* self, Folder** inputsOutputsFolder)
{
    return reinterpret_cast<daq::IDevice*>(self)->getInputsOutputsFolder(reinterpret_cast<daq::IFolder**>(inputsOutputsFolder));
}

ErrCode Device_getCustomComponents(Device* self, List** customComponents)
{
    return reinterpret_cast<daq::IDevice*>(self)->getCustomComponents(reinterpret_cast<daq::IList**>(customComponents));
}

ErrCode Device_getSignals(Device* self, List** signals, SearchFilter* searchFilter)
{
    return reinterpret_cast<daq::IDevice*>(self)->getSignals(reinterpret_cast<daq::IList**>(signals), reinterpret_cast<daq::ISearchFilter*>(searchFilter));
}

ErrCode Device_getSignalsRecursive(Device* self, List** signals, SearchFilter* searchFilter)
{
    return reinterpret_cast<daq::IDevice*>(self)->getSignalsRecursive(reinterpret_cast<daq::IList**>(signals), reinterpret_cast<daq::ISearchFilter*>(searchFilter));
}

ErrCode Device_getChannels(Device* self, List** channels, SearchFilter* searchFilter)
{
    return reinterpret_cast<daq::IDevice*>(self)->getChannels(reinterpret_cast<daq::IList**>(channels), reinterpret_cast<daq::ISearchFilter*>(searchFilter));
}

ErrCode Device_getChannelsRecursive(Device* self, List** channels, SearchFilter* searchFilter)
{
    return reinterpret_cast<daq::IDevice*>(self)->getChannelsRecursive(reinterpret_cast<daq::IList**>(channels), reinterpret_cast<daq::ISearchFilter*>(searchFilter));
}

ErrCode Device_getDevices(Device* self, List** devices, SearchFilter* searchFilter)
{
    return reinterpret_cast<daq::IDevice*>(self)->getDevices(reinterpret_cast<daq::IList**>(devices), reinterpret_cast<daq::ISearchFilter*>(searchFilter));
}

ErrCode Device_getAvailableDevices(Device* self, List** availableDevices)
{
    return reinterpret_cast<daq::IDevice*>(self)->getAvailableDevices(reinterpret_cast<daq::IList**>(availableDevices));
}

ErrCode Device_getAvailableDeviceTypes(Device* self, Dict** deviceTypes)
{
    return reinterpret_cast<daq::IDevice*>(self)->getAvailableDeviceTypes(reinterpret_cast<daq::IDict**>(deviceTypes));
}

ErrCode Device_addDevice(Device* self, Device** device, String* connectionString, PropertyObject* config)
{
    return reinterpret_cast<daq::IDevice*>(self)->addDevice(reinterpret_cast<daq::IDevice**>(device), reinterpret_cast<daq::IString*>(connectionString), reinterpret_cast<daq::IPropertyObject*>(config));
}

ErrCode Device_removeDevice(Device* self, Device* device)
{
    return reinterpret_cast<daq::IDevice*>(self)->removeDevice(reinterpret_cast<daq::IDevice*>(device));
}

ErrCode Device_getFunctionBlocks(Device* self, List** functionBlocks, SearchFilter* searchFilter)
{
    return reinterpret_cast<daq::IDevice*>(self)->getFunctionBlocks(reinterpret_cast<daq::IList**>(functionBlocks), reinterpret_cast<daq::ISearchFilter*>(searchFilter));
}

ErrCode Device_getAvailableFunctionBlockTypes(Device* self, Dict** functionBlockTypes)
{
    return reinterpret_cast<daq::IDevice*>(self)->getAvailableFunctionBlockTypes(reinterpret_cast<daq::IDict**>(functionBlockTypes));
}

ErrCode Device_addFunctionBlock(Device* self, FunctionBlock** functionBlock, String* typeId, PropertyObject* config)
{
    return reinterpret_cast<daq::IDevice*>(self)->addFunctionBlock(reinterpret_cast<daq::IFunctionBlock**>(functionBlock), reinterpret_cast<daq::IString*>(typeId), reinterpret_cast<daq::IPropertyObject*>(config));
}

ErrCode Device_removeFunctionBlock(Device* self, FunctionBlock* functionBlock)
{
    return reinterpret_cast<daq::IDevice*>(self)->removeFunctionBlock(reinterpret_cast<daq::IFunctionBlock*>(functionBlock));
}

ErrCode Device_saveConfiguration(Device* self, String** configuration)
{
    return reinterpret_cast<daq::IDevice*>(self)->saveConfiguration(reinterpret_cast<daq::IString**>(configuration));
}

ErrCode Device_loadConfiguration(Device* self, String* configuration, UpdateParameters* config)
{
    return reinterpret_cast<daq::IDevice*>(self)->loadConfiguration(reinterpret_cast<daq::IString*>(configuration), reinterpret_cast<daq::IUpdateParameters*>(config));
}

ErrCode Device_getTicksSinceOrigin(Device* self, UInt* ticks)
{
    return reinterpret_cast<daq::IDevice*>(self)->getTicksSinceOrigin(reinterpret_cast<daq::UInt*>(ticks));
}

ErrCode Device_addStreaming(Device* self, Streaming** streaming, String* connectionString, PropertyObject* config)
{
    return reinterpret_cast<daq::IDevice*>(self)->addStreaming(reinterpret_cast<daq::IStreaming**>(streaming), reinterpret_cast<daq::IString*>(connectionString), reinterpret_cast<daq::IPropertyObject*>(config));
}

ErrCode Device_createDefaultAddDeviceConfig(Device* self, PropertyObject** defaultConfig)
{
    return reinterpret_cast<daq::IDevice*>(self)->createDefaultAddDeviceConfig(reinterpret_cast<daq::IPropertyObject**>(defaultConfig));
}

ErrCode Device_getSyncComponent(Device* self, SyncComponent** sync)
{
    return reinterpret_cast<daq::IDevice*>(self)->getSyncComponent(reinterpret_cast<daq::ISyncComponent**>(sync));
}

ErrCode Device_addServer(Device* self, String* typeId, PropertyObject* config, Server** server)
{
    return reinterpret_cast<daq::IDevice*>(self)->addServer(reinterpret_cast<daq::IString*>(typeId), reinterpret_cast<daq::IPropertyObject*>(config), reinterpret_cast<daq::IServer**>(server));
}

ErrCode Device_removeServer(Device* self, Server* server)
{
    return reinterpret_cast<daq::IDevice*>(self)->removeServer(reinterpret_cast<daq::IServer*>(server));
}

ErrCode Device_getServers(Device* self, List** servers)
{
    return reinterpret_cast<daq::IDevice*>(self)->getServers(reinterpret_cast<daq::IList**>(servers));
}

ErrCode Device_lock(Device* self)
{
    return reinterpret_cast<daq::IDevice*>(self)->lock();
}

ErrCode Device_unlock(Device* self)
{
    return reinterpret_cast<daq::IDevice*>(self)->unlock();
}

ErrCode Device_isLocked(Device* self, Bool* locked)
{
    return reinterpret_cast<daq::IDevice*>(self)->isLocked(locked);
}

ErrCode Device_getLogFileInfos(Device* self, List** logFileInfos)
{
    return reinterpret_cast<daq::IDevice*>(self)->getLogFileInfos(reinterpret_cast<daq::IList**>(logFileInfos));
}

ErrCode Device_getLog(Device* self, String** log, String* id, Int size, Int offset)
{
    return reinterpret_cast<daq::IDevice*>(self)->getLog(reinterpret_cast<daq::IString**>(log), reinterpret_cast<daq::IString*>(id), size, offset);
}

ErrCode Device_getConnectionStatusContainer(Device* self, ComponentStatusContainer** statusContainer)
{
    return reinterpret_cast<daq::IDevice*>(self)->getConnectionStatusContainer(reinterpret_cast<daq::IComponentStatusContainer**>(statusContainer));
}

ErrCode Device_getAvailableOperationModes(Device* self, List** availableOpModes)
{
    return reinterpret_cast<daq::IDevice*>(self)->getAvailableOperationModes(reinterpret_cast<daq::IList**>(availableOpModes));
}

ErrCode Device_setOperationMode(Device* self, String* modeType)
{
    return reinterpret_cast<daq::IDevice*>(self)->setOperationMode(reinterpret_cast<daq::IString*>(modeType));
}

ErrCode Device_setOperationModeRecursive(Device* self, String* modeType)
{
    return reinterpret_cast<daq::IDevice*>(self)->setOperationModeRecursive(reinterpret_cast<daq::IString*>(modeType));
}

ErrCode Device_getOperationMode(Device* self, String** modeType)
{
    return reinterpret_cast<daq::IDevice*>(self)->getOperationMode(reinterpret_cast<daq::IString**>(modeType));
}
