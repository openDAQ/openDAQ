//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.7.0) on 03.06.2025 22:07:11.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/device/server_capability_config.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const daqIntfID DAQ_SERVER_CAPABILITY_CONFIG_INTF_ID = { daq::IServerCapabilityConfig::Id.Data1, daq::IServerCapabilityConfig::Id.Data2, daq::IServerCapabilityConfig::Id.Data3, daq::IServerCapabilityConfig::Id.Data4_UInt64 };

daqErrCode daqServerCapabilityConfig_setConnectionString(daqServerCapabilityConfig* self, daqString* connectionString)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setConnectionString(reinterpret_cast<daq::IString*>(connectionString));
}

daqErrCode daqServerCapabilityConfig_addConnectionString(daqServerCapabilityConfig* self, daqString* connectionString)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->addConnectionString(reinterpret_cast<daq::IString*>(connectionString));
}

daqErrCode daqServerCapabilityConfig_setProtocolId(daqServerCapabilityConfig* self, daqString* protocolId)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setProtocolId(reinterpret_cast<daq::IString*>(protocolId));
}

daqErrCode daqServerCapabilityConfig_setProtocolName(daqServerCapabilityConfig* self, daqString* protocolName)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setProtocolName(reinterpret_cast<daq::IString*>(protocolName));
}

daqErrCode daqServerCapabilityConfig_setProtocolType(daqServerCapabilityConfig* self, daqProtocolType type)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setProtocolType(static_cast<daq::ProtocolType>(type));
}

daqErrCode daqServerCapabilityConfig_setPrefix(daqServerCapabilityConfig* self, daqString* prefix)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setPrefix(reinterpret_cast<daq::IString*>(prefix));
}

daqErrCode daqServerCapabilityConfig_setConnectionType(daqServerCapabilityConfig* self, daqString* type)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setConnectionType(reinterpret_cast<daq::IString*>(type));
}

daqErrCode daqServerCapabilityConfig_setCoreEventsEnabled(daqServerCapabilityConfig* self, daqBool enabled)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setCoreEventsEnabled(enabled);
}

daqErrCode daqServerCapabilityConfig_addAddress(daqServerCapabilityConfig* self, daqString* address)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->addAddress(reinterpret_cast<daq::IString*>(address));
}

daqErrCode daqServerCapabilityConfig_setPort(daqServerCapabilityConfig* self, daqInteger* port)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setPort(reinterpret_cast<daq::IInteger*>(port));
}

daqErrCode daqServerCapabilityConfig_addAddressInfo(daqServerCapabilityConfig* self, daqAddressInfo* addressInfo)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->addAddressInfo(reinterpret_cast<daq::IAddressInfo*>(addressInfo));
}

daqErrCode daqServerCapabilityConfig_setProtocolVersion(daqServerCapabilityConfig* self, daqString* version)
{
    return reinterpret_cast<daq::IServerCapabilityConfig*>(self)->setProtocolVersion(reinterpret_cast<daq::IString*>(version));
}

daqErrCode daqServerCapabilityConfig_createServerCapability(daqServerCapabilityConfig** obj, daqString* protocolId, daqString* protocolName, daqProtocolType protocolType)
{
    daq::IServerCapabilityConfig* ptr = nullptr;
    daqErrCode err = daq::createServerCapability(&ptr, reinterpret_cast<daq::IString*>(protocolId), reinterpret_cast<daq::IString*>(protocolName), static_cast<daq::ProtocolType>(protocolType));
    *obj = reinterpret_cast<daqServerCapabilityConfig*>(ptr);
    return err;
}
