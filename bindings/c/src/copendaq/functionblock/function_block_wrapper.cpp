//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.5.0) on 14.04.2025 21:37:26.
// </auto-generated>
//------------------------------------------------------------------------------

#include "copendaq/functionblock/function_block_wrapper.h"

#include <opendaq/opendaq.h>

#include "copendaq_private.h"

const IntfID FUNCTION_BLOCK_WRAPPER_INTF_ID = { daq::IFunctionBlockWrapper::Id.Data1, daq::IFunctionBlockWrapper::Id.Data2, daq::IFunctionBlockWrapper::Id.Data3, daq::IFunctionBlockWrapper::Id.Data4_UInt64 };

ErrCode FunctionBlockWrapper_includeInputPort(FunctionBlockWrapper* self, String* inputPortName)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->includeInputPort(reinterpret_cast<daq::IString*>(inputPortName));
}

ErrCode FunctionBlockWrapper_excludeInputPort(FunctionBlockWrapper* self, String* inputPortName)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->excludeInputPort(reinterpret_cast<daq::IString*>(inputPortName));
}

ErrCode FunctionBlockWrapper_includeSignal(FunctionBlockWrapper* self, String* signalLocalId)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->includeSignal(reinterpret_cast<daq::IString*>(signalLocalId));
}

ErrCode FunctionBlockWrapper_excludeSignal(FunctionBlockWrapper* self, String* signalLocalId)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->excludeSignal(reinterpret_cast<daq::IString*>(signalLocalId));
}

ErrCode FunctionBlockWrapper_includeProperty(FunctionBlockWrapper* self, String* propertyName)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->includeProperty(reinterpret_cast<daq::IString*>(propertyName));
}

ErrCode FunctionBlockWrapper_excludeProperty(FunctionBlockWrapper* self, String* propertyName)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->excludeProperty(reinterpret_cast<daq::IString*>(propertyName));
}

ErrCode FunctionBlockWrapper_includeFunctionBlock(FunctionBlockWrapper* self, String* functionBlockLocalId)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->includeFunctionBlock(reinterpret_cast<daq::IString*>(functionBlockLocalId));
}

ErrCode FunctionBlockWrapper_excludeFunctionBlock(FunctionBlockWrapper* self, String* functionBlockLocalId)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->excludeFunctionBlock(reinterpret_cast<daq::IString*>(functionBlockLocalId));
}

ErrCode FunctionBlockWrapper_setPropertyCoercer(FunctionBlockWrapper* self, String* propertyName, Coercer* coercer)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->setPropertyCoercer(reinterpret_cast<daq::IString*>(propertyName), reinterpret_cast<daq::ICoercer*>(coercer));
}

ErrCode FunctionBlockWrapper_setPropertyValidator(FunctionBlockWrapper* self, String* propertyName, Validator* validator)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->setPropertyValidator(reinterpret_cast<daq::IString*>(propertyName), reinterpret_cast<daq::IValidator*>(validator));
}

ErrCode FunctionBlockWrapper_setPropertySelectionValues(FunctionBlockWrapper* self, String* propertyName, List* enumValues)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->setPropertySelectionValues(reinterpret_cast<daq::IString*>(propertyName), reinterpret_cast<daq::IList*>(enumValues));
}

ErrCode FunctionBlockWrapper_getWrappedFunctionBlock(FunctionBlockWrapper* self, FunctionBlock** functionBlock)
{
    return reinterpret_cast<daq::IFunctionBlockWrapper*>(self)->getWrappedFunctionBlock(reinterpret_cast<daq::IFunctionBlock**>(functionBlock));
}

ErrCode FunctionBlock_createFunctionBlockWrapper(FunctionBlock** obj, FunctionBlock* functionBlock, Bool includeInputPortsByDefault, Bool includeSignalsByDefault, Bool includePropertiesByDefault, Bool includeFunctionBlocksByDefault)
{
    daq::IFunctionBlock* ptr = nullptr;
    ErrCode err = daq::createFunctionBlockWrapper(&ptr, reinterpret_cast<daq::IFunctionBlock*>(functionBlock), includeInputPortsByDefault, includeSignalsByDefault, includePropertiesByDefault, includeFunctionBlocksByDefault);
    *obj = reinterpret_cast<FunctionBlock*>(ptr);
    return err;
}
