//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.5.0) on 14.04.2025 21:37:35.
// </auto-generated>
//------------------------------------------------------------------------------

#include "copendaq/reader/block_reader_builder.h"

#include <opendaq/opendaq.h>

#include "copendaq_private.h"

const IntfID BLOCK_READER_BUILDER_INTF_ID = { daq::IBlockReaderBuilder::Id.Data1, daq::IBlockReaderBuilder::Id.Data2, daq::IBlockReaderBuilder::Id.Data3, daq::IBlockReaderBuilder::Id.Data4_UInt64 };

ErrCode BlockReaderBuilder_build(BlockReaderBuilder* self, BlockReader** blockReader)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->build(reinterpret_cast<daq::IBlockReader**>(blockReader));
}

ErrCode BlockReaderBuilder_setOldBlockReader(BlockReaderBuilder* self, BlockReader* blockReader)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setOldBlockReader(reinterpret_cast<daq::IBlockReader*>(blockReader));
}

ErrCode BlockReaderBuilder_getOldBlockReader(BlockReaderBuilder* self, BlockReader** blockReader)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getOldBlockReader(reinterpret_cast<daq::IBlockReader**>(blockReader));
}

ErrCode BlockReaderBuilder_setSignal(BlockReaderBuilder* self, Signal* signal)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setSignal(reinterpret_cast<daq::ISignal*>(signal));
}

ErrCode BlockReaderBuilder_getSignal(BlockReaderBuilder* self, Signal** signal)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getSignal(reinterpret_cast<daq::ISignal**>(signal));
}

ErrCode BlockReaderBuilder_setInputPort(BlockReaderBuilder* self, InputPort* port)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setInputPort(reinterpret_cast<daq::IInputPort*>(port));
}

ErrCode BlockReaderBuilder_getInputPort(BlockReaderBuilder* self, InputPort** port)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getInputPort(reinterpret_cast<daq::IInputPort**>(port));
}

ErrCode BlockReaderBuilder_setValueReadType(BlockReaderBuilder* self, SampleType type)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setValueReadType(static_cast<daq::SampleType>(type));
}

ErrCode BlockReaderBuilder_getValueReadType(BlockReaderBuilder* self, SampleType* type)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getValueReadType(reinterpret_cast<daq::SampleType*>(type));
}

ErrCode BlockReaderBuilder_setDomainReadType(BlockReaderBuilder* self, SampleType type)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setDomainReadType(static_cast<daq::SampleType>(type));
}

ErrCode BlockReaderBuilder_getDomainReadType(BlockReaderBuilder* self, SampleType* type)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getDomainReadType(reinterpret_cast<daq::SampleType*>(type));
}

ErrCode BlockReaderBuilder_setReadMode(BlockReaderBuilder* self, ReadMode mode)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setReadMode(static_cast<daq::ReadMode>(mode));
}

ErrCode BlockReaderBuilder_getReadMode(BlockReaderBuilder* self, ReadMode* mode)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getReadMode(reinterpret_cast<daq::ReadMode*>(mode));
}

ErrCode BlockReaderBuilder_setBlockSize(BlockReaderBuilder* self, SizeT size)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setBlockSize(size);
}

ErrCode BlockReaderBuilder_getBlockSize(BlockReaderBuilder* self, SizeT* size)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getBlockSize(size);
}

ErrCode BlockReaderBuilder_setOverlap(BlockReaderBuilder* self, SizeT overlap)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setOverlap(overlap);
}

ErrCode BlockReaderBuilder_getOverlap(BlockReaderBuilder* self, SizeT* overlap)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getOverlap(overlap);
}

ErrCode BlockReaderBuilder_setSkipEvents(BlockReaderBuilder* self, Bool skipEvents)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->setSkipEvents(skipEvents);
}

ErrCode BlockReaderBuilder_getSkipEvents(BlockReaderBuilder* self, Bool* skipEvents)
{
    return reinterpret_cast<daq::IBlockReaderBuilder*>(self)->getSkipEvents(skipEvents);
}

ErrCode BlockReaderBuilder_createBlockReaderBuilder(BlockReaderBuilder** obj)
{
    daq::IBlockReaderBuilder* ptr = nullptr;
    ErrCode err = daq::createBlockReaderBuilder(&ptr);
    *obj = reinterpret_cast<BlockReaderBuilder*>(ptr);
    return err;
}
