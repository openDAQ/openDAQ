//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.7.0) on 03.06.2025 22:07:24.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/reader/multi_reader.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const daqIntfID DAQ_MULTI_READER_INTF_ID = { daq::IMultiReader::Id.Data1, daq::IMultiReader::Id.Data2, daq::IMultiReader::Id.Data3, daq::IMultiReader::Id.Data4_UInt64 };

daqErrCode daqMultiReader_read(daqMultiReader* self, void* samples, daqSizeT* count, daqSizeT timeoutMs, daqMultiReaderStatus** status)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->read(samples, count, timeoutMs, reinterpret_cast<daq::IMultiReaderStatus**>(status));
}

daqErrCode daqMultiReader_readWithDomain(daqMultiReader* self, void* samples, void* domain, daqSizeT* count, daqSizeT timeoutMs, daqMultiReaderStatus** status)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->readWithDomain(samples, domain, count, timeoutMs, reinterpret_cast<daq::IMultiReaderStatus**>(status));
}

daqErrCode daqMultiReader_skipSamples(daqMultiReader* self, daqSizeT* count, daqMultiReaderStatus** status)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->skipSamples(count, reinterpret_cast<daq::IMultiReaderStatus**>(status));
}

daqErrCode daqMultiReader_getTickResolution(daqMultiReader* self, daqRatio** resolution)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->getTickResolution(reinterpret_cast<daq::IRatio**>(resolution));
}

daqErrCode daqMultiReader_getOrigin(daqMultiReader* self, daqString** origin)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->getOrigin(reinterpret_cast<daq::IString**>(origin));
}

daqErrCode daqMultiReader_getOffset(daqMultiReader* self, void* domainStart)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->getOffset(domainStart);
}

daqErrCode daqMultiReader_getIsSynchronized(daqMultiReader* self, daqBool* isSynchronized)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->getIsSynchronized(isSynchronized);
}

daqErrCode daqMultiReader_getCommonSampleRate(daqMultiReader* self, daqInt* commonSampleRate)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->getCommonSampleRate(commonSampleRate);
}

daqErrCode daqMultiReader_setActive(daqMultiReader* self, daqBool isActive)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->setActive(isActive);
}

daqErrCode daqMultiReader_getActive(daqMultiReader* self, daqBool* isActive)
{
    return reinterpret_cast<daq::IMultiReader*>(self)->getActive(isActive);
}

daqErrCode daqMultiReader_createMultiReader(daqMultiReader** obj, daqList* signals, daqSampleType valueReadType, daqSampleType domainReadType, daqReadMode mode, daqReadTimeoutType timeoutType)
{
    daq::IMultiReader* ptr = nullptr;
    daqErrCode err = daq::createMultiReader(&ptr, reinterpret_cast<daq::IList*>(signals), static_cast<daq::SampleType>(valueReadType), static_cast<daq::SampleType>(domainReadType), static_cast<daq::ReadMode>(mode), static_cast<daq::ReadTimeoutType>(timeoutType));
    *obj = reinterpret_cast<daqMultiReader*>(ptr);
    return err;
}

daqErrCode daqMultiReader_createMultiReaderEx(daqMultiReader** obj, daqList* signals, daqSampleType valueReadType, daqSampleType domainReadType, daqReadMode mode, daqReadTimeoutType timeoutType, daqInt requiredCommonSampleRate, daqBool startOnFullUnitOfDomain, daqSizeT minReadCount)
{
    daq::IMultiReader* ptr = nullptr;
    daqErrCode err = daq::createMultiReaderEx(&ptr, reinterpret_cast<daq::IList*>(signals), static_cast<daq::SampleType>(valueReadType), static_cast<daq::SampleType>(domainReadType), static_cast<daq::ReadMode>(mode), static_cast<daq::ReadTimeoutType>(timeoutType), requiredCommonSampleRate, startOnFullUnitOfDomain, minReadCount);
    *obj = reinterpret_cast<daqMultiReader*>(ptr);
    return err;
}

daqErrCode daqMultiReader_createMultiReaderFromExisting(daqMultiReader** obj, daqMultiReader* invalidatedReader, daqSampleType valueReadType, daqSampleType domainReadType)
{
    daq::IMultiReader* ptr = nullptr;
    daqErrCode err = daq::createMultiReaderFromExisting(&ptr, reinterpret_cast<daq::IMultiReader*>(invalidatedReader), static_cast<daq::SampleType>(valueReadType), static_cast<daq::SampleType>(domainReadType));
    *obj = reinterpret_cast<daqMultiReader*>(ptr);
    return err;
}
