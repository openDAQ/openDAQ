//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.7.0) on 03.06.2025 22:07:24.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/reader/multi_reader_builder.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const daqIntfID DAQ_MULTI_READER_BUILDER_INTF_ID = { daq::IMultiReaderBuilder::Id.Data1, daq::IMultiReaderBuilder::Id.Data2, daq::IMultiReaderBuilder::Id.Data3, daq::IMultiReaderBuilder::Id.Data4_UInt64 };

daqErrCode daqMultiReaderBuilder_build(daqMultiReaderBuilder* self, daqMultiReader** multiReader)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->build(reinterpret_cast<daq::IMultiReader**>(multiReader));
}

daqErrCode daqMultiReaderBuilder_addSignal(daqMultiReaderBuilder* self, daqSignal* signal)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->addSignal(reinterpret_cast<daq::ISignal*>(signal));
}

daqErrCode daqMultiReaderBuilder_addInputPort(daqMultiReaderBuilder* self, daqInputPort* port)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->addInputPort(reinterpret_cast<daq::IInputPort*>(port));
}

daqErrCode daqMultiReaderBuilder_getSourceComponents(daqMultiReaderBuilder* self, daqList** ports)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getSourceComponents(reinterpret_cast<daq::IList**>(ports));
}

daqErrCode daqMultiReaderBuilder_setValueReadType(daqMultiReaderBuilder* self, daqSampleType type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setValueReadType(static_cast<daq::SampleType>(type));
}

daqErrCode daqMultiReaderBuilder_getValueReadType(daqMultiReaderBuilder* self, daqSampleType* type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getValueReadType(reinterpret_cast<daq::SampleType*>(type));
}

daqErrCode daqMultiReaderBuilder_setDomainReadType(daqMultiReaderBuilder* self, daqSampleType type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setDomainReadType(static_cast<daq::SampleType>(type));
}

daqErrCode daqMultiReaderBuilder_getDomainReadType(daqMultiReaderBuilder* self, daqSampleType* type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getDomainReadType(reinterpret_cast<daq::SampleType*>(type));
}

daqErrCode daqMultiReaderBuilder_setReadMode(daqMultiReaderBuilder* self, daqReadMode mode)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setReadMode(static_cast<daq::ReadMode>(mode));
}

daqErrCode daqMultiReaderBuilder_getReadMode(daqMultiReaderBuilder* self, daqReadMode* mode)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getReadMode(reinterpret_cast<daq::ReadMode*>(mode));
}

daqErrCode daqMultiReaderBuilder_setReadTimeoutType(daqMultiReaderBuilder* self, daqReadTimeoutType type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setReadTimeoutType(static_cast<daq::ReadTimeoutType>(type));
}

daqErrCode daqMultiReaderBuilder_getReadTimeoutType(daqMultiReaderBuilder* self, daqReadTimeoutType* type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getReadTimeoutType(reinterpret_cast<daq::ReadTimeoutType*>(type));
}

daqErrCode daqMultiReaderBuilder_setRequiredCommonSampleRate(daqMultiReaderBuilder* self, daqInt sampleRate)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setRequiredCommonSampleRate(sampleRate);
}

daqErrCode daqMultiReaderBuilder_getRequiredCommonSampleRate(daqMultiReaderBuilder* self, daqInt* sampleRate)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getRequiredCommonSampleRate(sampleRate);
}

daqErrCode daqMultiReaderBuilder_setStartOnFullUnitOfDomain(daqMultiReaderBuilder* self, daqBool enabled)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setStartOnFullUnitOfDomain(enabled);
}

daqErrCode daqMultiReaderBuilder_getStartOnFullUnitOfDomain(daqMultiReaderBuilder* self, daqBool* enabled)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getStartOnFullUnitOfDomain(enabled);
}

daqErrCode daqMultiReaderBuilder_setMinReadCount(daqMultiReaderBuilder* self, daqSizeT minReadCount)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setMinReadCount(minReadCount);
}

daqErrCode daqMultiReaderBuilder_getMinReadCount(daqMultiReaderBuilder* self, daqSizeT* minReadCount)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getMinReadCount(minReadCount);
}

daqErrCode daqMultiReaderBuilder_setTickOffsetTolerance(daqMultiReaderBuilder* self, daqRatio* offsetTolerance)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setTickOffsetTolerance(reinterpret_cast<daq::IRatio*>(offsetTolerance));
}

daqErrCode daqMultiReaderBuilder_getTickOffsetTolerance(daqMultiReaderBuilder* self, daqRatio** offsetTolerance)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getTickOffsetTolerance(reinterpret_cast<daq::IRatio**>(offsetTolerance));
}

daqErrCode daqMultiReaderBuilder_createMultiReaderBuilder(daqMultiReaderBuilder** obj)
{
    daq::IMultiReaderBuilder* ptr = nullptr;
    daqErrCode err = daq::createMultiReaderBuilder(&ptr);
    *obj = reinterpret_cast<daqMultiReaderBuilder*>(ptr);
    return err;
}
