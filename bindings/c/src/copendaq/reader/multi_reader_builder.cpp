//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.6.0) on 27.04.2025 18:33:45.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/reader/multi_reader_builder.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const IntfID MULTI_READER_BUILDER_INTF_ID = { daq::IMultiReaderBuilder::Id.Data1, daq::IMultiReaderBuilder::Id.Data2, daq::IMultiReaderBuilder::Id.Data3, daq::IMultiReaderBuilder::Id.Data4_UInt64 };

ErrCode MultiReaderBuilder_build(MultiReaderBuilder* self, MultiReader** multiReader)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->build(reinterpret_cast<daq::IMultiReader**>(multiReader));
}

ErrCode MultiReaderBuilder_addSignal(MultiReaderBuilder* self, Signal* signal)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->addSignal(reinterpret_cast<daq::ISignal*>(signal));
}

ErrCode MultiReaderBuilder_addInputPort(MultiReaderBuilder* self, InputPort* port)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->addInputPort(reinterpret_cast<daq::IInputPort*>(port));
}

ErrCode MultiReaderBuilder_getSourceComponents(MultiReaderBuilder* self, List** ports)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getSourceComponents(reinterpret_cast<daq::IList**>(ports));
}

ErrCode MultiReaderBuilder_setValueReadType(MultiReaderBuilder* self, SampleType type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setValueReadType(static_cast<daq::SampleType>(type));
}

ErrCode MultiReaderBuilder_getValueReadType(MultiReaderBuilder* self, SampleType* type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getValueReadType(reinterpret_cast<daq::SampleType*>(type));
}

ErrCode MultiReaderBuilder_setDomainReadType(MultiReaderBuilder* self, SampleType type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setDomainReadType(static_cast<daq::SampleType>(type));
}

ErrCode MultiReaderBuilder_getDomainReadType(MultiReaderBuilder* self, SampleType* type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getDomainReadType(reinterpret_cast<daq::SampleType*>(type));
}

ErrCode MultiReaderBuilder_setReadMode(MultiReaderBuilder* self, ReadMode mode)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setReadMode(static_cast<daq::ReadMode>(mode));
}

ErrCode MultiReaderBuilder_getReadMode(MultiReaderBuilder* self, ReadMode* mode)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getReadMode(reinterpret_cast<daq::ReadMode*>(mode));
}

ErrCode MultiReaderBuilder_setReadTimeoutType(MultiReaderBuilder* self, ReadTimeoutType type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setReadTimeoutType(static_cast<daq::ReadTimeoutType>(type));
}

ErrCode MultiReaderBuilder_getReadTimeoutType(MultiReaderBuilder* self, ReadTimeoutType* type)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getReadTimeoutType(reinterpret_cast<daq::ReadTimeoutType*>(type));
}

ErrCode MultiReaderBuilder_setRequiredCommonSampleRate(MultiReaderBuilder* self, Int sampleRate)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setRequiredCommonSampleRate(sampleRate);
}

ErrCode MultiReaderBuilder_getRequiredCommonSampleRate(MultiReaderBuilder* self, Int* sampleRate)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getRequiredCommonSampleRate(sampleRate);
}

ErrCode MultiReaderBuilder_setStartOnFullUnitOfDomain(MultiReaderBuilder* self, Bool enabled)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setStartOnFullUnitOfDomain(enabled);
}

ErrCode MultiReaderBuilder_getStartOnFullUnitOfDomain(MultiReaderBuilder* self, Bool* enabled)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getStartOnFullUnitOfDomain(enabled);
}

ErrCode MultiReaderBuilder_setMinReadCount(MultiReaderBuilder* self, SizeT minReadCount)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setMinReadCount(minReadCount);
}

ErrCode MultiReaderBuilder_getMinReadCount(MultiReaderBuilder* self, SizeT* minReadCount)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getMinReadCount(minReadCount);
}

ErrCode MultiReaderBuilder_setTickOffsetTolerance(MultiReaderBuilder* self, Ratio* offsetTolerance)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->setTickOffsetTolerance(reinterpret_cast<daq::IRatio*>(offsetTolerance));
}

ErrCode MultiReaderBuilder_getTickOffsetTolerance(MultiReaderBuilder* self, Ratio** offsetTolerance)
{
    return reinterpret_cast<daq::IMultiReaderBuilder*>(self)->getTickOffsetTolerance(reinterpret_cast<daq::IRatio**>(offsetTolerance));
}

ErrCode MultiReaderBuilder_createMultiReaderBuilder(MultiReaderBuilder** obj)
{
    daq::IMultiReaderBuilder* ptr = nullptr;
    ErrCode err = daq::createMultiReaderBuilder(&ptr);
    *obj = reinterpret_cast<MultiReaderBuilder*>(ptr);
    return err;
}
