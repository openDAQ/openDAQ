//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.7.0) on 03.06.2025 22:07:29.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/reader/stream_reader_builder.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const daqIntfID DAQ_STREAM_READER_BUILDER_INTF_ID = { daq::IStreamReaderBuilder::Id.Data1, daq::IStreamReaderBuilder::Id.Data2, daq::IStreamReaderBuilder::Id.Data3, daq::IStreamReaderBuilder::Id.Data4_UInt64 };

daqErrCode daqStreamReaderBuilder_build(daqStreamReaderBuilder* self, daqStreamReader** streamReader)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->build(reinterpret_cast<daq::IStreamReader**>(streamReader));
}

daqErrCode daqStreamReaderBuilder_setSignal(daqStreamReaderBuilder* self, daqSignal* signal)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->setSignal(reinterpret_cast<daq::ISignal*>(signal));
}

daqErrCode daqStreamReaderBuilder_getSignal(daqStreamReaderBuilder* self, daqSignal** signal)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->getSignal(reinterpret_cast<daq::ISignal**>(signal));
}

daqErrCode daqStreamReaderBuilder_setInputPort(daqStreamReaderBuilder* self, daqInputPort* port)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->setInputPort(reinterpret_cast<daq::IInputPort*>(port));
}

daqErrCode daqStreamReaderBuilder_getInputPort(daqStreamReaderBuilder* self, daqInputPort** port)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->getInputPort(reinterpret_cast<daq::IInputPort**>(port));
}

daqErrCode daqStreamReaderBuilder_setValueReadType(daqStreamReaderBuilder* self, daqSampleType type)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->setValueReadType(static_cast<daq::SampleType>(type));
}

daqErrCode daqStreamReaderBuilder_getValueReadType(daqStreamReaderBuilder* self, daqSampleType* type)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->getValueReadType(reinterpret_cast<daq::SampleType*>(type));
}

daqErrCode daqStreamReaderBuilder_setDomainReadType(daqStreamReaderBuilder* self, daqSampleType type)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->setDomainReadType(static_cast<daq::SampleType>(type));
}

daqErrCode daqStreamReaderBuilder_getDomainReadType(daqStreamReaderBuilder* self, daqSampleType* type)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->getDomainReadType(reinterpret_cast<daq::SampleType*>(type));
}

daqErrCode daqStreamReaderBuilder_setReadMode(daqStreamReaderBuilder* self, daqReadMode mode)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->setReadMode(static_cast<daq::ReadMode>(mode));
}

daqErrCode daqStreamReaderBuilder_getReadMode(daqStreamReaderBuilder* self, daqReadMode* mode)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->getReadMode(reinterpret_cast<daq::ReadMode*>(mode));
}

daqErrCode daqStreamReaderBuilder_setReadTimeoutType(daqStreamReaderBuilder* self, daqReadTimeoutType type)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->setReadTimeoutType(static_cast<daq::ReadTimeoutType>(type));
}

daqErrCode daqStreamReaderBuilder_getReadTimeoutType(daqStreamReaderBuilder* self, daqReadTimeoutType* type)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->getReadTimeoutType(reinterpret_cast<daq::ReadTimeoutType*>(type));
}

daqErrCode daqStreamReaderBuilder_setSkipEvents(daqStreamReaderBuilder* self, daqBool skipEvents)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->setSkipEvents(skipEvents);
}

daqErrCode daqStreamReaderBuilder_getSkipEvents(daqStreamReaderBuilder* self, daqBool* skipEvents)
{
    return reinterpret_cast<daq::IStreamReaderBuilder*>(self)->getSkipEvents(skipEvents);
}

daqErrCode daqStreamReaderBuilder_createStreamReaderBuilder(daqStreamReaderBuilder** obj)
{
    daq::IStreamReaderBuilder* ptr = nullptr;
    daqErrCode err = daq::createStreamReaderBuilder(&ptr);
    *obj = reinterpret_cast<daqStreamReaderBuilder*>(ptr);
    return err;
}
