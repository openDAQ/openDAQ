//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.7.0) on 03.06.2025 22:07:38.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/signal/connection.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const daqIntfID DAQ_CONNECTION_INTF_ID = { daq::IConnection::Id.Data1, daq::IConnection::Id.Data2, daq::IConnection::Id.Data3, daq::IConnection::Id.Data4_UInt64 };

daqErrCode daqConnection_enqueue(daqConnection* self, daqPacket* packet)
{
    return reinterpret_cast<daq::IConnection*>(self)->enqueue(reinterpret_cast<daq::IPacket*>(packet));
}

daqErrCode daqConnection_enqueueOnThisThread(daqConnection* self, daqPacket* packet)
{
    return reinterpret_cast<daq::IConnection*>(self)->enqueueOnThisThread(reinterpret_cast<daq::IPacket*>(packet));
}

daqErrCode daqConnection_dequeue(daqConnection* self, daqPacket** packet)
{
    return reinterpret_cast<daq::IConnection*>(self)->dequeue(reinterpret_cast<daq::IPacket**>(packet));
}

daqErrCode daqConnection_peek(daqConnection* self, daqPacket** packet)
{
    return reinterpret_cast<daq::IConnection*>(self)->peek(reinterpret_cast<daq::IPacket**>(packet));
}

daqErrCode daqConnection_getPacketCount(daqConnection* self, daqSizeT* packetCount)
{
    return reinterpret_cast<daq::IConnection*>(self)->getPacketCount(packetCount);
}

daqErrCode daqConnection_getSignal(daqConnection* self, daqSignal** signal)
{
    return reinterpret_cast<daq::IConnection*>(self)->getSignal(reinterpret_cast<daq::ISignal**>(signal));
}

daqErrCode daqConnection_getInputPort(daqConnection* self, daqInputPort** inputPort)
{
    return reinterpret_cast<daq::IConnection*>(self)->getInputPort(reinterpret_cast<daq::IInputPort**>(inputPort));
}

daqErrCode daqConnection_getAvailableSamples(daqConnection* self, daqSizeT* samples)
{
    return reinterpret_cast<daq::IConnection*>(self)->getAvailableSamples(samples);
}

daqErrCode daqConnection_getSamplesUntilNextDescriptor(daqConnection* self, daqSizeT* samples)
{
    return reinterpret_cast<daq::IConnection*>(self)->getSamplesUntilNextDescriptor(samples);
}

daqErrCode daqConnection_isRemote(daqConnection* self, daqBool* remote)
{
    return reinterpret_cast<daq::IConnection*>(self)->isRemote(remote);
}

daqErrCode daqConnection_enqueueAndStealRef(daqConnection* self, daqPacket* packet)
{
    return reinterpret_cast<daq::IConnection*>(self)->enqueueAndStealRef(reinterpret_cast<daq::IPacket*>(packet));
}

daqErrCode daqConnection_enqueueMultiple(daqConnection* self, daqList* packets)
{
    return reinterpret_cast<daq::IConnection*>(self)->enqueueMultiple(reinterpret_cast<daq::IList*>(packets));
}

daqErrCode daqConnection_enqueueMultipleAndStealRef(daqConnection* self, daqList* packets)
{
    return reinterpret_cast<daq::IConnection*>(self)->enqueueMultipleAndStealRef(reinterpret_cast<daq::IList*>(packets));
}

daqErrCode daqConnection_dequeueAll(daqConnection* self, daqList** packets)
{
    return reinterpret_cast<daq::IConnection*>(self)->dequeueAll(reinterpret_cast<daq::IList**>(packets));
}

daqErrCode daqConnection_getSamplesUntilNextEventPacket(daqConnection* self, daqSizeT* samples)
{
    return reinterpret_cast<daq::IConnection*>(self)->getSamplesUntilNextEventPacket(samples);
}

daqErrCode daqConnection_getSamplesUntilNextGapPacket(daqConnection* self, daqSizeT* samples)
{
    return reinterpret_cast<daq::IConnection*>(self)->getSamplesUntilNextGapPacket(samples);
}

daqErrCode daqConnection_hasEventPacket(daqConnection* self, daqBool* hasEventPacket)
{
    return reinterpret_cast<daq::IConnection*>(self)->hasEventPacket(hasEventPacket);
}

daqErrCode daqConnection_hasGapPacket(daqConnection* self, daqBool* hasGapPacket)
{
    return reinterpret_cast<daq::IConnection*>(self)->hasGapPacket(hasGapPacket);
}

daqErrCode daqConnection_createConnection(daqConnection** obj, daqInputPort* inputPort, daqSignal* signal, daqContext* context)
{
    daq::IConnection* ptr = nullptr;
    daqErrCode err = daq::createConnection(&ptr, reinterpret_cast<daq::IInputPort*>(inputPort), reinterpret_cast<daq::ISignal*>(signal), reinterpret_cast<daq::IContext*>(context));
    *obj = reinterpret_cast<daqConnection*>(ptr);
    return err;
}
