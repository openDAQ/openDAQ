//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.6.0) on 27.04.2025 18:33:59.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/signal/data_descriptor.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const IntfID DATA_DESCRIPTOR_INTF_ID = { daq::IDataDescriptor::Id.Data1, daq::IDataDescriptor::Id.Data2, daq::IDataDescriptor::Id.Data3, daq::IDataDescriptor::Id.Data4_UInt64 };

ErrCode DataDescriptor_getName(DataDescriptor* self, String** name)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getName(reinterpret_cast<daq::IString**>(name));
}

ErrCode DataDescriptor_getDimensions(DataDescriptor* self, List** dimensions)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getDimensions(reinterpret_cast<daq::IList**>(dimensions));
}

ErrCode DataDescriptor_getSampleType(DataDescriptor* self, SampleType* sampleType)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getSampleType(reinterpret_cast<daq::SampleType*>(sampleType));
}

ErrCode DataDescriptor_getUnit(DataDescriptor* self, Unit** unit)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getUnit(reinterpret_cast<daq::IUnit**>(unit));
}

ErrCode DataDescriptor_getValueRange(DataDescriptor* self, Range** range)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getValueRange(reinterpret_cast<daq::IRange**>(range));
}

ErrCode DataDescriptor_getRule(DataDescriptor* self, DataRule** rule)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getRule(reinterpret_cast<daq::IDataRule**>(rule));
}

ErrCode DataDescriptor_getOrigin(DataDescriptor* self, String** origin)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getOrigin(reinterpret_cast<daq::IString**>(origin));
}

ErrCode DataDescriptor_getTickResolution(DataDescriptor* self, Ratio** tickResolution)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getTickResolution(reinterpret_cast<daq::IRatio**>(tickResolution));
}

ErrCode DataDescriptor_getPostScaling(DataDescriptor* self, Scaling** scaling)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getPostScaling(reinterpret_cast<daq::IScaling**>(scaling));
}

ErrCode DataDescriptor_getStructFields(DataDescriptor* self, List** structFields)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getStructFields(reinterpret_cast<daq::IList**>(structFields));
}

ErrCode DataDescriptor_getMetadata(DataDescriptor* self, Dict** metadata)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getMetadata(reinterpret_cast<daq::IDict**>(metadata));
}

ErrCode DataDescriptor_getSampleSize(DataDescriptor* self, SizeT* sampleSize)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getSampleSize(sampleSize);
}

ErrCode DataDescriptor_getRawSampleSize(DataDescriptor* self, SizeT* rawSampleSize)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getRawSampleSize(rawSampleSize);
}

ErrCode DataDescriptor_getReferenceDomainInfo(DataDescriptor* self, ReferenceDomainInfo** referenceDomainInfo)
{
    return reinterpret_cast<daq::IDataDescriptor*>(self)->getReferenceDomainInfo(reinterpret_cast<daq::IReferenceDomainInfo**>(referenceDomainInfo));
}

ErrCode DataDescriptor_createDataDescriptorFromBuilder(DataDescriptor** obj, DataDescriptorBuilder* builder)
{
    daq::IDataDescriptor* ptr = nullptr;
    ErrCode err = daq::createDataDescriptorFromBuilder(&ptr, reinterpret_cast<daq::IDataDescriptorBuilder*>(builder));
    *obj = reinterpret_cast<DataDescriptor*>(ptr);
    return err;
}
