//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CGenerator v0.6.0) on 27.04.2025 18:34:00.
// </auto-generated>
//------------------------------------------------------------------------------

#include <copendaq/signal/data_descriptor_builder.h>

#include <opendaq/opendaq.h>

#include <copendaq_private.h>

const IntfID DATA_DESCRIPTOR_BUILDER_INTF_ID = { daq::IDataDescriptorBuilder::Id.Data1, daq::IDataDescriptorBuilder::Id.Data2, daq::IDataDescriptorBuilder::Id.Data3, daq::IDataDescriptorBuilder::Id.Data4_UInt64 };

ErrCode DataDescriptorBuilder_build(DataDescriptorBuilder* self, DataDescriptor** dataDescriptor)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->build(reinterpret_cast<daq::IDataDescriptor**>(dataDescriptor));
}

ErrCode DataDescriptorBuilder_setName(DataDescriptorBuilder* self, String* name)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setName(reinterpret_cast<daq::IString*>(name));
}

ErrCode DataDescriptorBuilder_getName(DataDescriptorBuilder* self, String** name)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getName(reinterpret_cast<daq::IString**>(name));
}

ErrCode DataDescriptorBuilder_setDimensions(DataDescriptorBuilder* self, List* dimensions)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setDimensions(reinterpret_cast<daq::IList*>(dimensions));
}

ErrCode DataDescriptorBuilder_getDimensions(DataDescriptorBuilder* self, List** dimensions)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getDimensions(reinterpret_cast<daq::IList**>(dimensions));
}

ErrCode DataDescriptorBuilder_setSampleType(DataDescriptorBuilder* self, SampleType sampleType)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setSampleType(static_cast<daq::SampleType>(sampleType));
}

ErrCode DataDescriptorBuilder_getSampleType(DataDescriptorBuilder* self, SampleType* sampleType)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getSampleType(reinterpret_cast<daq::SampleType*>(sampleType));
}

ErrCode DataDescriptorBuilder_setUnit(DataDescriptorBuilder* self, Unit* unit)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setUnit(reinterpret_cast<daq::IUnit*>(unit));
}

ErrCode DataDescriptorBuilder_getUnit(DataDescriptorBuilder* self, Unit** unit)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getUnit(reinterpret_cast<daq::IUnit**>(unit));
}

ErrCode DataDescriptorBuilder_setValueRange(DataDescriptorBuilder* self, Range* range)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setValueRange(reinterpret_cast<daq::IRange*>(range));
}

ErrCode DataDescriptorBuilder_getValueRange(DataDescriptorBuilder* self, Range** range)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getValueRange(reinterpret_cast<daq::IRange**>(range));
}

ErrCode DataDescriptorBuilder_setRule(DataDescriptorBuilder* self, DataRule* rule)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setRule(reinterpret_cast<daq::IDataRule*>(rule));
}

ErrCode DataDescriptorBuilder_getRule(DataDescriptorBuilder* self, DataRule** rule)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getRule(reinterpret_cast<daq::IDataRule**>(rule));
}

ErrCode DataDescriptorBuilder_setOrigin(DataDescriptorBuilder* self, String* origin)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setOrigin(reinterpret_cast<daq::IString*>(origin));
}

ErrCode DataDescriptorBuilder_getOrigin(DataDescriptorBuilder* self, String** origin)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getOrigin(reinterpret_cast<daq::IString**>(origin));
}

ErrCode DataDescriptorBuilder_setTickResolution(DataDescriptorBuilder* self, Ratio* tickResolution)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setTickResolution(reinterpret_cast<daq::IRatio*>(tickResolution));
}

ErrCode DataDescriptorBuilder_getTickResolution(DataDescriptorBuilder* self, Ratio** tickResolution)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getTickResolution(reinterpret_cast<daq::IRatio**>(tickResolution));
}

ErrCode DataDescriptorBuilder_setPostScaling(DataDescriptorBuilder* self, Scaling* scaling)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setPostScaling(reinterpret_cast<daq::IScaling*>(scaling));
}

ErrCode DataDescriptorBuilder_getPostScaling(DataDescriptorBuilder* self, Scaling** scaling)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getPostScaling(reinterpret_cast<daq::IScaling**>(scaling));
}

ErrCode DataDescriptorBuilder_setStructFields(DataDescriptorBuilder* self, List* structFields)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setStructFields(reinterpret_cast<daq::IList*>(structFields));
}

ErrCode DataDescriptorBuilder_getStructFields(DataDescriptorBuilder* self, List** structFields)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getStructFields(reinterpret_cast<daq::IList**>(structFields));
}

ErrCode DataDescriptorBuilder_setMetadata(DataDescriptorBuilder* self, Dict* metadata)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setMetadata(reinterpret_cast<daq::IDict*>(metadata));
}

ErrCode DataDescriptorBuilder_getMetadata(DataDescriptorBuilder* self, Dict** metadata)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getMetadata(reinterpret_cast<daq::IDict**>(metadata));
}

ErrCode DataDescriptorBuilder_setReferenceDomainInfo(DataDescriptorBuilder* self, ReferenceDomainInfo* referenceDomainInfo)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->setReferenceDomainInfo(reinterpret_cast<daq::IReferenceDomainInfo*>(referenceDomainInfo));
}

ErrCode DataDescriptorBuilder_getReferenceDomainInfo(DataDescriptorBuilder* self, ReferenceDomainInfo** referenceDomainInfo)
{
    return reinterpret_cast<daq::IDataDescriptorBuilder*>(self)->getReferenceDomainInfo(reinterpret_cast<daq::IReferenceDomainInfo**>(referenceDomainInfo));
}

ErrCode DataDescriptorBuilder_createDataDescriptorBuilder(DataDescriptorBuilder** obj)
{
    daq::IDataDescriptorBuilder* ptr = nullptr;
    ErrCode err = daq::createDataDescriptorBuilder(&ptr);
    *obj = reinterpret_cast<DataDescriptorBuilder*>(ptr);
    return err;
}

ErrCode DataDescriptorBuilder_createDataDescriptorBuilderFromExisting(DataDescriptorBuilder** obj, DataDescriptor* descriptorToCopy)
{
    daq::IDataDescriptorBuilder* ptr = nullptr;
    ErrCode err = daq::createDataDescriptorBuilderFromExisting(&ptr, reinterpret_cast<daq::IDataDescriptor*>(descriptorToCopy));
    *obj = reinterpret_cast<DataDescriptorBuilder*>(ptr);
    return err;
}
