/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CSharpGenerator v1.0.0) on D-E-B-U-G.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Daq.Core.Types;


[StructLayout(LayoutKind.Sequential)]
internal unsafe class RawEnumerationType : RawDaqType
{
    //ErrorCode getEnumeratorNames(daq.IList** names); stdcall;
    public delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, ErrorCode> GetEnumeratorNames;
    //ErrorCode getAsDictionary(daq.IDict** dictionary); stdcall;
    public delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, ErrorCode> GetAsDictionary;
    //ErrorCode getEnumeratorIntValue(daq.IString* name, daq.Int* value); stdcall;
    public delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out long, ErrorCode> GetEnumeratorIntValue;
    //ErrorCode getCount(daq.SizeT* count); stdcall;
    public delegate* unmanaged[Stdcall]<IntPtr, out nuint, ErrorCode> GetCount;
}

/// <summary>
/// Enumeration types define the enumerator names and values of Enumerations with a name matching
/// that of the Enumeration type.
/// </summary>
/// <remarks>
/// An Enumeration type provides a String-type name, a list of enumerator names (list of Strings) and
/// a list of enumerator values (list of Integer objects). To use Enumeration types for creating Enumeration
/// objects, they must be added to the Type Manager. Alternatively, if an Enumeration is created without
/// a matching Enumeration type in the manager, a default Enumeration type is generated based on the
/// enumerator names and values of the created Enumeration object. This generated Enumeration type is then
/// added to the Type Manager.
/// <para/>
/// The enumerator values are represented as a list of Integer objects. These values can be explicitly specified
/// during Enumeration type creation, or only the first enumerator value can be specified, with the rest
/// automatically assigned in ascending order, starting from that value (or from the default <c>0</c> value if not
/// specified).
/// </remarks>
[Guid("9c90d219-2a56-50d6-8767-dc866826ed56")]
public class EnumerationType : DaqType
{
    //type-casted base._virtualTable
    private readonly RawEnumerationType _rawEnumerationType;

    internal EnumerationType(IntPtr nativePointer, bool incrementReference)
        : base(nativePointer, incrementReference)
    {
        IntPtr objVirtualTable = Marshal.ReadIntPtr(nativePointer, 0); //read the pointer from the given address
        base._virtualTable =
            _rawEnumerationType = Marshal.PtrToStructure<RawEnumerationType>(objVirtualTable);
    }

    /// <summary>Gets the list of enumerator names.</summary>
    /// <returns>The list of enumerator names (String objects)</returns>
    public IListObject<StringObject> GetEnumeratorNames()
    {
        //native output argument
        IntPtr namesPtr;

        unsafe //use native function pointer
        {
            //call native function
            ErrorCode errorCode = (ErrorCode)_rawEnumerationType.GetEnumeratorNames(base.NativePointer, out namesPtr);

            if (Result.Failed(errorCode))
            {
                throw new OpenDaqException(errorCode);
            }
        }

        return new ListObject<StringObject>(namesPtr, incrementReference: false);
    }

    /// <summary>Gets the enumerator names and values as a Dictionary.</summary>
    /// <returns>
    /// The Dictionary object with enumerator names as keys, and enumerator values
    /// as its values.
    /// </returns>
    public IDictObject<StringObject, IntegerObject> GetAsDictionary()
    {
        //native output argument
        IntPtr dictionaryPtr;

        unsafe //use native function pointer
        {
            //call native function
            ErrorCode errorCode = (ErrorCode)_rawEnumerationType.GetAsDictionary(base.NativePointer, out dictionaryPtr);

            if (Result.Failed(errorCode))
            {
                throw new OpenDaqException(errorCode);
            }
        }

        return new DictObject<StringObject, IntegerObject>(dictionaryPtr, incrementReference: false);
    }

    /// <summary>Gets the value of enumerator with the specified name.</summary>
    /// <param name="name">The name of the enumerator (String object).</param>
    /// <returns>The integer value of the enumerator with the specified name.</returns>
    public long GetEnumeratorIntValue(string name)
    {
        //native output argument
        long value;

        //cast .NET argument to SDK object
        using var namePtr = (StringObject)name;

        unsafe //use native function pointer
        {
            //call native function
            ErrorCode errorCode = (ErrorCode)_rawEnumerationType.GetEnumeratorIntValue(base.NativePointer, namePtr.NativePointer, out value);

            if (Result.Failed(errorCode))
            {
                throw new OpenDaqException(errorCode);
            }
        }

        return value;
    }

    /// <summary>Gets the number of enumerators within the Enumeration Type.</summary>
    /// <returns>The number of enumerators within the Enumeration Type.</returns>
    public nuint GetCount()
    {
        //native output argument
        nuint count;

        unsafe //use native function pointer
        {
            //call native function
            ErrorCode errorCode = (ErrorCode)_rawEnumerationType.GetCount(base.NativePointer, out count);

            if (Result.Failed(errorCode))
            {
                throw new OpenDaqException(errorCode);
            }
        }

        return count;
    }
}


#region Class Factory

// Factory functions of the &apos;CoreTypes&apos; library.
public static partial class CoreTypesFactory
{
    //ErrorCode createEnumerationType(daq.IEnumerationType** obj, daq.IString* typeName, daq.IList* enumeratorNames, daq.Int firstEnumeratorIntValue); cdecl;
    [DllImport(CoreTypesDllInfo.FileName, CallingConvention = CallingConvention.Cdecl)]
    private static extern ErrorCode createEnumerationType(out IntPtr obj, IntPtr typeName, IntPtr enumeratorNames, long firstEnumeratorIntValue);

    public static ErrorCode CreateEnumerationType(out EnumerationType obj, string typeName, IListObject<BaseObject> enumeratorNames, long firstEnumeratorIntValue)
    {
        //initialize output argument
        obj = default;

        //native output argument
        IntPtr objPtr;

        //cast .NET argument to SDK object
        using var typeNamePtr = (StringObject)typeName;
        var enumeratorNamesPtr = (ListObject<BaseObject>)enumeratorNames;

        //call native function
        ErrorCode errorCode = createEnumerationType(out objPtr, typeNamePtr.NativePointer, enumeratorNamesPtr.NativePointer, firstEnumeratorIntValue);

        if (Result.Succeeded(errorCode))
        {
            //create object
            obj = new EnumerationType(objPtr, incrementReference: false);
        }

        return errorCode;
    }

    public static EnumerationType CreateEnumerationType(string typeName, IListObject<BaseObject> enumeratorNames, long firstEnumeratorIntValue)
    {
        //native output argument
        IntPtr objPtr;

        //cast .NET argument to SDK object
        using var typeNamePtr = (StringObject)typeName;
        var enumeratorNamesPtr = (ListObject<BaseObject>)enumeratorNames;

        //call native function
        ErrorCode errorCode = createEnumerationType(out objPtr, typeNamePtr.NativePointer, enumeratorNamesPtr.NativePointer, firstEnumeratorIntValue);

        if (Result.Failed(errorCode))
        {
            throw new OpenDaqException(errorCode);
        }

        //create and return object
        return new EnumerationType(objPtr, incrementReference: false);
    }


    //ErrorCode createEnumerationTypeWithValues(daq.IEnumerationType** obj, daq.IString* typeName, daq.IDict* enumerators); cdecl;
    [DllImport(CoreTypesDllInfo.FileName, CallingConvention = CallingConvention.Cdecl)]
    private static extern ErrorCode createEnumerationTypeWithValues(out IntPtr obj, IntPtr typeName, IntPtr enumerators);

    public static ErrorCode CreateEnumerationTypeWithValues(out EnumerationType obj, string typeName, IDictObject<BaseObject, BaseObject> enumerators)
    {
        //initialize output argument
        obj = default;

        //native output argument
        IntPtr objPtr;

        //cast .NET argument to SDK object
        using var typeNamePtr = (StringObject)typeName;
        var enumeratorsPtr = (DictObject<BaseObject, BaseObject>)enumerators;

        //call native function
        ErrorCode errorCode = createEnumerationTypeWithValues(out objPtr, typeNamePtr.NativePointer, enumeratorsPtr.NativePointer);

        if (Result.Succeeded(errorCode))
        {
            //create object
            obj = new EnumerationType(objPtr, incrementReference: false);
        }

        return errorCode;
    }

    public static EnumerationType CreateEnumerationTypeWithValues(string typeName, IDictObject<BaseObject, BaseObject> enumerators)
    {
        //native output argument
        IntPtr objPtr;

        //cast .NET argument to SDK object
        using var typeNamePtr = (StringObject)typeName;
        var enumeratorsPtr = (DictObject<BaseObject, BaseObject>)enumerators;

        //call native function
        ErrorCode errorCode = createEnumerationTypeWithValues(out objPtr, typeNamePtr.NativePointer, enumeratorsPtr.NativePointer);

        if (Result.Failed(errorCode))
        {
            throw new OpenDaqException(errorCode);
        }

        //create and return object
        return new EnumerationType(objPtr, incrementReference: false);
    }
}

#endregion Class Factory
