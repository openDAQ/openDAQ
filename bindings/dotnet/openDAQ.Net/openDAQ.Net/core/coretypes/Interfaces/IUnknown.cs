/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (CSharpGenerator v1.0.0) on 25.07.2023 14:56.
// </auto-generated>
//
// <modified>DR</modified>
//------------------------------------------------------------------------------


namespace Daq.Core.Types.Interfaces;


[StructLayout(LayoutKind.Sequential)]
internal unsafe class RawIUnknown
{
    //ErrorCode queryInterface(const Dewesoft.RT.Core.IntfID& intfID, void** obj); stdcall;
    public delegate* unmanaged/*[Stdcall]*/<IntPtr, ref Guid, out IntPtr, ErrorCode> QueryInterface;
    //int addRef(); stdcall;
    public delegate* unmanaged/*[Stdcall]*/<IntPtr, int> AddRef;
    //int releaseRef(); stdcall;
    public delegate* unmanaged/*[Stdcall]*/<IntPtr, int> ReleaseRef;
}

/// <summary>
/// Enables clients to get pointers to other interfaces on a given object through the `queryInterface`
/// method, and manage the existence of the object through the `addRef` and `releaseRef` methods. All other
/// interfaces are inherited, directly or indirectly, from IUnknown.
/// </summary>
/// <remarks>IUnknown on Windows OS is compatible with Microsoft COM IUnknown interface.</remarks>
[Guid("00000000-0000-0000-C000-000000000046")]
internal interface IUnknown
{
    /// <summary>Returns another interface which is supported by the object and increments the reference count.</summary>
    /// <remarks>Provides a fundamental mechanism by which an object can express the functionality it provides.</remarks>
    /// <returns>Pointer to the new interface.</returns>
    IntPtr QueryInterface<TObject>() where TObject : BaseObject;

    /// <summary>Increments the reference count for an interface on an object.</summary>
    /// <remarks>You should call this method whenever you make a copy of an interface pointer.</remarks>
    int AddReference();

    /// <summary>Decrements the reference count for an interface on an object.</summary>
    /// <remarks>Call this method when you no longer need to use an interface pointer.</remarks>
    int ReleaseReference();
}
