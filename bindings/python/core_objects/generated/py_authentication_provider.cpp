//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IAuthenticationProvider, daq::IBaseObject> declareIAuthenticationProvider(pybind11::module_ m)
{
    return wrapInterface<daq::IAuthenticationProvider, daq::IBaseObject>(m, "IAuthenticationProvider");
}

void defineIAuthenticationProvider(pybind11::module_ m, PyDaqIntf<daq::IAuthenticationProvider, daq::IBaseObject> cls)
{
    cls.doc() = "A class which is responsible for authenticating a user. The authentication is usually done by verifying the username and password. An authenticator implementation might use external services for achieving that. It might make a call to an external databse, do a lookup to a json file with defined users or it might simply check the password against a hardcoded one.";

    m.def("AuthenticationProvider", &daq::AuthenticationProvider_Create);
    m.def("StaticAuthenticationProvider", [](const bool allowAnonymous, std::variant<daq::IList*, py::list, daq::IEvalValue*>& userList){
        return daq::StaticAuthenticationProvider_Create(allowAnonymous, getVariantValue<daq::IList*>(userList));
    }, py::arg("allow_anonymous"), py::arg("user_list"));

    m.def("JsonStringAuthenticationProvider", [](std::variant<daq::IString*, py::str, daq::IEvalValue*>& jsonString){
        return daq::JsonStringAuthenticationProvider_Create(getVariantValue<daq::IString*>(jsonString));
    }, py::arg("json_string"));

    m.def("JsonFileAuthenticationProvider", [](std::variant<daq::IString*, py::str, daq::IEvalValue*>& filename){
        return daq::JsonFileAuthenticationProvider_Create(getVariantValue<daq::IString*>(filename));
    }, py::arg("filename"));


    cls.def("authenticate",
        [](daq::IAuthenticationProvider *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& username, std::variant<daq::IString*, py::str, daq::IEvalValue*>& password)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::AuthenticationProviderPtr::Borrow(object);
            return objectPtr.authenticate(getVariantValue<daq::IString*>(username), getVariantValue<daq::IString*>(password)).detach();
        },
        py::arg("username"), py::arg("password"),
        "Authenticate user using username and password. If authentication is successful, a User instance is returned. Otherwise an exception is thrown.");
    cls.def_property_readonly("anonymous_allowed",
        [](daq::IAuthenticationProvider *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::AuthenticationProviderPtr::Borrow(object);
            return objectPtr.isAnonymousAllowed();
        },
        "Returns true if anonymous authentication is allowed. When anonymous authentication is enabled, user can connect to the server without providing username or password.");
}
