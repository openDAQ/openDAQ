//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IEvalValue, daq::IBaseObject> declareIEvalValue(pybind11::module_ m)
{
    return wrapInterface<daq::IEvalValue, daq::IBaseObject>(m, "IEvalValue");
}

void defineIEvalValue(pybind11::module_ m, PyDaqIntf<daq::IEvalValue, daq::IBaseObject> cls)
{
    cls.doc() = "Dynamic expression evaluator";

    m.def("EvalValue", &daq::EvalValue_Create);
    m.def("EvalValueArgs", &daq::EvalValueArgs_Create);
    m.def("EvalValueFunc", &daq::EvalValueFunc_Create);

    cls.def_property_readonly("eval",
        [](daq::IEvalValue *object)
        {
            const auto objectPtr = daq::EvalValuePtr::Borrow(object);
            return objectPtr.getEval().toStdString();
        },
        "Gets the expression.");
    cls.def_property_readonly("result",
        [](daq::IEvalValue *object)
        {
            const auto objectPtr = daq::EvalValuePtr::Borrow(object);
            return baseObjectToPyObject(objectPtr.getResult());
        },
        py::return_value_policy::take_ownership,
        "Gets the result of the expression.");
    cls.def("clone_with_owner",
        [](daq::IEvalValue *object, daq::IPropertyObject* owner)
        {
            const auto objectPtr = daq::EvalValuePtr::Borrow(object);
            return objectPtr.cloneWithOwner(owner).detach();
        },
        py::arg("owner"),
        "Clones the object and attaches an owner.");
    cls.def("get_parse_error_code",
        [](daq::IEvalValue *object)
        {
            const auto objectPtr = daq::EvalValuePtr::Borrow(object);
            objectPtr.getParseErrorCode();
        },
        "Returns the parse error code.");
    cls.def_property_readonly("property_references",
        [](daq::IEvalValue *object)
        {
            const auto objectPtr = daq::EvalValuePtr::Borrow(object);
            return objectPtr.getPropertyReferences().detach();
        },
        py::return_value_policy::take_ownership,
        "Returns the names of all properties referenced by the eval value.");
}
