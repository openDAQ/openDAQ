//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"


PyDaqIntf<daq::IPermissionMaskBuilder, daq::IBaseObject> declareIPermissionMaskBuilder(pybind11::module_ m)
{
    py::enum_<daq::Permission>(m, "Permission")
        .value("None", daq::Permission::None)
        .value("Read", daq::Permission::Read)
        .value("Write", daq::Permission::Write)
        .value("Execute", daq::Permission::Execute);

    return wrapInterface<daq::IPermissionMaskBuilder, daq::IBaseObject>(m, "IPermissionMaskBuilder");
}

void defineIPermissionMaskBuilder(pybind11::module_ m, PyDaqIntf<daq::IPermissionMaskBuilder, daq::IBaseObject> cls)
{
    cls.doc() = "A class which is responsible for creating a permission mask. This is a collection of Permission values which are allowed or denied for a given group id. Permission mask is defined as a 64-bit integer, where each bit corespond to a specific permission defined by Permission enum.";

    m.def("PermissionMaskBuilder", &daq::PermissionMaskBuilder_Create);
    m.def("PermissionMaskBuilderFromMask", &daq::PermissionMaskBuilderFromMask_Create);

    cls.def("read",
        [](daq::IPermissionMaskBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionMaskBuilderPtr::Borrow(object);
            objectPtr.read();
        },
        "Add read permission to the bit mask.");
    cls.def("write",
        [](daq::IPermissionMaskBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionMaskBuilderPtr::Borrow(object);
            objectPtr.write();
        },
        "Add write permission to the bit mask.");
    cls.def("execute",
        [](daq::IPermissionMaskBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionMaskBuilderPtr::Borrow(object);
            objectPtr.execute();
        },
        "Add execute permission to the bit mask.");
    cls.def("clear",
        [](daq::IPermissionMaskBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionMaskBuilderPtr::Borrow(object);
            objectPtr.clear();
        },
        "Removes all permissions from bit mask.");
    cls.def("build",
        [](daq::IPermissionMaskBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionMaskBuilderPtr::Borrow(object);
            return objectPtr.build();
        },
        "Build permission mask and return it as 64-bit integer.");
}
