//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"


PyDaqIntf<daq::IPermissions, daq::IBaseObject> declareIPermissions(pybind11::module_ m)
{
    return wrapInterface<daq::IPermissions, daq::IBaseObject>(m, "IPermissions");
}

void defineIPermissions(pybind11::module_ m, PyDaqIntf<daq::IPermissions, daq::IBaseObject> cls)
{
    cls.doc() = "A class which describes a permission configuration for openDAQ object.A configuration object can be constructed using the permission builder class.";

    cls.def_property_readonly("inherited",
        [](daq::IPermissions *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsPtr::Borrow(object);
            return objectPtr.getInherited();
        },
        "Returns true if an object should inherit permissions from its parent object.");
    cls.def_property_readonly("allowed",
        [](daq::IPermissions *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsPtr::Borrow(object);
            return objectPtr.getAllowed().detach();
        },
        py::return_value_policy::take_ownership,
        "Returns a dictionary of allowed permissions for each group.");
    cls.def_property_readonly("denied",
        [](daq::IPermissions *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsPtr::Borrow(object);
            return objectPtr.getDenied().detach();
        },
        py::return_value_policy::take_ownership,
        "Returns a dictionary of denied permissions for each group.");
}
