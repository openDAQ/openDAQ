//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IPermissionsBuilder, daq::IBaseObject> declareIPermissionsBuilder(pybind11::module_ m)
{
    return wrapInterface<daq::IPermissionsBuilder, daq::IBaseObject>(m, "IPermissionsBuilder");
}

void defineIPermissionsBuilder(pybind11::module_ m, PyDaqIntf<daq::IPermissionsBuilder, daq::IBaseObject> cls)
{
    cls.doc() = "A class which is responsible for assigning permissions to a property object. Permisison builder can specify allowed and denied permissions for each group. It can also inherit or overwrite premissions from parent objects.";

    m.def("PermissionsBuilder", &daq::PermissionsBuilder_Create);

    cls.def("inherit",
        [](daq::IPermissionsBuilder *object, const bool inherit)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsBuilderPtr::Borrow(object);
            objectPtr.inherit(inherit);
        },
        py::arg("inherit"),
        "Configure component to inherit or ignore permissions from the parent object.");
    cls.def("assign",
        [](daq::IPermissionsBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& groupId, daq::IPermissionMaskBuilder* permissions)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsBuilderPtr::Borrow(object);
            objectPtr.assign(getVariantValue<daq::IString*>(groupId), permissions);
        },
        py::arg("group_id"), py::arg("permissions"),
        "Strictly assign a specified set of permissions for a given group. This method allows only the specified permissions and will not inherit any permissions from the parent object for the group, even if the inherit flag is enabled.");
    cls.def("allow",
        [](daq::IPermissionsBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& groupId, daq::IPermissionMaskBuilder* permissions)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsBuilderPtr::Borrow(object);
            objectPtr.allow(getVariantValue<daq::IString*>(groupId), permissions);
        },
        py::arg("group_id"), py::arg("permissions"),
        "Allow a specified set of permissions for a given group. If the inherit flag is enabled, this method will allow both the specified permissions and any permissions already allowed for the group on the parent component. Denied permissions will always overrule allowed permissions.");
    cls.def("deny",
        [](daq::IPermissionsBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& groupId, daq::IPermissionMaskBuilder* permissions)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsBuilderPtr::Borrow(object);
            objectPtr.deny(getVariantValue<daq::IString*>(groupId), permissions);
        },
        py::arg("group_id"), py::arg("permissions"),
        "Deny a specified set of permissions for a given group. If the inherit flag is enabled, this method will deny both the specified permissions and any permissions already denied for the group on the parent component. Denied permissions will always overrule allowed permissions.");
    cls.def("extend",
        [](daq::IPermissionsBuilder *object, daq::IPermissions* config)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsBuilderPtr::Borrow(object);
            objectPtr.extend(config);
        },
        py::arg("config"),
        "Add permissions of another permission config object and overwrite existing ones. Inherit flag will not be overwritten.");
    cls.def("build",
        [](daq::IPermissionsBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PermissionsBuilderPtr::Borrow(object);
            return objectPtr.build().detach();
        },
        "Builds the permission config object.");
}
