//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IPropertyFilter, daq::IBaseObject> declareIPropertyFilter(pybind11::module_ m)
{
    return wrapInterface<daq::IPropertyFilter, daq::IBaseObject>(m, "IPropertyFilter");
}

void defineIPropertyFilter(pybind11::module_ m, PyDaqIntf<daq::IPropertyFilter, daq::IBaseObject> cls)
{
    cls.doc() = "A filter used to exclude unwanted properties during a property search on a property object.";

    m.def("VisiblePropertyFilter", &daq::VisiblePropertyFilter_Create);
    m.def("ReadOnlyPropertyFilter", &daq::ReadOnlyPropertyFilter_Create);
    m.def("TypePropertyFilter", &daq::TypePropertyFilter_Create);
    m.def("NamePropertyFilter", [](std::variant<daq::IString*, py::str, daq::IEvalValue*>& name){
        return daq::NamePropertyFilter_Create(getVariantValue<daq::IString*>(name));
    }, py::arg("name"));

    m.def("AnyPropertyFilter", &daq::AnyPropertyFilter_Create);
    m.def("AndPropertyFilter", &daq::AndPropertyFilter_Create);
    m.def("OrPropertyFilter", &daq::OrPropertyFilter_Create);
    m.def("NotPropertyFilter", &daq::NotPropertyFilter_Create);
    m.def("CustomPropertyFilter", &daq::CustomPropertyFilter_Create);
    m.def("RecursivePropertyFilter", &daq::RecursivePropertyFilter_Create);

    cls.def("accepts_property",
        [](daq::IPropertyFilter *object, daq::IProperty* property)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::PropertyFilterPtr::Borrow(object);
            return objectPtr.acceptsProperty(property);
        },
        py::arg("property"),
        "Defines whether or not the property should be included in the search results");
}
