//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IPropertyObject, daq::IBaseObject> declareIPropertyObject(pybind11::module_ m)
{
    return wrapInterface<daq::IPropertyObject, daq::IBaseObject>(m, "IPropertyObject");
}

void defineIPropertyObject(pybind11::module_ m, PyDaqIntf<daq::IPropertyObject, daq::IBaseObject> cls)
{
    cls.doc() = "A container of Properties and their corresponding Property values.";

    m.def("PropertyObject", &daq::PropertyObject_Create);
    m.def("PropertyObjectWithClassAndManager", &daq::PropertyObjectWithClassAndManager_Create);

    cls.def_property_readonly("class_name",
        [](daq::IPropertyObject *object)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return objectPtr.getClassName().toStdString();
        },
        "Gets the name of the class the Property object was constructed with.");
    cls.def("set_property_value",
        [](daq::IPropertyObject *object, const std::string& propertyName, const py::object& value)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            objectPtr.setPropertyValue(propertyName, pyObjectToBaseObject(value));
        },
        py::arg("property_name"), py::arg("value"),
        "Sets the value of the Property with the given name.");
    cls.def("get_property_value",
        [](daq::IPropertyObject *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return baseObjectToPyObject(objectPtr.getPropertyValue(propertyName));
        },
        py::arg("property_name"),
        "Gets the value of the Property with the given name.");
    cls.def("get_property_selection_value",
        [](daq::IPropertyObject *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return baseObjectToPyObject(objectPtr.getPropertySelectionValue(propertyName));
        },
        py::arg("property_name"),
        "Gets the selected value of the Property, if the Property is a Selection property.");
    cls.def("clear_property_value",
        [](daq::IPropertyObject *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            objectPtr.clearPropertyValue(propertyName);
        },
        py::arg("property_name"),
        "Clears the Property value from the Property object");
    cls.def("has_property",
        [](daq::IPropertyObject *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return objectPtr.hasProperty(propertyName);
        },
        py::arg("property_name"),
        "Checks if the Property object contains a property named `propertyName`.");
    cls.def("get_property",
        [](daq::IPropertyObject *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return objectPtr.getProperty(propertyName).detach();
        },
        py::arg("property_name"),
        "Gets the Property with the given `propertyName`.");
    cls.def("add_property",
        [](daq::IPropertyObject *object, daq::IProperty* property)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            objectPtr.addProperty(property);
        },
        py::arg("property"),
        "Adds the property to the Property object.");
    cls.def("remove_property",
        [](daq::IPropertyObject *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            objectPtr.removeProperty(propertyName);
        },
        py::arg("property_name"),
        "Removes the Property named `propertyName` from the Property object.");
    /*
    cls.def("get_on_property_value_write",
        [](daq::IPropertyObject *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return objectPtr.getOnPropertyValueWrite(propertyName).detach();
        },
        py::arg("property_name"),
        "Gets the Event that is triggered whenever a Property value is written to the Property named `propertyName`.");
    */
    /*
    cls.def("get_on_property_value_read",
        [](daq::IPropertyObject *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return objectPtr.getOnPropertyValueRead(propertyName).detach();
        },
        py::arg("property_name"),
        "Gets the Event that is triggered whenever a Property value of a Property named `propertyName` is read.");
    */
    cls.def_property_readonly("visible_properties",
        [](daq::IPropertyObject *object)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return objectPtr.getVisibleProperties().detach();
        },
        py::return_value_policy::take_ownership,
        "Returns a list of visible properties contained in the Property object.");
    cls.def_property_readonly("all_properties",
        [](daq::IPropertyObject *object)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return objectPtr.getAllProperties().detach();
        },
        py::return_value_policy::take_ownership,
        "Returns a list of all properties contained in the Property object.");
    cls.def_property("property_order",
        nullptr,
        [](daq::IPropertyObject *object, daq::IList* orderedPropertyNames)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            objectPtr.setPropertyOrder(orderedPropertyNames);
        },
        "Sets a custom order of properties as defined in the list of property names.");
    cls.def("begin_update",
        [](daq::IPropertyObject *object)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            objectPtr.beginUpdate();
        },
        "Begins batch configuration of the object.");
    cls.def("end_update",
        [](daq::IPropertyObject *object)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            objectPtr.endUpdate();
        },
        "Ends batch configuration of the object.");
    /*
    cls.def_property_readonly("on_end_update",
        [](daq::IPropertyObject *object)
        {
            const auto objectPtr = daq::PropertyObjectPtr::Borrow(object);
            return objectPtr.getOnEndUpdate().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets the Event that is triggered whenever the batch configuration is applied.");
    */
}
