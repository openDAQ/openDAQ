//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IPropertyObjectProtected, daq::IBaseObject> declareIPropertyObjectProtected(pybind11::module_ m)
{
    return wrapInterface<daq::IPropertyObjectProtected, daq::IBaseObject>(m, "IPropertyObjectProtected");
}

void defineIPropertyObjectProtected(pybind11::module_ m, PyDaqIntf<daq::IPropertyObjectProtected, daq::IBaseObject> cls)
{
    cls.doc() = "Provides protected access that allows changing read-only property values of a Property object.";

    cls.def("set_protected_property_value",
        [](daq::IPropertyObjectProtected *object, const std::string& propertyName, const py::object& value)
        {
            const auto objectPtr = daq::PropertyObjectProtectedPtr::Borrow(object);
            objectPtr.setProtectedPropertyValue(propertyName, pyObjectToBaseObject(value));
        },
        py::arg("property_name"), py::arg("value"),
        "Sets a property value. Does not fail if the property is read-only.");
    cls.def("clear_protected_property_value",
        [](daq::IPropertyObjectProtected *object, const std::string& propertyName)
        {
            const auto objectPtr = daq::PropertyObjectProtectedPtr::Borrow(object);
            objectPtr.clearProtectedPropertyValue(propertyName);
        },
        py::arg("property_name"),
        "Clears a property value. Does not fail if the property is read-only.");
}
