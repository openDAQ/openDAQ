//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IUnit, daq::IBaseObject> declareIUnit(pybind11::module_ m)
{
    return wrapInterface<daq::IUnit, daq::IBaseObject>(m, "IUnit");
}

void defineIUnit(pybind11::module_ m, PyDaqIntf<daq::IUnit, daq::IBaseObject> cls)
{
    cls.doc() = "Describes a measurement unit with IDs as defined in <a href=\"https://unece.org/trade/cefact/UNLOCODE-Download\">Codes for Units of Measurement used in International Trade</a>.";

    m.def("Unit", &daq::Unit_Create);

    cls.def_property_readonly("id",
        [](daq::IUnit *object)
        {
            const auto objectPtr = daq::UnitPtr::Borrow(object);
            return objectPtr.getId();
        },
        "Gets the unit ID as defined in <a href=\"https://unece.org/trade/cefact/UNLOCODE-Download\">Codes for Units of Measurement used in International Trade</a>.");
    cls.def_property_readonly("symbol",
        [](daq::IUnit *object)
        {
            const auto objectPtr = daq::UnitPtr::Borrow(object);
            return objectPtr.getSymbol().toStdString();
        },
        "Gets the symbol of the unit, i.e. \"m/s\".");
    cls.def_property_readonly("name",
        [](daq::IUnit *object)
        {
            const auto objectPtr = daq::UnitPtr::Borrow(object);
            return objectPtr.getName().toStdString();
        },
        "Gets the full name of the unit, i.e. \"meters per second\".");
    cls.def_property_readonly("quantity",
        [](daq::IUnit *object)
        {
            const auto objectPtr = daq::UnitPtr::Borrow(object);
            return objectPtr.getQuantity().toStdString();
        },
        "Gets the quantity represented by the unit, i.e. \"Velocity\"");
}
