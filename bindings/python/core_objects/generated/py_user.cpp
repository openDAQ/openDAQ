//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_core_objects/py_core_objects.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IUser, daq::IBaseObject> declareIUser(pybind11::module_ m)
{
    return wrapInterface<daq::IUser, daq::IBaseObject>(m, "IUser");
}

void defineIUser(pybind11::module_ m, PyDaqIntf<daq::IUser, daq::IBaseObject> cls)
{
    cls.doc() = "An immutable structure which describes an openDAQ user. It holds username, password as a hash string and a list of groups assigned to the user.";

    m.def("User", [](std::variant<daq::IString*, py::str, daq::IEvalValue*>& username, std::variant<daq::IString*, py::str, daq::IEvalValue*>& passwordHash, std::variant<daq::IList*, py::list, daq::IEvalValue*>& groups){
        return daq::User_Create(getVariantValue<daq::IString*>(username), getVariantValue<daq::IString*>(passwordHash), getVariantValue<daq::IList*>(groups));
    }, py::arg("username"), py::arg("password_hash"), py::arg("groups"));


    cls.def_property_readonly("username",
        [](daq::IUser *object)
        {
            const auto objectPtr = daq::UserPtr::Borrow(object);
            return objectPtr.getUsername().toStdString();
        },
        "Returns the username as a string.");
    cls.def_property_readonly("groups",
        [](daq::IUser *object)
        {
            const auto objectPtr = daq::UserPtr::Borrow(object);
            return objectPtr.getGroups().detach();
        },
        py::return_value_policy::take_ownership,
        "Returns a list of group IDs which the user belongs to.");
}
