//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_core_types/py_core_types.h"
#include "py_core_types/py_converter.h"


PyDaqIntf<daq::IVersionInfo, daq::IBaseObject> declareIVersionInfo(pybind11::module_ m)
{
    return wrapInterface<daq::IVersionInfo, daq::IBaseObject>(m, "IVersionInfo");
}

void defineIVersionInfo(pybind11::module_ m, PyDaqIntf<daq::IVersionInfo, daq::IBaseObject> cls)
{
    cls.doc() = "Represents a semantic version composing of: - major version representing breaking changes - minor version representing new features - patch version representing only bug fixes.";

    m.def("VersionInfo", &daq::VersionInfo_Create);

    cls.def_property_readonly("major",
        [](daq::IVersionInfo *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::VersionInfoPtr::Borrow(object);
            return objectPtr.getMajor();
        },
        "The major version incremented at breaking changes.");
    cls.def_property_readonly("minor",
        [](daq::IVersionInfo *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::VersionInfoPtr::Borrow(object);
            return objectPtr.getMinor();
        },
        "The minor version incremented at new features with full backwards compatibility.");
    cls.def_property_readonly("patch",
        [](daq::IVersionInfo *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::VersionInfoPtr::Borrow(object);
            return objectPtr.getPatch();
        },
        "The patch version incremented when only bug-fixes are added.");
}
