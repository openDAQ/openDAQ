//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IFolderConfig, daq::IFolder> declareIFolderConfig(pybind11::module_ m)
{
    return wrapInterface<daq::IFolderConfig, daq::IFolder>(m, "IFolderConfig");
}

void defineIFolderConfig(pybind11::module_ m, PyDaqIntf<daq::IFolderConfig, daq::IFolder> cls)
{
    cls.doc() = "Allows write access to folder.";

    m.def("Folder", &daq::Folder_Create);
    m.def("FolderWithItemType", &daq::FolderWithItemType_Create);
    m.def("IoFolder", &daq::IoFolder_Create);

    cls.def("add_item",
        [](daq::IFolderConfig *object, daq::IComponent* item)
        {
            const auto objectPtr = daq::FolderConfigPtr::Borrow(object);
            objectPtr.addItem(item);
        },
        py::arg("item"),
        "Adds a component to the folder.");
    cls.def("remove_item",
        [](daq::IFolderConfig *object, daq::IComponent* item)
        {
            const auto objectPtr = daq::FolderConfigPtr::Borrow(object);
            objectPtr.removeItem(item);
        },
        py::arg("item"),
        "Removes the item from the folder.");
    cls.def("remove_item_with_local_id",
        [](daq::IFolderConfig *object, const std::string& localId)
        {
            const auto objectPtr = daq::FolderConfigPtr::Borrow(object);
            objectPtr.removeItemWithLocalId(localId);
        },
        py::arg("local_id"),
        "Removes the item from the folder using local id of the component.");
    cls.def("clear",
        [](daq::IFolderConfig *object)
        {
            const auto objectPtr = daq::FolderConfigPtr::Borrow(object);
            objectPtr.clear();
        },
        "Removes all items from the folder.");
}
