//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::ISearchFilter, daq::IBaseObject> declareISearchFilter(pybind11::module_ m)
{
    return wrapInterface<daq::ISearchFilter, daq::IBaseObject>(m, "ISearchFilter");
}

void defineISearchFilter(pybind11::module_ m, PyDaqIntf<daq::ISearchFilter, daq::IBaseObject> cls)
{
    cls.doc() = "Search filter that can be passed as an optional parameter to openDAQ tree traversal functions to filter out unwanted results. Allows for recursive searches.";

    m.def("VisibleSearchFilter", &daq::VisibleSearchFilter_Create);
    m.def("RequiredTagsSearchFilter", &daq::RequiredTagsSearchFilter_Create);
    m.def("ExcludedTagsSearchFilter", &daq::ExcludedTagsSearchFilter_Create);
    m.def("InterfaceIdSearchFilter", &daq::InterfaceIdSearchFilter_Create);
    m.def("LocalIdSearchFilter", &daq::LocalIdSearchFilter_Create);
    m.def("AnySearchFilter", &daq::AnySearchFilter_Create);
    m.def("AndSearchFilter", &daq::AndSearchFilter_Create);
    m.def("OrSearchFilter", &daq::OrSearchFilter_Create);
    m.def("NotSearchFilter", &daq::NotSearchFilter_Create);
    m.def("CustomSearchFilter", &daq::CustomSearchFilter_Create);
    m.def("RecursiveSearchFilter", &daq::RecursiveSearchFilter_Create);

    cls.def("accepts_component",
        [](daq::ISearchFilter *object, daq::IComponent* component)
        {
            const auto objectPtr = daq::SearchFilterPtr::Borrow(object);
            return objectPtr.acceptsComponent(component);
        },
        py::arg("component"),
        "Defines whether or not the component should be included in the search results");
    cls.def("visit_children",
        [](daq::ISearchFilter *object, daq::IComponent* component)
        {
            const auto objectPtr = daq::SearchFilterPtr::Borrow(object);
            return objectPtr.visitChildren(component);
        },
        py::arg("component"),
        "Defines whether or not the children of said component should be traversed during a recursive search.");
}
