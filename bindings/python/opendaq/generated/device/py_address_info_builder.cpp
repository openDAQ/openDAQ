//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IAddressInfoBuilder, daq::IBaseObject> declareIAddressInfoBuilder(pybind11::module_ m)
{
    return wrapInterface<daq::IAddressInfoBuilder, daq::IBaseObject>(m, "IAddressInfoBuilder");
}

void defineIAddressInfoBuilder(pybind11::module_ m, PyDaqIntf<daq::IAddressInfoBuilder, daq::IBaseObject> cls)
{
    cls.doc() = "";

    m.def("AddressInfoBuilder", &daq::AddressInfoBuilder_Create);

    cls.def("build",
        [](daq::IAddressInfoBuilder *object)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            return objectPtr.build().detach();
        },
        "Builds the address.");
    cls.def_property("address",
        [](daq::IAddressInfoBuilder *object)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            return objectPtr.getAddress().toStdString();
        },
        [](daq::IAddressInfoBuilder *object, const std::string& address)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            objectPtr.setAddress(address);
        },
        "Gets the server address as a string. / Sets the server address as a string.");
    cls.def_property("connection_string",
        [](daq::IAddressInfoBuilder *object)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            return objectPtr.getConnectionString().toStdString();
        },
        [](daq::IAddressInfoBuilder *object, const std::string& connectionString)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            objectPtr.setConnectionString(connectionString);
        },
        "Gets the connection string corresponding to the address. / Sets the connection string corresponding to the address.");
    cls.def_property("type",
        [](daq::IAddressInfoBuilder *object)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            return objectPtr.getType().toStdString();
        },
        [](daq::IAddressInfoBuilder *object, const std::string& type)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            objectPtr.setType(type);
        },
        "Gets the type of the address. / Sets the type of the address.");
    cls.def_property("reachability_status",
        [](daq::IAddressInfoBuilder *object)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            return objectPtr.getReachabilityStatus();
        },
        [](daq::IAddressInfoBuilder *object, daq::AddressReachabilityStatus addressReachability)
        {
            const auto objectPtr = daq::AddressInfoBuilderPtr::Borrow(object);
            objectPtr.setReachabilityStatus(addressReachability);
        },
        "Gets the reachability status of the address. / Sets the reachability status of the address.");
}
