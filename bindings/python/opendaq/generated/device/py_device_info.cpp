//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IDeviceInfo, daq::IPropertyObject> declareIDeviceInfo(pybind11::module_ m)
{
    return wrapInterface<daq::IDeviceInfo, daq::IPropertyObject>(m, "IDeviceInfo");
}

void defineIDeviceInfo(pybind11::module_ m, PyDaqIntf<daq::IDeviceInfo, daq::IPropertyObject> cls)
{
    cls.doc() = "Contains standard information about an openDAQ device and device type. The Device Info object is a Property Object, allowing for custom String, Int, Bool, or Float-type properties to be added.";

    cls.def_property_readonly("name",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getName().toStdString();
        },
        "Gets the name of the device");
    cls.def_property_readonly("connection_string",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getConnectionString().toStdString();
        },
        "Gets the string representation of a connection address used to connect to the device.");
    cls.def_property_readonly("device_type",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getDeviceType().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets a device type as an object providing type id, name, short description and default device configuration. By using default config object as a starting point, users can easily modify the preset properties to tailor the configuration of the client device accordingly.");
    cls.def_property_readonly("manufacturer",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getManufacturer().toStdString();
        },
        "Gets the company that manufactured the device");
    cls.def_property_readonly("manufacturer_uri",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getManufacturerUri().toStdString();
        },
        "Gets the unique identifier of the company that manufactured the device This identifier should be a fully qualified domain name; however, it may be a GUID or similar construct that ensures global uniqueness.");
    cls.def_property_readonly("model",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getModel().toStdString();
        },
        "Gets the model of the device");
    cls.def_property_readonly("product_code",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getProductCode().toStdString();
        },
        "Gets the unique combination of numbers and letters used to identify the device.");
    cls.def_property_readonly("device_revision",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getDeviceRevision().toStdString();
        },
        "Gets the revision level of the device.");
    cls.def_property_readonly("hardware_revision",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getHardwareRevision().toStdString();
        },
        "Gets the revision level of the hardware.");
    cls.def_property_readonly("software_revision",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getSoftwareRevision().toStdString();
        },
        "Gets the revision level of the software component.");
    cls.def_property_readonly("device_manual",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getDeviceManual().toStdString();
        },
        "Gets the address of the user manual. It may be a pathname in the file system or a URL (Web address)");
    cls.def_property_readonly("device_class",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getDeviceClass().toStdString();
        },
        "Gets the purpose of the device. For example \"TestMeasurementDevice\".");
    cls.def_property_readonly("serial_number",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getSerialNumber().toStdString();
        },
        "Gets the unique production number provided by the manufacturer");
    cls.def_property_readonly("product_instance_uri",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getProductInstanceUri().toStdString();
        },
        "Gets the globally unique resource identifier provided by the manufacturer. The recommended syntax of the ProductInstanceUri is: <ManufacturerUri>/<any string> where <any string> is unique among all instances using the same ManufacturerUri.");
    cls.def_property_readonly("revision_counter",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getRevisionCounter();
        },
        "Gets the incremental counter indicating the number of times the configuration data has been modified.");
    cls.def_property_readonly("asset_id",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getAssetId().toStdString();
        },
        "Gets the asset ID of the device. Represents a user writable alphanumeric character sequence uniquely identifying a component.");
    cls.def_property_readonly("mac_address",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getMacAddress().toStdString();
        },
        "Gets the Mac address of the device.");
    cls.def_property_readonly("parent_mac_address",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getParentMacAddress().toStdString();
        },
        "Gets the Mac address of the device's parent.");
    cls.def_property_readonly("platform",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getPlatform().toStdString();
        },
        "Gets the platform of the device. The platform specifies whether real hardware is used or if the device is simulated.");
    cls.def_property_readonly("position",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getPosition();
        },
        "Gets the position of the device. The position specifies the position within a given system. For example in which slot or slice the device is in.");
    cls.def_property_readonly("system_type",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getSystemType().toStdString();
        },
        "Gets the system type. The system type can, for example, be LayeredSystem, StandaloneSystem, or RackSystem.");
    cls.def_property_readonly("system_uuid",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getSystemUuid().toStdString();
        },
        "Gets the system UUID that represents a unique ID of a system. All devices in a system share this UUID.");
    cls.def_property_readonly("custom_info_property_names",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getCustomInfoPropertyNames().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets the list of property names that are not in the default set of Device info properties. Default properties are all info properties that have a corresponding getter method.");
    cls.def_property_readonly("sdk_version",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getSdkVersion().toStdString();
        },
        "Gets the version of the SDK used to build said device. Can be empty if the device does not use the SDK as its firmware/is implemented at a protocol-level.");
    cls.def_property_readonly("server_capabilities",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getServerCapabilities().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets the list of server capabilities stored in device info.");
    cls.def_property_readonly("location",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getLocation().toStdString();
        },
        "Gets the location of the device.");
    cls.def_property_readonly("configuration_connection_info",
        [](daq::IDeviceInfo *object)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getConfigurationConnectionInfo().detach();
        },
        py::return_value_policy::take_ownership,
        "Retrieves the configuration connection information of the server to which the client is connected.");
    cls.def("has_server_capability",
        [](daq::IDeviceInfo *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& protocolId)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.hasServerCapability(getVariantValue<daq::IString*>(protocolId));
        },
        py::arg("protocol_id"),
        "Checks whether the server capability with a given ID is available.");
    cls.def("get_server_capability",
        [](daq::IDeviceInfo *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& protocolId)
        {
            const auto objectPtr = daq::DeviceInfoPtr::Borrow(object);
            return objectPtr.getServerCapability(getVariantValue<daq::IString*>(protocolId)).detach();
        },
        py::arg("protocol_id"),
        "Gets the server capability with a given ID.");
}
