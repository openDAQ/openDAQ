//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IDeviceNetworkConfig, daq::IBaseObject> declareIDeviceNetworkConfig(pybind11::module_ m)
{
    return wrapInterface<daq::IDeviceNetworkConfig, daq::IBaseObject>(m, "IDeviceNetworkConfig");
}

void defineIDeviceNetworkConfig(pybind11::module_ m, PyDaqIntf<daq::IDeviceNetworkConfig, daq::IBaseObject> cls)
{
    cls.doc() = "Interface for managing device network configuration information and settings.";

    cls.def("submit_network_configuration",
        [](daq::IDeviceNetworkConfig *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& ifaceName, daq::IPropertyObject* config)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::DeviceNetworkConfigPtr::Borrow(object);
            objectPtr.submitNetworkConfiguration(getVariantValue<daq::IString*>(ifaceName), config);
        },
        py::arg("iface_name"), py::arg("config"),
        "Submits a new configuration parameters to a specified network interface.");
    cls.def("retrieve_network_configuration",
        [](daq::IDeviceNetworkConfig *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& ifaceName)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::DeviceNetworkConfigPtr::Borrow(object);
            return objectPtr.retrieveNetworkConfiguration(getVariantValue<daq::IString*>(ifaceName)).detach();
        },
        py::arg("iface_name"),
        "Retrieves the currently active configuration of a specified network interface.");
    cls.def_property_readonly("network_configuration_enabled",
        [](daq::IDeviceNetworkConfig *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::DeviceNetworkConfigPtr::Borrow(object);
            return objectPtr.getNetworkConfigurationEnabled();
        },
        "Checks if the device supports network configuration management.");
    cls.def_property_readonly("network_interface_names",
        [](daq::IDeviceNetworkConfig *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::DeviceNetworkConfigPtr::Borrow(object);
            return objectPtr.getNetworkInterfaceNames().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets the names of all configurable network interfaces on the device.");
}
