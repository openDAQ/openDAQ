//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::ILogFileInfoBuilder, daq::IBaseObject> declareILogFileInfoBuilder(pybind11::module_ m)
{
    return wrapInterface<daq::ILogFileInfoBuilder, daq::IBaseObject>(m, "ILogFileInfoBuilder");
}

void defineILogFileInfoBuilder(pybind11::module_ m, PyDaqIntf<daq::ILogFileInfoBuilder, daq::IBaseObject> cls)
{
    cls.doc() = "";

    m.def("LogFileInfoBuilder", &daq::LogFileInfoBuilder_Create);

    cls.def("build",
        [](daq::ILogFileInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            return objectPtr.build().detach();
        },
        "Builds the log file info.");
    cls.def_property("local_path",
        [](daq::ILogFileInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            return objectPtr.getLocalPath().toStdString();
        },
        [](daq::ILogFileInfoBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& localPath)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            objectPtr.setLocalPath(getVariantValue<daq::IString*>(localPath));
        },
        "Gets the local path of the log file. The local path can be not assigned as it is optional. / Sets the local path of the log file. The local path can be not assigned as it is optional.");
    cls.def_property("name",
        [](daq::ILogFileInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            return objectPtr.getName().toStdString();
        },
        [](daq::ILogFileInfoBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& name)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            objectPtr.setName(getVariantValue<daq::IString*>(name));
        },
        "Gets the name of the log file. / Sets the name of the log file.");
    cls.def_property("id",
        [](daq::ILogFileInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            return objectPtr.getId().toStdString();
        },
        [](daq::ILogFileInfoBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& id)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            objectPtr.setId(getVariantValue<daq::IString*>(id));
        },
        "Gets the id of the log file. If the local path is not assigned, the id is equal to the `localPath + \"/\" + name`. / Sets the id of the log file. Oth");
    cls.def_property("description",
        [](daq::ILogFileInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            return objectPtr.getDescription().toStdString();
        },
        [](daq::ILogFileInfoBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& description)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            objectPtr.setDescription(getVariantValue<daq::IString*>(description));
        },
        "Gets the description of the log file. / Sets the description of the log file.");
    cls.def_property("size",
        [](daq::ILogFileInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            return objectPtr.getSize();
        },
        [](daq::ILogFileInfoBuilder *object, const size_t size)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            objectPtr.setSize(size);
        },
        "Gets the size of the log file in bytes. / Sets the size of the log file in bytes.");
    cls.def_property("encoding",
        [](daq::ILogFileInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            return objectPtr.getEncoding().toStdString();
        },
        [](daq::ILogFileInfoBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& encoding)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            objectPtr.setEncoding(getVariantValue<daq::IString*>(encoding));
        },
        "Gets the encoding of the log file. / Sets the encoding of the log file.");
    cls.def_property("last_modified",
        [](daq::ILogFileInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            return objectPtr.getLastModified().toStdString();
        },
        [](daq::ILogFileInfoBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& lastModified)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::LogFileInfoBuilderPtr::Borrow(object);
            objectPtr.setLastModified(getVariantValue<daq::IString*>(lastModified));
        },
        "Gets the date of the last modification of the log file in ISO 8601 format. / Sets the date of the last modification of the log file in ISO 8601 format.");
}
