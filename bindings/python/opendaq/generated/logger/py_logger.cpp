//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::ILogger, daq::IBaseObject> declareILogger(pybind11::module_ m)
{
    return wrapInterface<daq::ILogger, daq::IBaseObject>(m, "ILogger");
}

void defineILogger(pybind11::module_ m, PyDaqIntf<daq::ILogger, daq::IBaseObject> cls)
{
    cls.doc() = "Represents a collection of @ref ILoggerComponent \"Logger Components\" with multiple";

    m.def("Logger", &daq::Logger_Create);

    cls.def_property("level",
        [](daq::ILogger *object)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            return objectPtr.getLevel();
        },
        [](daq::ILogger *object, daq::LogLevel level)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            objectPtr.setLevel(level);
        },
        "Gets the default log severity level. / Sets the default log severity level.");
    cls.def("get_or_add_component",
        [](daq::ILogger *object, const std::string& name)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            return objectPtr.getOrAddComponent(name).detach();
        },
        py::arg("name"),
        "Gets an added component by name or creates a new one with a given name and adds it to the Logger object.");
    cls.def("add_component",
        [](daq::ILogger *object, const std::string& name)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            return objectPtr.addComponent(name).detach();
        },
        py::arg("name"),
        "Creates a component with a given name and adds it to the Logger object.");
    cls.def("remove_component",
        [](daq::ILogger *object, const std::string& name)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            objectPtr.removeComponent(name);
        },
        py::arg("name"),
        "Removes the component with a given name from the Logger object.");
    cls.def_property_readonly("components",
        [](daq::ILogger *object)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            return objectPtr.getComponents().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets a list of added components.");
    cls.def("get_component",
        [](daq::ILogger *object, const std::string& name)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            return objectPtr.getComponent(name).detach();
        },
        py::arg("name"),
        "Gets an added component by name.");
    cls.def("flush",
        [](daq::ILogger *object)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            objectPtr.flush();
        },
        "Triggers writing out the messages stored in temporary buffers for added components and sinks associated with the Logger object.");
    cls.def("flush_on_level",
        [](daq::ILogger *object, daq::LogLevel level)
        {
            const auto objectPtr = daq::LoggerPtr::Borrow(object);
            objectPtr.flushOnLevel(level);
        },
        py::arg("level"),
        "Sets the minimum severity level of messages to be automatically flushed by components of Logger object.");
}
