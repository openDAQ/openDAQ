//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IDiscoveryServer, daq::IBaseObject> declareIDiscoveryServer(pybind11::module_ m)
{
    return wrapInterface<daq::IDiscoveryServer, daq::IBaseObject>(m, "IDiscoveryServer");
}

void defineIDiscoveryServer(pybind11::module_ m, PyDaqIntf<daq::IDiscoveryServer, daq::IBaseObject> cls)
{
    cls.doc() = "";

    m.def("MdnsDiscoveryServer", &daq::MdnsDiscoveryServer_Create);

    cls.def("register_service",
        [](daq::IDiscoveryServer *object, const std::string& id, daq::IPropertyObject* config, daq::IDeviceInfo* deviceInfo)
        {
            const auto objectPtr = daq::DiscoveryServerPtr::Borrow(object);
            objectPtr.registerService(id, config, deviceInfo);
        },
        py::arg("id"), py::arg("config"), py::arg("device_info"),
        "");
    cls.def("unregister_service",
        [](daq::IDiscoveryServer *object, const std::string& id)
        {
            const auto objectPtr = daq::DiscoveryServerPtr::Borrow(object);
            objectPtr.unregisterService(id);
        },
        py::arg("id"),
        "");
}
