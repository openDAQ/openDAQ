//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

#include <pybind11/stl.h>
#include <pybind11/chrono.h>

PyDaqIntf<daq::IStreamReader, daq::ISampleReader> declareIStreamReader(pybind11::module_ m)
{
    return wrapInterface<daq::IStreamReader, daq::ISampleReader>(m, "IStreamReader");
}

void defineIStreamReader(pybind11::module_ m, PyDaqIntf<daq::IStreamReader, daq::ISampleReader> cls)
{
    cls.doc() = "A signal data reader that abstracts away reading of signal packets by keeping an internal read-position and automatically advances it on subsequent reads.";

    m.def("StreamReader",
        [](daq::ISignal* signal, daq::ReadTimeoutType timeoutType)
        {
            const auto signalPtr = daq::SignalPtr::Borrow(signal);
            return daq::StreamReader(signalPtr, timeoutType).detach();
        },
        py::arg("signal"), py::arg("timeout_type") = daq::ReadTimeoutType::All,
        ""
    );
    m.def("StreamReaderFromExisting", &daq::StreamReaderFromExisting_Create);

    cls.def("read",
        [](daq::IStreamReader *object, size_t count, const size_t timeoutMs)
        {
            const auto objectPtr = daq::StreamReaderPtr::Borrow(object);
            // TODO: return the correct data types
            std::vector<double> values(count, 0);
            objectPtr.read(values.data(), &count, timeoutMs);
            values.resize(count);
            return toPyArray(std::move(values));
        },
        py::arg("count"), py::arg("timeout_ms") = 0,
        "Copies at maximum the next `count` unread samples to the values buffer. The amount actually read is returned through the `count` parameter.");
    cls.def("read_with_domain",
        [](daq::IStreamReader *object, size_t count, const size_t timeoutMs)
        {
            const auto objectPtr = daq::StreamReaderPtr::Borrow(object);
            // TODO: proper type #736 (https://github.com/blueberrydaq/Blueberry/issues/736)
            std::vector<double> values(count, 0);
            // TODO: proper type #736 (https://github.com/blueberrydaq/Blueberry/issues/736)
            std::vector<daq::ClockTick> domain(count, 0);
            objectPtr.readWithDomain(values.data(), domain.data(), &count, timeoutMs);
            values.resize(count);
            domain.resize(count);
            return make_tuple(toPyArray(std::move(values)), toPyArray(std::move(domain)));
        },
        py::arg("count"), py::arg("timeout_ms") = 0,
        "Copies at maximum the next `count` unread samples and clock-stamps to the `values` and `stamps` buffers. The amount actually read is returned through the `count` parameter.");
    cls.def("read_with_timestamps",
        [](daq::IStreamReader *object, size_t count, const size_t timeoutMs)
        {
            const auto objectPtr = daq::StreamReaderPtr::Borrow(object);
            // TODO: proper type #736 (https://github.com/blueberrydaq/Blueberry/issues/736)
            std::vector<double> values(count, 0);
            // std::chrono::system_clock::time_point converts to DateTime
            std::vector<std::chrono::system_clock::time_point> domain(count, std::chrono::system_clock::from_time_t(0));
            std::unique_ptr<daq::TimeReader<daq::StreamReaderPtr>> timeReader = std::make_unique<daq::TimeReader<daq::StreamReaderPtr>>(objectPtr);
            timeReader->readWithDomain(values.data(), domain.data(), &count, timeoutMs);
            values.resize(count);
            domain.resize(count);
            return py::make_tuple(toPyArray(std::move(values)), domain);
        },
        py::arg("count"), py::arg("timeout_ms") = 0,
        "Copies at maximum the next `count` unread samples and clock-stamps to the `values` and `stamps` buffers. The amount actually read is returned through the `count` parameter. The domain data is returned in timestamp format.");
}
