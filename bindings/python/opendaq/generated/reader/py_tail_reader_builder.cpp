//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"


PyDaqIntf<daq::ITailReaderBuilder, daq::IBaseObject> declareITailReaderBuilder(pybind11::module_ m)
{
    return wrapInterface<daq::ITailReaderBuilder, daq::IBaseObject>(m, "ITailReaderBuilder");
}

void defineITailReaderBuilder(pybind11::module_ m, PyDaqIntf<daq::ITailReaderBuilder, daq::IBaseObject> cls)
{
    cls.doc() = "Builder component of Tail reader objects. Contains setter methods to configure the Tail reader parameters and a `build` method that builds the Unit object.";

    m.def("TailReaderBuilder", &daq::TailReaderBuilder_Create);

    cls.def("build",
        [](daq::ITailReaderBuilder *object)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            return objectPtr.build().detach();
        },
        "Builds and returns a Tail reader object using the currently set values of the Builder.");
    cls.def_property("signal",
        [](daq::ITailReaderBuilder *object)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            return objectPtr.getSignal().detach();
        },
        [](daq::ITailReaderBuilder *object, daq::ISignal* signal)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            objectPtr.setSignal(signal);
        },
        py::return_value_policy::take_ownership,
        "Gets the signal / Sets the signal to tail reader");
    cls.def_property("input_port",
        [](daq::ITailReaderBuilder *object)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            return objectPtr.getInputPort().detach();
        },
        [](daq::ITailReaderBuilder *object, daq::IInputPort* port)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            objectPtr.setInputPort(port);
        },
        py::return_value_policy::take_ownership,
        "Gets the input port / Sets the input port to tail reader");
    cls.def_property("value_read_type",
        [](daq::ITailReaderBuilder *object)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            return objectPtr.getValueReadType();
        },
        [](daq::ITailReaderBuilder *object, daq::SampleType type)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            objectPtr.setValueReadType(type);
        },
        "Gets the value signal read type / Sets the value signal read type");
    cls.def_property("domain_read_type",
        [](daq::ITailReaderBuilder *object)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            return objectPtr.getDomainReadType();
        },
        [](daq::ITailReaderBuilder *object, daq::SampleType type)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            objectPtr.setDomainReadType(type);
        },
        "Gets the domain signal read type / Sets the domain signal read type");
    cls.def_property("read_mode",
        [](daq::ITailReaderBuilder *object)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            return objectPtr.getReadMode();
        },
        [](daq::ITailReaderBuilder *object, daq::ReadMode mode)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            objectPtr.setReadMode(mode);
        },
        "Gets the read mode (Unscaled, Scaled, RawValue) / Sets the read mode (Unscaled, Scaled, RawValue)");
    cls.def_property("history_size",
        [](daq::ITailReaderBuilder *object)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            return objectPtr.getHistorySize();
        },
        [](daq::ITailReaderBuilder *object, const size_t historySize)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            objectPtr.setHistorySize(historySize);
        },
        "Gets the history size / Sets the history size");
    cls.def_property("skip_events",
        [](daq::ITailReaderBuilder *object)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            return objectPtr.getSkipEvents();
        },
        [](daq::ITailReaderBuilder *object, const bool skipEvents)
        {
            const auto objectPtr = daq::TailReaderBuilderPtr::Borrow(object);
            objectPtr.setSkipEvents(skipEvents);
        },
        "Gets the skip events / Sets the skip events");
}
