//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::ITask, daq::IBaseObject> declareITask(pybind11::module_ m)
{
    return wrapInterface<daq::ITask, daq::IBaseObject>(m, "ITask");
}

void defineITask(pybind11::module_ m, PyDaqIntf<daq::ITask, daq::IBaseObject> cls)
{
    cls.doc() = "A packaged callback with possible continuations and dependencies that can be arranged in a dependency graph (directed acyclic graph). The task is not executed directly but only when the graph is scheduled for execution and all dependencies have been satisfied.";

    m.def("Task", [](daq::IProcedure* work, std::variant<daq::IString*, py::str, daq::IEvalValue*>& name){
        return daq::Task_Create(work, getVariantValue<daq::IString*>(name));
    }, py::arg("work"), py::arg("name"));


    cls.def_property("name",
        [](daq::ITask *object)
        {
            const auto objectPtr = daq::TaskPtr::Borrow(object);
            return objectPtr.getName().toStdString();
        },
        [](daq::ITask *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& name)
        {
            const auto objectPtr = daq::TaskPtr::Borrow(object);
            objectPtr.setName(getVariantValue<daq::IString*>(name));
        },
        "Gets the task name. / Sets the task name that is used in diagnostics.");
    cls.def("then",
        [](daq::ITask *object, daq::ITask* continuation)
        {
            const auto objectPtr = daq::TaskPtr::Borrow(object);
            objectPtr.then(continuation);
        },
        py::arg("continuation"),
        "Sets the continuation to only execute after this task completes. Be careful of forming cycles as tasks whose dependencies cannot be satisfied will never execute.");
}
