//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IDataDescriptorBuilder, daq::IBaseObject> declareIDataDescriptorBuilder(pybind11::module_ m)
{
    return wrapInterface<daq::IDataDescriptorBuilder, daq::IBaseObject>(m, "IDataDescriptorBuilder");
}

void defineIDataDescriptorBuilder(pybind11::module_ m, PyDaqIntf<daq::IDataDescriptorBuilder, daq::IBaseObject> cls)
{
    cls.doc() = "Builder component of Data descriptor objects. Contains setter methods that allow for Data descriptor parameter configuration, and a `build` method that builds the Data descriptor.";

    m.def("DataDescriptorBuilder", &daq::DataDescriptorBuilder_Create);
    m.def("DataDescriptorBuilderFromExisting", &daq::DataDescriptorBuilderFromExisting_Create);

    cls.def_property("name",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, const std::string& name)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setName(name);
        },
        "Sets a descriptive name for the signal's value.");
    cls.def_property("dimensions",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::IList* dimensions)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setDimensions(dimensions);
        },
        "Sets the list of the descriptor's dimension's.");
    cls.def_property("sample_type",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::SampleType sampleType)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setSampleType(sampleType);
        },
        "Sets the descriptor's sample type.");
    cls.def_property("unit",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::IUnit* unit)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setUnit(unit);
        },
        "Sets the unit of the data in a signal's packets.");
    cls.def_property("value_range",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::IRange* range)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setValueRange(range);
        },
        "Sets the value range of the data in a signal's packets defining the lowest and highest expected values.");
    cls.def_property("rule",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::IDataRule* rule)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setRule(rule);
        },
        "Sets the value Data rule.");
    cls.def_property("origin",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, const std::string& origin)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setOrigin(origin);
        },
        "Sets the absolute origin of a signal value component.");
    cls.def_property("tick_resolution",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::IRatio* tickResolution)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setTickResolution(tickResolution);
        },
        "Sets the Resolution which scales the an explicit or implicit value to the physical unit defined in `unit`.");
    cls.def_property("post_scaling",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::IScaling* scaling)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setPostScaling(scaling);
        },
        "Sets the scaling rule that needs to be applied to explicit/implicit data by readers.");
    cls.def_property("struct_fields",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::IList* structFields)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setStructFields(structFields);
        },
        "Sets the fields of the struct, forming a recursive value descriptor definition.");
    cls.def_property("metadata",
        nullptr,
        [](daq::IDataDescriptorBuilder *object, daq::IDict* metadata)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            objectPtr.setMetadata(metadata);
        },
        "Sets any extra metadata defined by the data descriptor.");
    cls.def("build",
        [](daq::IDataDescriptorBuilder *object)
        {
            const auto objectPtr = daq::DataDescriptorBuilderPtr::Borrow(object);
            return objectPtr.build().detach();
        },
        "Builds and returns a Data descriptor object using the currently set values of the Builder.");
}
