//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IDataRule, daq::IBaseObject> declareIDataRule(pybind11::module_ m)
{
    py::enum_<daq::DataRuleType>(m, "DataRuleType")
        .value("Other", daq::DataRuleType::Other)
        .value("Linear", daq::DataRuleType::Linear)
        .value("Constant", daq::DataRuleType::Constant)
        .value("Explicit", daq::DataRuleType::Explicit);

    return wrapInterface<daq::IDataRule, daq::IBaseObject>(m, "IDataRule");
}

void defineIDataRule(pybind11::module_ m, PyDaqIntf<daq::IDataRule, daq::IBaseObject> cls)
{
    cls.doc() = "Rule that defines how a signal value is calculated from an implicit initialization value when the rule type is not `Explicit`.";

    m.def("LinearDataRule", [](std::variant<daq::INumber*, double, int64_t, daq::IEvalValue*>& delta, std::variant<daq::INumber*, double, int64_t, daq::IEvalValue*>& start){
        return daq::LinearDataRule_Create(getVariantValue<daq::INumber*>(delta), getVariantValue<daq::INumber*>(start));
    }, py::arg("delta"), py::arg("start"));

    m.def("ConstantDataRule", &daq::ConstantDataRule_Create);
    m.def("ExplicitDataRule", &daq::ExplicitDataRule_Create);
    m.def("ExplicitDomainDataRule", [](std::variant<daq::INumber*, double, int64_t, daq::IEvalValue*>& minExpectedDelta, std::variant<daq::INumber*, double, int64_t, daq::IEvalValue*>& maxExpectedDelta){
        return daq::ExplicitDomainDataRule_Create(getVariantValue<daq::INumber*>(minExpectedDelta), getVariantValue<daq::INumber*>(maxExpectedDelta));
    }, py::arg("min_expected_delta"), py::arg("max_expected_delta"));

    m.def("DataRule", [](daq::DataRuleType ruleType, std::variant<daq::IDict*, py::dict>& parameters){
        return daq::DataRule_Create(ruleType, getVariantValue<daq::IDict*>(parameters));
    }, py::arg("rule_type"), py::arg("parameters"));

    m.def("DataRuleFromBuilder", &daq::DataRuleFromBuilder_Create);

    cls.def_property_readonly("type",
        [](daq::IDataRule *object)
        {
            const auto objectPtr = daq::DataRulePtr::Borrow(object);
            return objectPtr.getType();
        },
        "Gets the type of the data rule.");
    cls.def_property_readonly("parameters",
        [](daq::IDataRule *object)
        {
            const auto objectPtr = daq::DataRulePtr::Borrow(object);
            return objectPtr.getParameters().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets a dictionary of string-object key-value pairs representing the parameters used to evaluate the rule.");
}
