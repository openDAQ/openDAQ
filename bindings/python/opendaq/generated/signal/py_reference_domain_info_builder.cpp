//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IReferenceDomainInfoBuilder, daq::IBaseObject> declareIReferenceDomainInfoBuilder(pybind11::module_ m)
{
    return wrapInterface<daq::IReferenceDomainInfoBuilder, daq::IBaseObject>(m, "IReferenceDomainInfoBuilder");
}

void defineIReferenceDomainInfoBuilder(pybind11::module_ m, PyDaqIntf<daq::IReferenceDomainInfoBuilder, daq::IBaseObject> cls)
{
    cls.doc() = "Builder component of Reference Domain Info objects. Contains setter methods that allow for Reference Domain Info parameter configuration, and a `build` method that builds the Reference Domain Info.";

    m.def("ReferenceDomainInfoBuilder", &daq::ReferenceDomainInfoBuilder_Create);
    m.def("ReferenceDomainInfoBuilderFromExisting", &daq::ReferenceDomainInfoBuilderFromExisting_Create);

    cls.def("build",
        [](daq::IReferenceDomainInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            return objectPtr.build().detach();
        },
        "Builds and returns a Reference Domain Info object using the currently set values of the Builder.");
    cls.def_property("reference_domain_id",
        [](daq::IReferenceDomainInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            return objectPtr.getReferenceDomainId().toStdString();
        },
        [](daq::IReferenceDomainInfoBuilder *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& referenceDomainId)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            objectPtr.setReferenceDomainId(getVariantValue<daq::IString*>(referenceDomainId));
        },
        "Gets the Reference Domain ID. / Sets the Reference Domain ID.");
    cls.def_property("reference_domain_offset",
        [](daq::IReferenceDomainInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            return objectPtr.getReferenceDomainOffset().detach();
        },
        [](daq::IReferenceDomainInfoBuilder *object, std::variant<daq::IInteger*, int64_t, daq::IEvalValue*>& referenceDomainOffset)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            objectPtr.setReferenceDomainOffset(getVariantValue<daq::IInteger*>(referenceDomainOffset));
        },
        py::return_value_policy::take_ownership,
        "Gets the Reference Domain Offset. / Sets the Reference Domain Offset.");
    cls.def_property("reference_time_source",
        [](daq::IReferenceDomainInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            return objectPtr.getReferenceTimeSource();
        },
        [](daq::IReferenceDomainInfoBuilder *object, daq::TimeSource referenceTimeSource)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            objectPtr.setReferenceTimeSource(referenceTimeSource);
        },
        "Gets the value that indicates the Reference Time Source. / Sets the value that indicates the Reference Time Source.");
    cls.def_property("uses_offset",
        [](daq::IReferenceDomainInfoBuilder *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            return objectPtr.getUsesOffset();
        },
        [](daq::IReferenceDomainInfoBuilder *object, daq::UsesOffset usesOffset)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::ReferenceDomainInfoBuilderPtr::Borrow(object);
            objectPtr.setUsesOffset(usesOffset);
        },
        "Gets the value that indicates if offset is used. / Sets the value that indicates if offset is used.");
}
