//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::ISignalEvents, daq::IBaseObject> declareISignalEvents(pybind11::module_ m)
{
    return wrapInterface<daq::ISignalEvents, daq::IBaseObject>(m, "ISignalEvents");
}

void defineISignalEvents(pybind11::module_ m, PyDaqIntf<daq::ISignalEvents, daq::IBaseObject> cls)
{
    cls.doc() = "Internal functions of a signal containing event methods that are called on certain events. Eg. when a signal is connected to an input port, or when a signal is used as a domain signal of another.";

    cls.def("listener_connected",
        [](daq::ISignalEvents *object, daq::IConnection* connection)
        {
            const auto objectPtr = daq::SignalEventsPtr::Borrow(object);
            objectPtr.listenerConnected(connection);
        },
        py::arg("connection"),
        "Notifies the signal that it has been connected to an input port forming a new connection.");
    cls.def("listener_disconnected",
        [](daq::ISignalEvents *object, daq::IConnection* connection)
        {
            const auto objectPtr = daq::SignalEventsPtr::Borrow(object);
            objectPtr.listenerDisconnected(connection);
        },
        py::arg("connection"),
        "Notifies the signal that it has been disconnected from an input port with the given connection.");
    cls.def("domain_signal_reference_set",
        [](daq::ISignalEvents *object, daq::ISignal* signal)
        {
            const auto objectPtr = daq::SignalEventsPtr::Borrow(object);
            objectPtr.domainSignalReferenceSet(signal);
        },
        py::arg("signal"),
        "Notifies the signal that it is being used as a domain signal by the signal passed as the function argument.");
    cls.def("domain_signal_reference_removed",
        [](daq::ISignalEvents *object, daq::ISignal* signal)
        {
            const auto objectPtr = daq::SignalEventsPtr::Borrow(object);
            objectPtr.domainSignalReferenceRemoved(signal);
        },
        py::arg("signal"),
        "Notifies the signal that it is no longer being used as a domain signal by the signal passed as the function argument.");
}
