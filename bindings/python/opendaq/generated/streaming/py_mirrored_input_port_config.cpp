//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::IMirroredInputPortConfig, daq::IInputPortConfig> declareIMirroredInputPortConfig(pybind11::module_ m)
{
    return wrapInterface<daq::IMirroredInputPortConfig, daq::IInputPortConfig>(m, "IMirroredInputPortConfig");
}

void defineIMirroredInputPortConfig(pybind11::module_ m, PyDaqIntf<daq::IMirroredInputPortConfig, daq::IInputPortConfig> cls)
{
    cls.doc() = "Represents the configuration interface for mirrored input ports.";

    cls.def_property_readonly("remote_id",
        [](daq::IMirroredInputPortConfig *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::MirroredInputPortConfigPtr::Borrow(object);
            return objectPtr.getRemoteId().toStdString();
        },
        "Gets the global ID of the input port as it appears on the remote device.");
    cls.def_property_readonly("streaming_sources",
        [](daq::IMirroredInputPortConfig *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::MirroredInputPortConfigPtr::Borrow(object);
            return objectPtr.getStreamingSources().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets a list of connection strings of all available streaming sources of the input port.");
    cls.def_property("active_streaming_source",
        [](daq::IMirroredInputPortConfig *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::MirroredInputPortConfigPtr::Borrow(object);
            return objectPtr.getActiveStreamingSource().toStdString();
        },
        [](daq::IMirroredInputPortConfig *object, std::variant<daq::IString*, py::str, daq::IEvalValue*>& streamingConnectionString)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::MirroredInputPortConfigPtr::Borrow(object);
            objectPtr.setActiveStreamingSource(getVariantValue<daq::IString*>(streamingConnectionString));
        },
        "Gets a connection strings of the active streaming source of the input port. / Sets the active streaming source of the input port.");
}
