//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IMirroredSignalConfig, daq::ISignalConfig> declareIMirroredSignalConfig(pybind11::module_ m)
{
    return wrapInterface<daq::IMirroredSignalConfig, daq::ISignalConfig>(m, "IMirroredSignalConfig");
}

void defineIMirroredSignalConfig(pybind11::module_ m, PyDaqIntf<daq::IMirroredSignalConfig, daq::ISignalConfig> cls)
{
    cls.doc() = "Represents configuration interface for mirrored signals. Allows selecting streaming data sources per signal.";

    cls.def_property_readonly("remote_id",
        [](daq::IMirroredSignalConfig *object)
        {
            const auto objectPtr = daq::MirroredSignalConfigPtr::Borrow(object);
            return objectPtr.getRemoteId().toStdString();
        },
        "Gets the global ID of the signal as it appears on the remote device.");
    cls.def_property_readonly("streaming_sources",
        [](daq::IMirroredSignalConfig *object)
        {
            const auto objectPtr = daq::MirroredSignalConfigPtr::Borrow(object);
            return objectPtr.getStreamingSources().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets a list of connection strings of all available streaming sources of the signal.");
    cls.def_property("active_streaming_source",
        [](daq::IMirroredSignalConfig *object)
        {
            const auto objectPtr = daq::MirroredSignalConfigPtr::Borrow(object);
            return objectPtr.getActiveStreamingSource().toStdString();
        },
        [](daq::IMirroredSignalConfig *object, const std::string& streamingConnectionString)
        {
            const auto objectPtr = daq::MirroredSignalConfigPtr::Borrow(object);
            objectPtr.setActiveStreamingSource(streamingConnectionString);
        },
        "Gets a connection strings of the active streaming source of the signal. / Sets the active streaming source of the signal.");
    cls.def("deactivate_streaming",
        [](daq::IMirroredSignalConfig *object)
        {
            const auto objectPtr = daq::MirroredSignalConfigPtr::Borrow(object);
            objectPtr.deactivateStreaming();
        },
        "Stops the streaming and clears the active streaming source of the signal.");
    /*
    cls.def_property_readonly("on_subscribe_complete",
        [](daq::IMirroredSignalConfig *object)
        {
            const auto objectPtr = daq::MirroredSignalConfigPtr::Borrow(object);
            return objectPtr.getOnSubscribeComplete().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets the Event that is triggered whenever the acknowledgment for signal subscription completion is received from the streaming server.");
    */
    /*
    cls.def_property_readonly("on_unsubscribe_complete",
        [](daq::IMirroredSignalConfig *object)
        {
            const auto objectPtr = daq::MirroredSignalConfigPtr::Borrow(object);
            return objectPtr.getOnUnsubscribeComplete().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets the Event that is triggered whenever the acknowledgment for signal unsubscription completion is received from the streaming server.");
    */
}
