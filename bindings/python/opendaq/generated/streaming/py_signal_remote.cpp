//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::ISignalRemote, daq::IBaseObject> declareISignalRemote(pybind11::module_ m)
{
    return wrapInterface<daq::ISignalRemote, daq::IBaseObject>(m, "ISignalRemote");
}

void defineISignalRemote(pybind11::module_ m, PyDaqIntf<daq::ISignalRemote, daq::IBaseObject> cls)
{
    cls.doc() = "Represents an internal interface for a signal. Provides methods that are called only for mirrored signals. Allows adding/removing streaming data sources per signal.";

    cls.def_property_readonly("remote_id",
        [](daq::ISignalRemote *object)
        {
            const auto objectPtr = daq::SignalRemotePtr::Borrow(object);
            return objectPtr.getRemoteId().toStdString();
        },
        "Gets the global ID of the signal as it appears on the remote device.");
    cls.def("trigger_event",
        [](daq::ISignalRemote *object, daq::IEventPacket* eventPacket)
        {
            const auto objectPtr = daq::SignalRemotePtr::Borrow(object);
            return objectPtr.triggerEvent(eventPacket);
        },
        py::arg("event_packet"),
        "Handles event packet e.g. packet with changes of the signals descriptors or signal properties");
    cls.def("add_streaming_source",
        [](daq::ISignalRemote *object, daq::IStreaming* streaming)
        {
            const auto objectPtr = daq::SignalRemotePtr::Borrow(object);
            objectPtr.addStreamingSource(streaming);
        },
        py::arg("streaming"),
        "Adds streaming source for signal.");
    cls.def("remove_streaming_source",
        [](daq::ISignalRemote *object, daq::IStreaming* streaming)
        {
            const auto objectPtr = daq::SignalRemotePtr::Borrow(object);
            objectPtr.removeStreamingSource(streaming);
        },
        py::arg("streaming"),
        "Removes streaming source for signal.");
}
