//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::IStreaming, daq::IBaseObject> declareIStreaming(pybind11::module_ m)
{
    return wrapInterface<daq::IStreaming, daq::IBaseObject>(m, "IStreaming");
}

void defineIStreaming(pybind11::module_ m, PyDaqIntf<daq::IStreaming, daq::IBaseObject> cls)
{
    cls.doc() = "Represents the client-side part of a streaming service responsible for initiating communication with the openDAQ device streaming server and processing the received data. Wraps the client-side implementation details of the particular data transfer protocol used by openDAQ to send processed/acquired data from devices running an openDAQ Server to an openDAQ Client.";

    cls.def_property("active",
        [](daq::IStreaming *object)
        {
            const auto objectPtr = daq::StreamingPtr::Borrow(object);
            return objectPtr.getActive();
        },
        [](daq::IStreaming *object, const bool active)
        {
            const auto objectPtr = daq::StreamingPtr::Borrow(object);
            objectPtr.setActive(active);
        },
        "Gets the active state of the Streaming. / Sets the Streaming to be either active or inactive.");
    cls.def("add_signals",
        [](daq::IStreaming *object, daq::IList* signals)
        {
            const auto objectPtr = daq::StreamingPtr::Borrow(object);
            objectPtr.addSignals(signals);
        },
        py::arg("signals"),
        "Adds signals to the Streaming.");
    cls.def("remove_signals",
        [](daq::IStreaming *object, daq::IList* signals)
        {
            const auto objectPtr = daq::StreamingPtr::Borrow(object);
            objectPtr.removeSignals(signals);
        },
        py::arg("signals"),
        "Removes signals from the Streaming.");
    cls.def("remove_all_signals",
        [](daq::IStreaming *object)
        {
            const auto objectPtr = daq::StreamingPtr::Borrow(object);
            objectPtr.removeAllSignals();
        },
        "Removes all added signals from the Streaming.");
    cls.def_property_readonly("connection_string",
        [](daq::IStreaming *object)
        {
            const auto objectPtr = daq::StreamingPtr::Borrow(object);
            return objectPtr.getConnectionString().toStdString();
        },
        "Gets the string representation of a connection address used to connect to the streaming service of the device.");
}
