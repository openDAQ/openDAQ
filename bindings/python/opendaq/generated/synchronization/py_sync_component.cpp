//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/gil.h>

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"
#include "py_core_objects/py_variant_extractor.h"

PyDaqIntf<daq::ISyncComponent, daq::IComponent> declareISyncComponent(pybind11::module_ m)
{
    return wrapInterface<daq::ISyncComponent, daq::IComponent>(m, "ISyncComponent");
}

void defineISyncComponent(pybind11::module_ m, PyDaqIntf<daq::ISyncComponent, daq::IComponent> cls)
{
    cls.doc() = "Interface representing a Synchronization Component in a Test & Measurement system. A SynchronizationComponent ensures synchronization among measurement devices in the system. It can act as a sync source and/or as a sync output, with each component having one sync input and 0 to n sync outputs.";

    m.def("SyncComponent", [](daq::IContext* context, daq::IComponent* ParseFailedException, std::variant<daq::IString*, py::str, daq::IEvalValue*>& localId){
        return daq::SyncComponent_Create(context, ParseFailedException, getVariantValue<daq::IString*>(localId));
    }, py::arg("context"), py::arg("parse_failed_exception"), py::arg("local_id"));


    cls.def_property_readonly("sync_locked",
        [](daq::ISyncComponent *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::SyncComponentPtr::Borrow(object);
            return objectPtr.getSyncLocked();
        },
        "Retrieves the synchronization lock status.");
    cls.def_property("selected_source",
        [](daq::ISyncComponent *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::SyncComponentPtr::Borrow(object);
            return objectPtr.getSelectedSource();
        },
        [](daq::ISyncComponent *object, daq::Int selectedSource)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::SyncComponentPtr::Borrow(object);
            objectPtr.setSelectedSource(selectedSource);
        },
        "Retrieves the selected sync source interface. / Sets the selected sync source interface.");
    cls.def_property_readonly("interfaces",
        [](daq::ISyncComponent *object)
        {
            py::gil_scoped_release release;
            const auto objectPtr = daq::SyncComponentPtr::Borrow(object);
            return objectPtr.getInterfaces().detach();
        },
        py::return_value_policy::take_ownership,
        "Retrieves the list of interfaces associated with this synchronization component.");
}
