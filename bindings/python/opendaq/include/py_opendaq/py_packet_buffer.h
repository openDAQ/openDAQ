//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <pybind11/pybind11.h>
#include <opendaq/opendaq.h>

namespace PyBuffer
{

class Buffer
{
public:
    Buffer(daq::BaseObjectPtr owner, void* mem, size_t size)
        : owner(std::move(owner))
        , mem(mem)
        , size(size)
    {
    }

    void* getMem() const
    {
        return mem;
    }

    size_t getSize() const
    {
        return size;
    }

    static std::string getName()
    {
        return "Buffer";
    }

    static void wrap(pybind11::module_ m)
    {
        py::class_<Buffer> cls(m, Buffer::getName().c_str(), py::buffer_protocol());
        cls.def(py::init([](daq::IBaseObject* owner, void* mem, size_t size)
            {
                return std::make_unique<Buffer>(owner, mem, size);
            }));

        cls.def_buffer([](Buffer& buffer)
            {
                return py::buffer_info(buffer.getMem(), 1, py::format_descriptor<uint8_t>::format(), buffer.getSize());
            });
    }

private:
    daq::BaseObjectPtr owner;
    void* mem;
    size_t size;
};


};
