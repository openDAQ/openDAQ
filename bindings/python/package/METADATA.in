Metadata-Version: 2.1
Name: opendaq
Version: @VERSION@
Summary: Open Data Acquisition Platform
Home-page: https://opendaq.com
Author: openDAQ d.o.o.
Author-email: opendaq@blueberry.com
Keywords: DAQ
Project-URL: Homepage, https://opendaq.com/
Project-URL: Documentation, https://docs.opendaq.com/manual/
Project-URL: Download, https://docs.opendaq.com/
Project-URL: Source code, https://github.com/openDAQ/openDAQ
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Requires-Dist: numpy >= 1.7.0
Description-Content-Type: text/markdown

openDAQ
=======

*SDK that bridges the gap between data acquisition devices, in an era where incompatibility is the norm.*

openDAQ is a software development kit that allows for easy integration of data acquisition devices into its ecosystem.
It provides a simple generic API that allows users to connect to Data Acquisition (DAQ) devices that are compliant with
openDAQ and any of its supported open standards. With the SDK, users can configure properties of devices and read their
measurement data. It also contains a framework for developing custom signal processing blocks that process and analyse
signal data. In a world where DAQ devices do not readily communicate, openDAQ provides a common language for all to speak
while also embracing existing standards such as MQTT and XCP via Ethernet.

Installation
------------

The package is available as binary wheels for Python 3.8-3.12. It has been built and tested for:
* 64-bit Windows
* x86_64 Linux (built on manylinux 2014, requires GLIBC >= 2.17)

On supported systems you can install it with:

```bash
$ pip install opendaq
```

Quick-start
-----------

You can start the application by creating a new instance:

```python
import opendaq

# Create a fresh openDAQ(TM) instance that we will use
# for all the interactions with the openDAQ(TM) SDK
instance = opendaq.Instance()
```

In order to list all the available devices, run:

```python
for device_info in instance.available_devices:
    print("Name:", device_info.name, "Connection string:", device_info.connection_string)
```

When using just a reference module without being connected to a physical device, the expected output will be
```
Name: Device 0 Connection string: daqref://device0
Name: Device 1 Connection string: daqref://device1
```

More examples can be found under https://docs.opendaq.com/manual/.

GUI
---

Python openDAQ(TM) package comes with a reference Tk GUI implementation, allowing you to quickly connect to any
openDAQ(TM) device and inspect or configure it.

To run the GUI, invoke the package from the command line using `-m` flag:
```bash
$ python -m opendaq
```

Changelog
---------

Role Management, Access Control and Authentication

- Ability to authenticate as a user when connecting to devices.

- Depending on their role, users have read/write/execute permissions defined at the openDAQ component level.

Exclusive control client

- Ability to connect as an “Exclusive control” client, ensuring that no other clients can be connected as control clients.

IPv6 connectivity

- IPv6 can now be used to connect to openDAQ devices.

GUI application improvements

- Major improvements to the usability of the GUI application accessible through “py -m opendaq”.

Enable device discovery in openDAQ

- A discovery server has been added to openDAQ, allowing devices to advertise themselves via mDNS without the use of external software.

Data streaming stability and performance improvements

- The Native and LT streaming protocols have been improved with new connectivity features such as reconnect.

- The Native protocol connection can be customized with new connection parameters when connecting to an openDAQ device.

openDAQ reader rework and usability improvements

- The openDAQ readers have been reworked to adopt the builder pattern, as well as to allow for them to be created with input ports as constructor parameters instead of signals.

- Readers have been extended with a “Reader status” output when reading data, indicating whether an event has been encountered.

- General API rework of the reader integration into the openDAQ Python bindings.

Client-to-server streaming with the openDAQ native communication protocol

- Data can now be streamed from the openDAQ client to the server via the native communication protocol.

Save/Load configuration rework and stabilization

- Device setup saving and loading has been stabilized for various edge cases including nested function blocks and components created dynamically during the loading process.

Several stability, usability, and performance improvements

General bug fixes
