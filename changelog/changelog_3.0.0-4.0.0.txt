30.05.2024
Description
  - Supporting reading client's connection info in the deviceInfo

+ [function] IDeviceInfo::getConfigurationConnectionInfo(IServerCapability** connectionInfo)

27.05.2024
Description
  - Supporing servers to be discovered by mDNS

+  [interface] IServer::getId(IString** serverId)
+  [interface] IServer::enableDiscovery();

+  [interface] IDiscoveryServer
+  [function]  IDiscoveryServer::registerService(IString* id, IPropertyObject* config, IDeviceInfo* deviceInfo);
+  [function]  IDiscoveryServer::unregisterService(IString* id)
+  [factory]   DiscoveryServerPtr MdnsDiscoveryServer(const LoggerPtr& logger)

+  [function]  IInstanceBuilder::getDiscoveryServices(IList** services)
+  [function]  IInstanceBuilder::addDiscoveryService(IString* serviceName)

+  [function] Context::getDiscoveryServers(IDict** services);
-m [factory] ContextPtr Context(const SchedulerPtr& scheduler,
                           const LoggerPtr& logger,
                           const TypeManagerPtr& typeManager,
                           const ModuleManagerPtr& moduleManager,
                           const AuthenticationProviderPtr& authenticationProvider,
                           const DictPtr<IString, IBaseObject> options = Dict<IString, IBaseObject>())
+m [factory] ContextPtr Context(const SchedulerPtr& scheduler,
                           const LoggerPtr& logger,
                           const TypeManagerPtr& typeManager,
                           const ModuleManagerPtr& moduleManager,
                           const AuthenticationProviderPtr& authenticationProvider,
                           const DictPtr<IString, IBaseObject> options = Dict<IString, IBaseObject>(),
                           const DictPtr<IString, IDiscoveryServer> discoveryServices = Dict<IString, IDiscoveryServer>())

17.05.2024
Description:
  - Add ability to manually connect to streaming for device after device added
  - Create connection string from ServerCapability via modules

+ [function] IDevice::addStreaming(IStreaming** streaming, IString* connectionString, IPropertyObject* config = nullptr)
+ [function] IModuleManagerUtils::createStreaming(IStreaming** streaming, IString* connectionString, IPropertyObject* config = nullptr)

-m [function] IModule::createStreaming(IStreaming** streaming, IString* connectionString, IPropertyObject* config)
+m [function] IModule::createStreaming(IStreaming** streaming, IString* connectionString, IPropertyObject* config = nullptr)

+ [function] IModule::createConnectionString(IString** connectionString, IServerCapability* serverCapability)

16.05.2024
Description:
    - Add functions for sending and dequeueing multiple packets
    - Add functions with steal reference behaviour for sending packets

+  [function]  ErrCode ISignalConfig::sendPackets(IList* packets)
+  [function]  ErrCode ISignalConfig::sendPacketAndStealRef(IPacket* packet)
+  [function]  ErrCode ISignalConfig::sendPacketsAndStealRef(IList* packets)
    
+  [function]  ErrCode IConnection::enqueueAndStealRef(IPacket* packet)
+  [function]  ErrCode IConnection::enqueueMultiple(IList* packets)
+  [function]  ErrCode IConnection::enqueueMultipleAndStealRef(IList* packets)
+  [function]  ErrCode IConnection::dequeueAll(IList** packets)()
    
26.04.2024
Description:
    Produce gap packets on request

-m [factory]  InputPortConfigPtr InputPort(const ContextPtr& context, const ComponentPtr& parent, const StringPtr& localId)
+m [factory]  InputPortConfigPtr InputPort(const ContextPtr& context, const ComponentPtr& parent, const StringPtr& localId, bool gapChecking = false)
+  [function] InputPortConfig::getGapCheckingEnabled(Bool* gapCheckingEnabled);
+  [factory]  EventPacketPtr ImplicitDomainGapDetectedEventPacket(const NumberPtr& diff)
+  [packet]   IMPLICIT_DOMAIN_GAP_DETECTED

26.04.2024
Description:
  - Clone property object to create default config from type

-m [factory] DeviceTypePtr DeviceType(const StringPtr& id, const StringPtr& name, const StringPtr& description, const FunctionPtr& createDefaultConfigCallback = nullptr)
+m [factory] DeviceTypePtr DeviceType(const StringPtr& id, const StringPtr& name, const StringPtr& description, const PropertyObjectPtr& defaultConfig = PropertyObject())
-m [factory] FunctionBlockTypePtr FunctionBlockType(const StringPtr& id, const StringPtr& name, const StringPtr& description, const FunctionPtr& createDefaultConfigCallback = nullptr)
+m [factory] FunctionBlockTypePtr FunctionBlockType(const StringPtr& id, const StringPtr& name, const StringPtr& description, const PropertyObjectPtr& defaultConfig = PropertyObject())
-m [factory] ServerTypePtr ServerType(const StringPtr& id, const StringPtr& name, const StringPtr& description, const FunctionPtr& createDefaultConfigCallback = nullptr)
+m [factory] ServerTypePtr ServerType(const StringPtr& id, const StringPtr& name, const StringPtr& description, const PropertyObjectPtr& defaultConfig = PropertyObject())

25.04.2024
Description:
  - Add mirrored device base implementation as a general approach to manage streaming sources for configuration enabled devices

+ [interface] IMirroredDevice
+ [function] IMirroredDevice::getStreamingSources(IList** streamingSources)

+ [interface] IMirroredDeviceConfig
+ [function] IMirroredDeviceConfig::addStreamingSource(IStreaming* streamingSource)
+ [function] IMirroredDeviceConfig::removeStreamingSource(IString* streamingConnectionString)

23.04.2024
Description:
  - Adding addresses in ServerCapability
+ [function] IServerCapabilityConfig::addAddress(IString* address)
+ [function] IServerCapability::getAddresses(IList** addresses)

22.04.2024
Description:
  - Fix reserved keyword clashes with Delphi bindings
- [function] IPermissionsBuilder::set(StringPtr groupId, PermissionMaskBuilderPtr permissions)
+ [function] IPermissionsBuilder::assign(StringPtr groupId, PermissionMaskBuilderPtr permissions)
