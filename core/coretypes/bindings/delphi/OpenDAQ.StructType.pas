//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (DelphiGenerator v4.0.1) on 03.10.2023 11:49:54.
// </auto-generated>
//------------------------------------------------------------------------------
unit OpenDAQ.StructType;

interface
uses
  OpenDAQ.CoreTypes,
  OpenDAQ.ObjectPtr,
  OpenDAQ.TType,
  OpenDAQ.TString,
  OpenDAQ.List,
  OpenDAQ.ProxyValue;

type
  {$MINENUMSIZE 4}

  IStructType = interface(IType)
  ['{2AC3D9FA-7059-5BEF-8439-351258DDBE72}']
    function GetFieldNames(out Names: IListObject): ErrCode; stdcall;
    function GetFieldDefaultValues(out DefaultValues: IListObject): ErrCode; stdcall;
    function GetFieldTypes(out Types: IListObject): ErrCode; stdcall;
  end;

  IStructTypePtr = interface(ITypePtr<IStructType>)
  ['{b5d61fa4-0545-55be-84a1-87d489078c69}']
    /// <summary>Gets the list of field names.</summary>
    /// <returns>The list of field names (String objects)<returns>
    function GetFieldNames(): IListPtr<IString>;

    /// <summary>Gets the list of field default values.</summary>
    /// <returns>The list of field default values (Base objects)<returns>
    function GetFieldDefaultValues(): IListPtr<IBaseObject>;

    /// <summary>Gets the list of field types.</summary>
    /// <returns>The list of field types (Type objects)<returns>
    function GetFieldTypes(): IListPtr<IType>;
  end;

  TStructTypePtr = class(TTypePtr<IStructType>, IStructTypePtr, IStructType)
  public
    constructor Create(Obj: IBaseObject); overload; override;
    constructor Create(Obj: IStructType); overload;

    // Factory constructors
    constructor Create(Name: IString; Names: IListObject; DefaultValues: IListObject; Types: IListObject) overload;
    constructor CreateNoDefaults(Name: IString; Names: IListObject; Types: IListObject) overload;
    constructor Create(Name: string; Names: IListObject; DefaultValues: IListObject; Types: IListObject) overload;
    constructor CreateNoDefaults(Name: string; Names: IListObject; Types: IListObject) overload;

    /// <summary>Gets the list of field names.</summary>
    /// <returns>The list of field names (String objects)<returns>
    function GetFieldNames(): IListPtr<IString>;

    /// <summary>Gets the list of field default values.</summary>
    /// <returns>The list of field default values (Base objects)<returns>
    function GetFieldDefaultValues(): IListPtr<IBaseObject>;

    /// <summary>Gets the list of field types.</summary>
    /// <returns>The list of field types (Type objects)<returns>
    function GetFieldTypes(): IListPtr<IType>;
  private
    function IStructType.GetFieldNames = Interface_GetFieldNames;
    function IStructType.GetFieldDefaultValues = Interface_GetFieldDefaultValues;
    function IStructType.GetFieldTypes = Interface_GetFieldTypes;

    function Interface_GetFieldNames(out Names: IListObject): ErrCode; stdcall;
    function Interface_GetFieldDefaultValues(out DefaultValues: IListObject): ErrCode; stdcall;
    function Interface_GetFieldTypes(out Types: IListObject): ErrCode; stdcall;
  end;

  function CreateStructType(out Obj: IStructType; Name: IString; Names: IListObject; DefaultValues: IListObject; Types: IListObject): ErrCode; cdecl;
  function CreateStructTypeNoDefaults(out Obj: IStructType; Name: IString; Names: IListObject; Types: IListObject): ErrCode; cdecl;

implementation
uses
  OpenDAQ.CoreTypes.Errors,
  OpenDAQ.Exceptions,
  OpenDAQ.CoreTypes.Config,
  OpenDAQ.SmartPtrRegistry;

  function CreateStructType(out Obj: IStructType; Name: IString; Names: IListObject; DefaultValues: IListObject; Types: IListObject): ErrCode; external DSCoreTypesDLL name 'createStructType';
  function CreateStructTypeNoDefaults(out Obj: IStructType; Name: IString; Names: IListObject; Types: IListObject): ErrCode; external DSCoreTypesDLL name 'createStructTypeNoDefaults';

constructor TStructTypePtr.Create(Obj: IStructType);
begin
  inherited Create(Obj);
end;

constructor TStructTypePtr.Create(Obj: IBaseObject);
begin
  inherited Create(Obj);
end;

constructor TStructTypePtr.Create(Name: IString; Names: IListObject; DefaultValues: IListObject; Types: IListObject);
var
  RawInterface: IStructType;
  Err: ErrCode;
begin
  Err := OpenDAQ.StructType.CreateStructType(RawInterface, Name, Names, DefaultValues, Types);
  CheckRtErrorInfo(Err);

  inherited Create(RawInterface);
end;

constructor TStructTypePtr.CreateNoDefaults(Name: IString; Names: IListObject; Types: IListObject);
var
  RawInterface: IStructType;
  Err: ErrCode;
begin
  Err := OpenDAQ.StructType.CreateStructTypeNoDefaults(RawInterface, Name, Names, Types);
  CheckRtErrorInfo(Err);

  inherited Create(RawInterface);
end;

constructor TStructTypePtr.Create(Name: string; Names: IListObject; DefaultValues: IListObject; Types: IListObject);
var
  RawInterface: IStructType;
  Err: ErrCode;
begin
  Err := OpenDAQ.StructType.CreateStructType(RawInterface, CreateStringFromDelphiString(Name), Names, DefaultValues, Types);
  CheckRtErrorInfo(Err);

  inherited Create(RawInterface);
end;

constructor TStructTypePtr.CreateNoDefaults(Name: string; Names: IListObject; Types: IListObject);
var
  RawInterface: IStructType;
  Err: ErrCode;
begin
  Err := OpenDAQ.StructType.CreateStructTypeNoDefaults(RawInterface, CreateStringFromDelphiString(Name), Names, Types);
  CheckRtErrorInfo(Err);

  inherited Create(RawInterface);
end;

function TStructTypePtr.GetFieldNames(): IListPtr<IString>;
var
  Err: ErrCode;
  Names: IListObject;
begin
  if not Assigned(FObject) then
    raise ERTInvalidParameterException.Create('Interface object is nil.');

  Err := FObject.GetFieldNames(Names);
  CheckRtErrorInfo(Err);

  Result := TListPtr<IString>.Create(Names);
end;

function TStructTypePtr.GetFieldDefaultValues(): IListPtr<IBaseObject>;
var
  Err: ErrCode;
  DefaultValues: IListObject;
begin
  if not Assigned(FObject) then
    raise ERTInvalidParameterException.Create('Interface object is nil.');

  Err := FObject.GetFieldDefaultValues(DefaultValues);
  CheckRtErrorInfo(Err);

  Result := TListPtr<IBaseObject>.Create(DefaultValues);
end;

function TStructTypePtr.GetFieldTypes(): IListPtr<IType>;
var
  Err: ErrCode;
  Types: IListObject;
begin
  if not Assigned(FObject) then
    raise ERTInvalidParameterException.Create('Interface object is nil.');

  Err := FObject.GetFieldTypes(Types);
  CheckRtErrorInfo(Err);

  Result := TListPtr<IType>.Create(Types);
end;

function TStructTypePtr.Interface_GetFieldNames(out Names: IListObject): ErrCode; stdcall;
begin
  Result := FObject.GetFieldNames(Names);
end;

function TStructTypePtr.Interface_GetFieldDefaultValues(out DefaultValues: IListObject): ErrCode; stdcall;
begin
  Result := FObject.GetFieldDefaultValues(DefaultValues);
end;

function TStructTypePtr.Interface_GetFieldTypes(out Types: IListObject): ErrCode; stdcall;
begin
  Result := FObject.GetFieldTypes(Types);
end;

initialization
  TSmartPtrRegistry.RegisterPtr(IStructType, IStructTypePtr, TStructTypePtr);

finalization
  TSmartPtrRegistry.UnregisterPtr(IStructType);

end.
