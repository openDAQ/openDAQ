//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (DelphiGenerator v4.0.1) on 03.10.2023 11:36:01.
// </auto-generated>
//------------------------------------------------------------------------------
unit OpenDAQ.TType;

interface
uses
  OpenDAQ.CoreTypes,
  OpenDAQ.ObjectPtr,
  OpenDAQ.ProxyValue,
  OpenDAQ.TString;

type
  {$MINENUMSIZE 4}

  IType = interface(IBaseObject)
  ['{C7383ABD-1285-5E81-9E8B-059ED35F91C5}']
    function GetName(out TypeName: IString): ErrCode; stdcall;
  end;

  ITypePtr<InterfaceType: IType> = interface;
  ITypePtr = ITypePtr<IType>;

  ITypePtr<InterfaceType: IType> = interface(IObjectPtr<InterfaceType>)
  ['{1f469567-64e2-5c53-bff5-0538080701f5}']
    /// <summary>Gets the name of the Type</summary>
    /// <returns>The name of the Type.<returns>
    function GetName(): IStringPtr;
  end;

  TTypePtr<InterfaceType: IType> = class(TObjectPtr<InterfaceType>, ITypePtr<InterfaceType>, IType)
  public
    constructor Create(Obj: IBaseObject); overload; override;
    constructor Create(Obj: InterfaceType); overload;

    /// <summary>Gets the name of the Type</summary>
    /// <returns>The name of the Type.<returns>
    function GetName(): IStringPtr;
  private
    function IType.GetName = Interface_GetName;

    function Interface_GetName(out TypeName: IString): ErrCode; stdcall;
  end;

  TTypePtr = TTypePtr<IType>;


implementation
uses
  OpenDAQ.CoreTypes.Errors,
  OpenDAQ.Exceptions,
  OpenDAQ.SmartPtrRegistry;


constructor TTypePtr<InterfaceType>.Create(Obj: InterfaceType);
begin
  inherited Create(Obj);
end;

constructor TTypePtr<InterfaceType>.Create(Obj: IBaseObject);
begin
  inherited Create(Obj);
end;

function TTypePtr<InterfaceType>.GetName(): IStringPtr;
var
  Err: ErrCode;
  TypeName: IString;
begin
  if not Assigned(FObject) then
    raise ERTInvalidParameterException.Create('Interface object is nil.');

  Err := FObject.GetName(TypeName);
  CheckRtErrorInfo(Err);

  Result := TStringPtr.Create(TypeName);
end;

function TTypePtr<InterfaceType>.Interface_GetName(out TypeName: IString): ErrCode; stdcall;
begin
  Result := FObject.GetName(TypeName);
end;

initialization
  TSmartPtrRegistry.RegisterPtr(IType, ITypePtr, TTypePtr);

finalization
  TSmartPtrRegistry.UnregisterPtr(IType);

end.
