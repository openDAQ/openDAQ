diff --git a/tools/pybind11Common.cmake b/tools/pybind11Common.cmake
index 0c985bc..d7ddf32 100644
--- a/tools/pybind11Common.cmake
+++ b/tools/pybind11Common.cmake
@@ -393,3 +393,18 @@ function(pybind11_strip target_name)
       COMMAND ${CMAKE_STRIP} ${x_opt} $<TARGET_FILE:${target_name}>)
   endif()
 endfunction()
+
+# ---------------------- pybind11_strip_unneeded -----------------------------
+function(pybind11_strip_unneeded target_name)
+  # Strip unnecessary sections of the binary on Linux with WA for "Archive has no index" issue
+  if(CMAKE_STRIP)
+    if(NOT APPLE AND NOT MSVC)
+      add_custom_command(
+        TARGET ${target_name}
+        POST_BUILD
+        COMMAND ${CMAKE_STRIP} --strip-unneeded $<TARGET_FILE:${target_name}>)
+    endif()
+  endif()
+endfunction()
+
+
diff --git a/tools/pybind11NewTools.cmake b/tools/pybind11NewTools.cmake
index 7d7424a..c12f021 100644
--- a/tools/pybind11NewTools.cmake
+++ b/tools/pybind11NewTools.cmake
@@ -1,3 +1,4 @@
+
 # tools/pybind11NewTools.cmake -- Build system for the pybind11 modules
 #
 # Copyright (c) 2020 Wenzel Jakob <wenzel@inf.ethz.ch> and Henry Schreiner
@@ -173,7 +174,7 @@ endif()
 # WITH_SOABI is passed on to python_add_library.
 function(pybind11_add_module target_name)
   cmake_parse_arguments(PARSE_ARGV 1 ARG
-                        "STATIC;SHARED;MODULE;THIN_LTO;OPT_SIZE;NO_EXTRAS;WITHOUT_SOABI" "" "")
+                        "STATIC;SHARED;MODULE;THIN_LTO;STRIP_UNNEEDED;OPT_SIZE;NO_EXTRAS;WITHOUT_SOABI" "" "")
 
   if(ARG_STATIC)
     set(lib_type STATIC)
@@ -237,7 +238,11 @@ function(pybind11_add_module target_name)
   string(TOUPPER "${CMAKE_BUILD_TYPE}" uppercase_CMAKE_BUILD_TYPE)
   if(NOT MSVC AND NOT "${uppercase_CMAKE_BUILD_TYPE}" MATCHES DEBUG|RELWITHDEBINFO)
     # Strip unnecessary sections of the binary on Linux/macOS
-    pybind11_strip(${target_name})
+    if(ARG_STRIP_UNNEEDED)
+      pybind11_strip_unneeded(${target_name})
+    else()
+      pybind11_strip(${target_name})
+    endif()
   endif()
 
   if(MSVC)
diff --git a/tools/pybind11Tools.cmake b/tools/pybind11Tools.cmake
index 66ad00a..b458165 100644
--- a/tools/pybind11Tools.cmake
+++ b/tools/pybind11Tools.cmake
@@ -157,13 +157,15 @@ endfunction()
 #                     [NO_EXTRAS] [THIN_LTO] [OPT_SIZE] source1 [source2 ...])
 #
 function(pybind11_add_module target_name)
-  set(options "MODULE;SHARED;EXCLUDE_FROM_ALL;NO_EXTRAS;SYSTEM;THIN_LTO;OPT_SIZE")
+  set(options "MODULE;SHARED;STATIC;EXCLUDE_FROM_ALL;NO_EXTRAS;STRIP_UNNEEDED;SYSTEM;THIN_LTO;OPT_SIZE")
   cmake_parse_arguments(ARG "${options}" "" "" ${ARGN})
 
   if(ARG_MODULE AND ARG_SHARED)
     message(FATAL_ERROR "Can't be both MODULE and SHARED")
   elseif(ARG_SHARED)
     set(lib_type SHARED)
+  elseif(ARG_STATIC)
+    set(lib_type STATIC)
   else()
     set(lib_type MODULE)
   endif()
@@ -215,7 +217,11 @@ function(pybind11_add_module target_name)
   # Use case-insensitive comparison to match the result of $<CONFIG:cfgs>
   string(TOUPPER "${CMAKE_BUILD_TYPE}" uppercase_CMAKE_BUILD_TYPE)
   if(NOT MSVC AND NOT "${uppercase_CMAKE_BUILD_TYPE}" MATCHES DEBUG|RELWITHDEBINFO)
-    pybind11_strip(${target_name})
+    if(ARG_STRIP_UNNEEDED)
+      pybind11_strip_unneeded(${target_name})
+    else()
+      pybind11_strip(${target_name})
+    endif()
   endif()
 
   if(MSVC)
