/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <condition_variable>
#include <memory>
#include <mutex>
#include <queue>
#include <thread>

#include <coretypes/filesystem.h>
#include <opendaq/opendaq.h>

#include <basic_csv_recorder_module/common.h>
#include <basic_csv_recorder_module/csv_writer.h>
#include <basic_csv_recorder_module/basic_csv_recorder_signal.h>

BEGIN_NAMESPACE_OPENDAQ_BASIC_CSV_RECORDER_MODULE

/*!
 * A worker thread which records packet data to a CSV file. The worker is implemented as a
 * producer/consumer queue. The caller is the producer, enqueuing packets to be recorded. The
 * caller is then free to proceed with other activities. The background thread is the consumer,
 * dequeuing packets and recording them to the CSV file.
 *
 * If an I/O or data processing error occurs, the CSV file is closed, and all future packets
 * are ignored. A warning message is logged to the console.
 */
class BasicCsvRecorderThread
{
    public:

        /*!
         * Opens a CSV file for the specified signal, and launches a worker thread in the
         * background.
         *
         * @param path The directory in which to open a CSV file for this signal. The filename
         *     is generated by sanitizing the @p signal object's global ID and appending a ".csv"
         *     suffix.
         * @param signal The openDAQ signal object to be recorded.
         * @param loggerComponent The openDAQ logger object to use.
         */
        BasicCsvRecorderThread(
            fs::path path,
            const SignalPtr& signal,
            const LoggerComponentPtr& loggerComponent);

        /*!
         * Stops the worker thread and closes the CSV file.
         */
        ~BasicCsvRecorderThread();

        /*!
         * Enqueues a packet (either an event packet or a data packet) to be recorded. A reference
         * to this packet object will be held internally in the work queue. The reference is
         * released when the worker thread has recorded the data or when this object is destroyed.
         *
         * @param packet The packet to record.
         */
        void post(const PacketPtr& packet);

    private:

        void threadMain();

        LoggerComponentPtr loggerComponent;

        std::unique_ptr<BasicCsvRecorderSignal> recorderSignal;

        std::mutex mutex;
        std::condition_variable cv;

        std::queue<PacketPtr> queue;

        std::thread thread;
};

END_NAMESPACE_OPENDAQ_BASIC_CSV_RECORDER_MODULE
