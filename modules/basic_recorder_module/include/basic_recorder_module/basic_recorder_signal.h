/*
 * Copyright 2022-2025 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <filesystem>

#include <opendaq/opendaq.h>

#include <basic_recorder_module/common.h>
#include <basic_recorder_module/csv_writer.h>

BEGIN_NAMESPACE_OPENDAQ_BASIC_RECORDER_MODULE

/**
 * A signal being recorded by a BasicRecorderImpl. Signal objects own a CsvWriter object and
 * provide functions for handling packets received for those signals.
 *
 * @todo Only scalar integer and floating-point sample types are supported. Packets containing
 *     unsupported sample types are silently ignored and not recorded.
 * @todo This implementation could be significantly optimized. Some possibilities are described
 *     in the TODO sections of specific members.
 */
class BasicRecorderSignal
{
    public:

        /**
         * Creates a new recorded signal object. A CSV file is opened and a header line is printed
         * to it containing the names of the associated domain signal and the signal itself.
         *
         * @todo Using the signal's global ID results in bizarre filenames, but there is no
         *     simple way to get a better result. In the future, all recorded signals could be
         *     inspected together to remove common elements from their IDs; or the user can be
         *     given explicit control over the filenames; or tags could be used to declaratively
         *     specify saner filenames for signals.
         *
         * @param path The directory in which to open a CSV file for this signal. The filename
         *     is generated by sanitizing the @p signal object's global ID and appending a ".csv"
         *     suffix.
         * @param signal The openDAQ signal object to be recorded.
         *
         * @throws std::ios_base::failure The file could not be opened.
         * @throws std::ios_base::failure The header line could not be written to the CSV file due
         *     to an I/O error.
         */
        BasicRecorderSignal(std::filesystem::path path, const SignalPtr& signal);

        /**
         * Records the values in all packets in the port's input queue to the CSV file. The
         * recorded packets are dequeued.
         *
         * @param port The input port whose input queue contains the packets to record.
         *
         * @throws std::ios_base::failure A data line could not be written to the CSV file due to
         *     an I/O error.
         */
        void onPacketReceived(const InputPortPtr& port);

    private:

        /**
         * Records the values the specified packet to the CSV file.
         *
         * @todo Templated writer functions are selected based on the packet's sample type. This
         *     involves inspecting the descriptor for every packet. This could be optimized by
         *     inspecting the descriptor only when it changes, and caching pointers to the
         *     appropriate writer function.
         *
         * @param packet The data packet to record.
         *
         * @throws std::ios_base::failure A data line could not be written to the CSV file due to
         *     an I/O error.
         */
        void onDataPacketReceived(const DataPacketPtr packet);

        CsvWriter writer;
};

END_NAMESPACE_OPENDAQ_BASIC_RECORDER_MODULE
