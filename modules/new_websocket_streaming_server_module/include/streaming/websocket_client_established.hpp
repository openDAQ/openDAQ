#pragma once

#include <array>
#include <chrono>
#include <cstddef>
#include <cstdint>
#include <string>

#include <boost/asio.hpp>

#include <nlohmann/json.hpp>

#include "websocket_client.hpp"

namespace daq::ws_streaming
{
    /**
     * A websocket_client class for handling WebSocket streaming clients that have completed the
     * WebSocket upgrade negotiation and are able to send and receive WebSocket frames. Such
     * clients are capable of being added to WebSocketSignalListenerImpl's client list.
     *
     * Established clients also provide functions for transmitting WebSocket Streaming Protocol
     * data and metadata packets. These functions can be called by the WebSocketSignalListenerImpl
     * (possibly via a signal_writer) to transmit streaming data.
     */
    class websocket_client_established : public websocket_client
    {
        public:

            /**
             * Constructs a new established client object. A unique WebSocket Streaming Protocol
             * stream ID is generated for the client based on its IP address and port number. The
             * client socket's TCP send buffer is also enlarged to accommodate a reasonable amount
             * of streaming data.
             *
             * @todo Stream IDs are probably not generated correctly for IPv6 clients.
             * @todo The size of the requested TCP send buffer is hard-coded.
             *
             * @param socket The client's socket. Ownership of the socket is transferred to the
             *     new object. After the call, @p socket no longer refers to a socket.
             */
            websocket_client_established(boost::asio::ip::tcp::socket&& socket);

            /**
             * Reads and processes incoming webSocket frames. See websocket_client::service(). The
             * only implemented frame type is currently the close frame. Receiving this frame
             * causes this function to return false. All other frames are silently discarded.
             *
             * @return false if a socket error occurred, if a WebSocket close frame was received,
             *     or if a WebSocket frame is received which is too large to fit in the fixed-size
             *     read buffer. In these cases the caller should destroy the client object
             *     (thereby disconnecting the client). Otherwise, returns true.
             */
            bool service() override;

            /**
             * Transmits a WebSocket Streaming Protocol metadata packet.
             *
             * @perfcrit This function is called once per subscribed client for every openDAQ
             *     signal descriptor change detected.
             *
             * @param signo The Streaming Protocol "signo" value with which the metadata is
             *     associated.
             * @param metadata A reference to a JSON object containing the metadata to send.
             *
             * @return false if a socket error occurred. In this case the caller should destroy
             *     the client object (thereby disconnecting the client). Otherwise, returns true.
             */
            bool send_metadata(unsigned signo, const nlohmann::json& metadata);

            /**
             * Transmits a WebSocket Streaming Protocol data packet. Scatter-gather is used to
             * assemble the packet from its components (headers and payload segment) without
             * copying. 
             *
             * @perfcrit This function is called once for every transmitted WebSocket Streaming
             *     Protocol data packet.
             *
             * @param signo The Streaming Protocol "signo" value with which the data is
             *     associated.
             * @param data A pointer to the data to send. This pointer may be null if @p size is
             *     0.
             * @param size The number of bytes pointed to by @p data.
             *
             * @return false if a socket error occurred. In this case the caller should destroy
             *     the client object (thereby disconnecting the client). Otherwise, returns true.
             */
            bool send_data(unsigned signo,
                const void *data, std::size_t size) noexcept;

            /**
             * Gets the WebSocket Streaming Protocol stream ID for this client. This value is
             * generated by the constructor based on the client's IP address and port number.
             *
             * @return The WebSocket Streaming Protocol stream ID for this client.
             */
            const std::string& get_stream_id() const noexcept { return stream_id; }

        protected:

            /**
             * The fixed size of the buffer used to read incoming WebSocket frames. This buffer
             * does not grow, so this value sets an upper bound on the size of frames the server
             * can tolerate from the client; larger frames will result in an error and cause the
             * client to be disconnected.
             */
            static constexpr std::size_t read_buffer_size = 16 * 1024;

            /**
             * A fixed-size buffer used to read incoming WebSocket frames. Data from the socket
             * is read into the buffer at offset buffered_bytes. Data that has been decoded is
             * removed from the buffer by shifting the remaining data left using std::memmove().
             */
            std::array<std::uint8_t, read_buffer_size> read_buffer;

            /**
             * The number of bytes currently stored in read_buffer.
             */
            std::size_t buffered_bytes = 0;

            /**
             * The WebSocket Streaming Protocol stream ID. This value is generated by the
             * constructor based on the client's IP address and port number.
             */
            std::string stream_id;
    };
}
