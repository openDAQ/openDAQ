From 3d4dfdcaad4100009a8cdb06e16bb81920416867 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?An=C5=BEe=20=C5=A0kerjanc?= <anze.skerjanc@dewesoft.com>
Date: Mon, 28 Jul 2025 13:31:18 +0200
Subject: [PATCH] Test optimization

---
 .../reader/include/opendaq/typed_reader.h     | 16 ++--
 core/opendaq/reader/src/signal_reader.cpp     |  5 +-
 core/opendaq/reader/src/typed_reader.cpp      | 90 ++++++++++++++++---
 3 files changed, 87 insertions(+), 24 deletions(-)

diff --git a/core/opendaq/reader/include/opendaq/typed_reader.h b/core/opendaq/reader/include/opendaq/typed_reader.h
index c5216a7e..5b555f6e 100644
--- a/core/opendaq/reader/include/opendaq/typed_reader.h
+++ b/core/opendaq/reader/include/opendaq/typed_reader.h
@@ -19,6 +19,7 @@
 #include <opendaq/data_descriptor_ptr.h>
 #include <opendaq/reader_domain_info.h>
 #include <opendaq/sample_reader.h>
+#include <opendaq/data_packet_ptr.h>
 
 BEGIN_NAMESPACE_OPENDAQ
 
@@ -31,12 +32,11 @@ public:
     virtual ~Reader() = default;
 
     virtual ErrCode readData(void* inputBuffer, SizeT offset, void** outputBuffer, SizeT count) = 0;
-    virtual std::unique_ptr<Comparable> readStart(void* inputBuffer, SizeT offset, const ReaderDomainInfo& domainInfo) = 0;
+    virtual std::unique_ptr<Comparable> readStart(const DataPacketPtr& packet, SizeT offset, const ReaderDomainInfo& domainInfo) = 0;
     
     virtual SizeT getOffsetTo(const ReaderDomainInfo& domainInfo,
                               const Comparable& start,
-                              void* inputBuffer,
-                              SizeT size,
+                              const DataPacketPtr& packet,
                               std::chrono::system_clock::rep* firstSampleAbsoluteTime = nullptr) = 0;
     virtual bool handleDescriptorChanged(DataDescriptorPtr& descriptor, ReadMode mode) = 0;
 
@@ -65,15 +65,14 @@ public:
         return DAQ_MAKE_ERROR_INFO(OPENDAQ_ERR_INVALIDSTATE);
     }
 
-    virtual std::unique_ptr<Comparable> readStart(void* inputBuffer, SizeT offset, const ReaderDomainInfo& domainInfo) override
+    virtual std::unique_ptr<Comparable> readStart(const DataPacketPtr& packet, SizeT offset, const ReaderDomainInfo& domainInfo) override
     {
         DAQ_THROW_EXCEPTION(InvalidStateException);
     }
 
     SizeT getOffsetTo(const ReaderDomainInfo& domainInfo,
                       const Comparable& start,
-                      void* inputBuffer,
-                      SizeT size,
+                      const DataPacketPtr& packet,
                       std::chrono::system_clock::rep* firstSampleAbsoluteTime = nullptr) override
     {
         DAQ_THROW_EXCEPTION(InvalidStateException);
@@ -104,12 +103,11 @@ public:
     using Reader::Reader;
 
     virtual ErrCode readData(void* inputBuffer, SizeT offset, void** outputBuffer, SizeT count) override;
-    virtual std::unique_ptr<Comparable> readStart(void* inputBuffer, SizeT offset, const ReaderDomainInfo& domainInfo) override;
+    virtual std::unique_ptr<Comparable> readStart(const DataPacketPtr& packet, SizeT offset, const ReaderDomainInfo& domainInfo) override;
 
     virtual SizeT getOffsetTo(const ReaderDomainInfo& domainInfo,
                               const Comparable& start,
-                              void* inputBuffer,
-                              SizeT size,
+                              const DataPacketPtr& packet,
                               std::chrono::system_clock::rep* firstSampleAbsoluteTime) override;
 
     virtual bool handleDescriptorChanged(DataDescriptorPtr& descriptor, ReadMode mode) override;
diff --git a/core/opendaq/reader/src/signal_reader.cpp b/core/opendaq/reader/src/signal_reader.cpp
index adda18f1..b25c3e69 100644
--- a/core/opendaq/reader/src/signal_reader.cpp
+++ b/core/opendaq/reader/src/signal_reader.cpp
@@ -233,7 +233,7 @@ std::unique_ptr<Comparable> SignalReader::readStartDomain()
         DAQ_THROW_EXCEPTION(InvalidStateException, "Packet must have a domain packet assigned!");
     }
 
-    return domainReader->readStart(domainPacket.getData(), info.prevSampleIndex, domainInfo);
+    return domainReader->readStart(domainPacket, info.prevSampleIndex, domainInfo);
 }
 
 bool SignalReader::isFirstPacketEvent()
@@ -414,8 +414,7 @@ bool SignalReader::sync(const Comparable& commonStart, std::chrono::system_clock
         info.prevSampleIndex = domainReader->getOffsetTo(
             domainInfo,
             commonStart,
-            domainPacket.getData(),
-            domainPacket.getSampleCount(),
+            domainPacket,
             &cachedFirstTimestamp
         );
 
diff --git a/core/opendaq/reader/src/typed_reader.cpp b/core/opendaq/reader/src/typed_reader.cpp
index 26b74505..65d8c3a2 100644
--- a/core/opendaq/reader/src/typed_reader.cpp
+++ b/core/opendaq/reader/src/typed_reader.cpp
@@ -143,7 +143,7 @@ static bool isSampleTypeConvertibleTo(SampleType sampleType)
 }
 
 template <typename ReadType>
-std::unique_ptr<Comparable> TypedReader<ReadType>::readStart(void* inputBuffer, SizeT offset, const ReaderDomainInfo& domainInfo)
+std::unique_ptr<Comparable> TypedReader<ReadType>::readStart(const DataPacketPtr& packet, SizeT offset, const ReaderDomainInfo& domainInfo)
 {
     if constexpr (std::is_same_v<void*, ReadType>)
     {
@@ -152,14 +152,34 @@ std::unique_ptr<Comparable> TypedReader<ReadType>::readStart(void* inputBuffer,
     }
     else
     {
-        ReadType startDomain{};
-        void* data = &startDomain;
+        if (packet.getDataDescriptor().getRule().getType() == DataRuleType::Linear &&
+            dataSampleType == SampleType::Int64 &&
+            domainInfo.multiplier.getNumerator() == 1 &&
+            domainInfo.multiplier.getDenominator() == 1 &&
+            valuesPerSample == 1) // getOffsetToData
+        {
+            const DataRulePtr& dataRule = packet.getDataDescriptor().getRule();
+            NumberPtr packetOffset = packet.getOffset();
+            const auto& parameters = dataRule.getParameters();
+            const int64_t scale = static_cast<int64_t>(parameters.get("delta"));
+            int64_t packetStart = static_cast<int64_t>(parameters.get("start"));
+            packetStart = packetStart + packetOffset.getIntValue();
+
+            ReadType startDomain = scale * offset + packetStart;
+            return std::make_unique<ComparableValue<ReadType>>(startDomain, domainInfo);
+        }
+        else
+        {
+            void* inputBuffer = packet.getData();
+            ReadType startDomain{};
+            void* data = &startDomain;
 
-        setTransformIgnore(true);
-        readData(inputBuffer, offset, &data, 1);
-        setTransformIgnore(false);
+            setTransformIgnore(true);
+            readData(inputBuffer, offset, &data, 1);
+            setTransformIgnore(false);
 
-        return std::make_unique<ComparableValue<ReadType>>(startDomain, domainInfo);
+            return std::make_unique<ComparableValue<ReadType>>(startDomain, domainInfo);
+        }
     }
 }
 
@@ -213,12 +233,57 @@ ErrCode TypedReader<ReadType>::readData(void* inputBuffer, SizeT offset, void**
 template <typename ReadType>
 SizeT TypedReader<ReadType>::getOffsetTo(const ReaderDomainInfo& domainInfo,
                                          const Comparable& start,
-                                         void* inputBuffer,
-                                         SizeT size,
+                                         const DataPacketPtr& packet,
                                          std::chrono::system_clock::rep* firstSampleAbsoluteTime)
 {
-    switch (dataSampleType)
+    if (packet.getDataDescriptor().getRule().getType() == DataRuleType::Linear &&
+        dataSampleType == SampleType::Int64 &&
+        domainInfo.multiplier.getNumerator() == 1 &&
+        domainInfo.multiplier.getDenominator() == 1 &&
+        valuesPerSample == 1) // getOffsetToData
     {
+        const DataRulePtr& dataRule = packet.getDataDescriptor().getRule();
+        NumberPtr packetOffset = packet.getOffset();
+        SizeT sampleCount = packet.getSampleCount();
+
+        if (sampleCount == 0)
+            return static_cast<SizeT>(-1);
+
+        const auto& parameters = dataRule.getParameters();
+        const int64_t scale = static_cast<int64_t>(parameters.get("delta"));
+        int64_t offset = static_cast<int64_t>(parameters.get("start"));
+        offset = offset + packetOffset.getIntValue();
+
+        auto* startV = dynamic_cast<const ComparableValue<int64_t>*>(&start);
+        // Should always be non-negative
+        auto startValue = GreaterEqual<int64_t>::GetStart(startV->getValue(), -domainInfo.offset);
+
+        int64_t diff = startValue - offset;
+        if (diff < 0)
+            return static_cast<SizeT>(-1);
+
+        int64_t index = (diff + scale - 1) / scale;
+        if (index < (int64_t)sampleCount)
+        {
+            if (firstSampleAbsoluteTime)
+            {
+                using namespace reader;
+                auto readValue = scale * index + offset;
+                auto readValueSysTime = toSysTime(readValue, domainInfo.epoch, domainInfo.resolution);
+                *firstSampleAbsoluteTime = readValueSysTime.time_since_epoch().count();
+            }
+            return index;
+        }
+
+        return static_cast<SizeT>(-1);
+    }
+    else
+    {
+
+        void* inputBuffer = packet.getData();
+        SizeT size = packet.getSampleCount();
+        switch (dataSampleType)
+        {
         case SampleType::Float32:
             return getOffsetToData<SampleTypeToType<SampleType::Float32>::Type>(domainInfo, start, inputBuffer, size, firstSampleAbsoluteTime);
         case SampleType::Float64:
@@ -256,9 +321,10 @@ SizeT TypedReader<ReadType>::getOffsetTo(const ReaderDomainInfo& domainInfo,
             return DAQ_MAKE_ERROR_INFO(OPENDAQ_ERR_INVALIDSTATE, "Packet with Null sample-type samples encountered");
         case SampleType::_count:
             break;
-    }
+        }
 
-    return DAQ_MAKE_ERROR_INFO(OPENDAQ_ERR_INVALID_SAMPLE_TYPE, "Packet with invalid sample-type samples encountered");
+        return DAQ_MAKE_ERROR_INFO(OPENDAQ_ERR_INVALID_SAMPLE_TYPE, "Packet with invalid sample-type samples encountered");
+    }
 }
 
 template <typename TReadType>
-- 
2.41.0.windows.1

