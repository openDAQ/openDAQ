//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:/Dewesoft/C++/git/Blueberry6/shared/tools/RTGen/src\DelphiParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class DelphiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		String=1, Dot=2, Unit=3, TypeBlock=4, AccessModifier=5, Interface=6, Implementation=7, 
		Uses=8, Function=9, Procedure=10, End=11, Out=12, Var=13, HashTag=14, 
		Quote=15, QuoteSingle=16, Hyphen=17, LessThan=18, GreaterThan=19, Caret=20, 
		LParen=21, RParen=22, LBrace=23, RBrace=24, LBracket=25, RBracket=26, 
		Comma=27, Slash=28, Semicolon=29, AssignEquals=30, Static=31, Const=32, 
		TypeDef=33, Struct=34, Class=35, Public=36, Private=37, Protected=38, 
		Virtual=39, Enum=40, Ampersand=41, Star=42, Colon=43, DoubleColon=44, 
		Exclamation=45, CommentStart=46, RtCommentBlock=47, BlockCommentStart=48, 
		BlockCommentEnd=49, PrimitiveValue=50, Pipe=51, CallingConvention=52, 
		VarModifiers=53, Identifier=54, HexadecimalConstant=55, Number=56, Int=57, 
		AlphaNumeric=58, Boolean=59, Whitespace=60, Comment=61, BlockComment=62, 
		Newline=63, Implementations=64, StringDouble=65;
	public const int
		RULE_start = 0, RULE_unit = 1, RULE_usings = 2, RULE_typeDecls = 3, RULE_globalFunctionDecl = 4, 
		RULE_globalProcedureDecl = 5, RULE_delegateDecl = 6, RULE_typeDecl = 7, 
		RULE_pointerType = 8, RULE_enumTypeDecl = 9, RULE_enumTypePart = 10, RULE_interfaceDecl = 11, 
		RULE_functionDecl = 12, RULE_functionParams = 13, RULE_functionParam = 14, 
		RULE_procedureDecl = 15, RULE_namespace = 16, RULE_guidDecl = 17, RULE_implementations = 18, 
		RULE_rtComment = 19, RULE_rtFuncs = 20, RULE_rtFunc = 21, RULE_rtArguments = 22, 
		RULE_rtArg = 23, RULE_rtLiteral = 24;
	public static readonly string[] ruleNames = {
		"start", "unit", "usings", "typeDecls", "globalFunctionDecl", "globalProcedureDecl", 
		"delegateDecl", "typeDecl", "pointerType", "enumTypeDecl", "enumTypePart", 
		"interfaceDecl", "functionDecl", "functionParams", "functionParam", "procedureDecl", 
		"namespace", "guidDecl", "implementations", "rtComment", "rtFuncs", "rtFunc", 
		"rtArguments", "rtArg", "rtLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'.'", "'unit'", "'type'", null, "'interface'", "'implementation'", 
		"'uses'", "'function'", "'procedure'", "'end'", "'out'", "'var'", "'#'", 
		"'\"'", "'''", "'-'", "'<'", "'>'", "'^'", "'('", "')'", "'{'", "'}'", 
		"'['", "']'", "','", "'/'", "';'", "'='", "'static'", "'const'", "'typedef'", 
		"'struct'", "'class'", "'public'", "'private'", "'protected'", "'virtual'", 
		"'enum'", "'&'", "'*'", "':'", "'::'", "'!'", "'//'", "'/*#'", "'/*'", 
		"'*/'", null, "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "String", "Dot", "Unit", "TypeBlock", "AccessModifier", "Interface", 
		"Implementation", "Uses", "Function", "Procedure", "End", "Out", "Var", 
		"HashTag", "Quote", "QuoteSingle", "Hyphen", "LessThan", "GreaterThan", 
		"Caret", "LParen", "RParen", "LBrace", "RBrace", "LBracket", "RBracket", 
		"Comma", "Slash", "Semicolon", "AssignEquals", "Static", "Const", "TypeDef", 
		"Struct", "Class", "Public", "Private", "Protected", "Virtual", "Enum", 
		"Ampersand", "Star", "Colon", "DoubleColon", "Exclamation", "CommentStart", 
		"RtCommentBlock", "BlockCommentStart", "BlockCommentEnd", "PrimitiveValue", 
		"Pipe", "CallingConvention", "VarModifiers", "Identifier", "HexadecimalConstant", 
		"Number", "Int", "AlphaNumeric", "Boolean", "Whitespace", "Comment", "BlockComment", 
		"Newline", "Implementations", "StringDouble"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DelphiParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DelphiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DelphiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DelphiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(DelphiParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingsContext usings() {
			return GetRuleContext<UsingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclsContext typeDecls() {
			return GetRuleContext<TypeDeclsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementationsContext implementations() {
			return GetRuleContext<ImplementationsContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			unit();
			State = 51;
			Match(Interface);
			State = 52;
			usings();
			State = 53;
			typeDecls();
			State = 54;
			implementations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unit() { return GetToken(DelphiParser.Unit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(DelphiParser.Semicolon, 0); }
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_unit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(Unit);
			State = 57;
			@namespace();
			State = 58;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uses() { return GetToken(DelphiParser.Uses, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(DelphiParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DelphiParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DelphiParser.Comma, i);
		}
		public UsingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterUsings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitUsings(this);
		}
	}

	[RuleVersion(0)]
	public UsingsContext usings() {
		UsingsContext _localctx = new UsingsContext(Context, State);
		EnterRule(_localctx, 4, RULE_usings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(Uses);
			State = 61;
			@namespace();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 62;
				Match(Comma);
				State = 63;
				@namespace();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeBlock() { return GetToken(DelphiParser.TypeBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext[] typeDecl() {
			return GetRuleContexts<TypeDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl(int i) {
			return GetRuleContext<TypeDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelegateDeclContext[] delegateDecl() {
			return GetRuleContexts<DelegateDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelegateDeclContext delegateDecl(int i) {
			return GetRuleContext<DelegateDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFunctionDeclContext[] globalFunctionDecl() {
			return GetRuleContexts<GlobalFunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFunctionDeclContext globalFunctionDecl(int i) {
			return GetRuleContext<GlobalFunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalProcedureDeclContext[] globalProcedureDecl() {
			return GetRuleContexts<GlobalProcedureDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalProcedureDeclContext globalProcedureDecl(int i) {
			return GetRuleContext<GlobalProcedureDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext[] rtComment() {
			return GetRuleContexts<RtCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext rtComment(int i) {
			return GetRuleContext<RtCommentContext>(i);
		}
		public TypeDeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterTypeDecls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitTypeDecls(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclsContext typeDecls() {
		TypeDeclsContext _localctx = new TypeDeclsContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDecls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(TypeBlock);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Procedure) | (1L << CommentStart) | (1L << Identifier))) != 0)) {
				{
				State = 77;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 72;
					typeDecl();
					}
					break;
				case 2:
					{
					State = 73;
					delegateDecl();
					}
					break;
				case 3:
					{
					State = 74;
					globalFunctionDecl();
					}
					break;
				case 4:
					{
					State = 75;
					globalProcedureDecl();
					}
					break;
				case 5:
					{
					State = 76;
					rtComment();
					}
					break;
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalFunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public GlobalFunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalFunctionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterGlobalFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitGlobalFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public GlobalFunctionDeclContext globalFunctionDecl() {
		GlobalFunctionDeclContext _localctx = new GlobalFunctionDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalFunctionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			functionDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalProcedureDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclContext procedureDecl() {
			return GetRuleContext<ProcedureDeclContext>(0);
		}
		public GlobalProcedureDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalProcedureDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterGlobalProcedureDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitGlobalProcedureDecl(this);
		}
	}

	[RuleVersion(0)]
	public GlobalProcedureDeclContext globalProcedureDecl() {
		GlobalProcedureDeclContext _localctx = new GlobalProcedureDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_globalProcedureDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			procedureDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DelphiParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(DelphiParser.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public DelegateDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterDelegateDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitDelegateDecl(this);
		}
	}

	[RuleVersion(0)]
	public DelegateDeclContext delegateDecl() {
		DelegateDeclContext _localctx = new DelegateDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(Identifier);
			State = 87;
			Match(AssignEquals);
			State = 88;
			functionDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DelphiParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DelphiParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(DelphiParser.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(DelphiParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeDeclContext enumTypeDecl() {
			return GetRuleContext<EnumTypeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclContext interfaceDecl() {
			return GetRuleContext<InterfaceDeclContext>(0);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(Identifier);
			State = 91;
			Match(AssignEquals);
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 92;
				Match(Identifier);
				}
				break;
			case Caret:
				{
				State = 93;
				pointerType();
				}
				break;
			case LParen:
				{
				State = 94;
				enumTypeDecl();
				}
				break;
			case Interface:
				{
				State = 95;
				interfaceDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 98;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(DelphiParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DelphiParser.Identifier, 0); }
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(Caret);
			State = 101;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(DelphiParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypePartContext[] enumTypePart() {
			return GetRuleContexts<EnumTypePartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypePartContext enumTypePart(int i) {
			return GetRuleContext<EnumTypePartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(DelphiParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DelphiParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DelphiParser.Comma, i);
		}
		public EnumTypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterEnumTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitEnumTypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclContext enumTypeDecl() {
		EnumTypeDeclContext _localctx = new EnumTypeDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumTypeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(LParen);
			State = 104;
			enumTypePart();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 105;
				Match(Comma);
				State = 106;
				enumTypePart();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypePartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DelphiParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(DelphiParser.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrimitiveValue() { return GetToken(DelphiParser.PrimitiveValue, 0); }
		public EnumTypePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypePart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterEnumTypePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitEnumTypePart(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypePartContext enumTypePart() {
		EnumTypePartContext _localctx = new EnumTypePartContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumTypePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(Identifier);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignEquals) {
				{
				State = 115;
				Match(AssignEquals);
				State = 116;
				Match(PrimitiveValue);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(DelphiParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(DelphiParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DelphiParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(DelphiParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(DelphiParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GuidDeclContext guidDecl() {
			return GetRuleContext<GuidDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclContext[] procedureDecl() {
			return GetRuleContexts<ProcedureDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclContext procedureDecl(int i) {
			return GetRuleContext<ProcedureDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext[] rtComment() {
			return GetRuleContexts<RtCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext rtComment(int i) {
			return GetRuleContext<RtCommentContext>(i);
		}
		public InterfaceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDecl(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclContext interfaceDecl() {
		InterfaceDeclContext _localctx = new InterfaceDeclContext(Context, State);
		EnterRule(_localctx, 22, RULE_interfaceDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(Interface);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 120;
				Match(LParen);
				State = 121;
				Match(Identifier);
				State = 122;
				Match(RParen);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBracket) {
					{
					State = 123;
					guidDecl();
					}
				}

				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Procedure) | (1L << CommentStart))) != 0)) {
					{
					State = 129;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Function:
						{
						State = 126;
						functionDecl();
						}
						break;
					case Procedure:
						{
						State = 127;
						procedureDecl();
						}
						break;
					case CommentStart:
						{
						State = 128;
						rtComment();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 134;
				Match(End);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(DelphiParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DelphiParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DelphiParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DelphiParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(DelphiParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamsContext functionParams() {
			return GetRuleContext<FunctionParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(DelphiParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(DelphiParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(DelphiParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallingConvention() { return GetToken(DelphiParser.CallingConvention, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(Function);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 138;
				Match(Identifier);
				}
			}

			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 141;
				Match(LParen);
				State = 142;
				functionParams();
				State = 143;
				Match(RParen);
				}
			}

			State = 147;
			Match(Colon);
			State = 148;
			Match(Identifier);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Semicolon) {
				{
				State = 149;
				Match(Semicolon);
				}
			}

			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CallingConvention) {
				{
				State = 152;
				Match(CallingConvention);
				State = 153;
				Match(Semicolon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamContext[] functionParam() {
			return GetRuleContexts<FunctionParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamContext functionParam(int i) {
			return GetRuleContext<FunctionParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(DelphiParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(DelphiParser.Semicolon, i);
		}
		public FunctionParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterFunctionParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitFunctionParams(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamsContext functionParams() {
		FunctionParamsContext _localctx = new FunctionParamsContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Out) | (1L << Var) | (1L << Const) | (1L << Identifier))) != 0)) {
				{
				State = 156;
				functionParam();
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Semicolon) {
					{
					{
					State = 157;
					Match(Semicolon);
					State = 158;
					functionParam();
					}
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DelphiParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DelphiParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DelphiParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Out() { return GetToken(DelphiParser.Out, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DelphiParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DelphiParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(DelphiParser.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrimitiveValue() { return GetToken(DelphiParser.PrimitiveValue, 0); }
		public FunctionParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterFunctionParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitFunctionParam(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamContext functionParam() {
		FunctionParamContext _localctx = new FunctionParamContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Out) | (1L << Var) | (1L << Const))) != 0)) {
				{
				State = 166;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Out) | (1L << Var) | (1L << Const))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 169;
			Match(Identifier);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 170;
				Match(Colon);
				State = 171;
				Match(Identifier);
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AssignEquals) {
					{
					State = 172;
					Match(AssignEquals);
					State = 173;
					Match(PrimitiveValue);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Procedure() { return GetToken(DelphiParser.Procedure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DelphiParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(DelphiParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(DelphiParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallingConvention() { return GetToken(DelphiParser.CallingConvention, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(DelphiParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamsContext functionParams() {
			return GetRuleContext<FunctionParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(DelphiParser.RParen, 0); }
		public ProcedureDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterProcedureDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitProcedureDecl(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclContext procedureDecl() {
		ProcedureDeclContext _localctx = new ProcedureDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedureDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(Procedure);
			State = 179;
			Match(Identifier);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 180;
				Match(LParen);
				State = 181;
				functionParams();
				State = 182;
				Match(RParen);
				}
			}

			State = 186;
			Match(Semicolon);
			State = 187;
			Match(CallingConvention);
			State = 188;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DelphiParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DelphiParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(DelphiParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(DelphiParser.Dot, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 32, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(Identifier);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 191;
				Match(Dot);
				State = 192;
				Match(Identifier);
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBracket() { return GetToken(DelphiParser.LBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(DelphiParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBracket() { return GetToken(DelphiParser.RBracket, 0); }
		public GuidDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guidDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterGuidDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitGuidDecl(this);
		}
	}

	[RuleVersion(0)]
	public GuidDeclContext guidDecl() {
		GuidDeclContext _localctx = new GuidDeclContext(Context, State);
		EnterRule(_localctx, 34, RULE_guidDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(LBracket);
			State = 199;
			Match(String);
			State = 200;
			Match(RBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implementations() { return GetToken(DelphiParser.Implementations, 0); }
		public ImplementationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterImplementations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitImplementations(this);
		}
	}

	[RuleVersion(0)]
	public ImplementationsContext implementations() {
		ImplementationsContext _localctx = new ImplementationsContext(Context, State);
		EnterRule(_localctx, 36, RULE_implementations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(Implementations);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommentStart() { return GetToken(DelphiParser.CommentStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBracket() { return GetToken(DelphiParser.LBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtFuncsContext rtFuncs() {
			return GetRuleContext<RtFuncsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBracket() { return GetToken(DelphiParser.RBracket, 0); }
		public RtCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterRtComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitRtComment(this);
		}
	}

	[RuleVersion(0)]
	public RtCommentContext rtComment() {
		RtCommentContext _localctx = new RtCommentContext(Context, State);
		EnterRule(_localctx, 38, RULE_rtComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(CommentStart);
			State = 205;
			Match(LBracket);
			State = 206;
			rtFuncs();
			State = 207;
			Match(RBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtFuncsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtFuncContext[] rtFunc() {
			return GetRuleContexts<RtFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtFuncContext rtFunc(int i) {
			return GetRuleContext<RtFuncContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DelphiParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DelphiParser.Comma, i);
		}
		public RtFuncsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtFuncs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterRtFuncs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitRtFuncs(this);
		}
	}

	[RuleVersion(0)]
	public RtFuncsContext rtFuncs() {
		RtFuncsContext _localctx = new RtFuncsContext(Context, State);
		EnterRule(_localctx, 40, RULE_rtFuncs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			rtFunc();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 210;
				Match(Comma);
				State = 211;
				rtFunc();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DelphiParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(DelphiParser.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(DelphiParser.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtArgumentsContext rtArguments() {
			return GetRuleContext<RtArgumentsContext>(0);
		}
		public RtFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterRtFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitRtFunc(this);
		}
	}

	[RuleVersion(0)]
	public RtFuncContext rtFunc() {
		RtFuncContext _localctx = new RtFuncContext(Context, State);
		EnterRule(_localctx, 42, RULE_rtFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(Identifier);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 218;
				Match(LParen);
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (Const - 32)) | (1L << (Identifier - 32)) | (1L << (HexadecimalConstant - 32)) | (1L << (Int - 32)) | (1L << (StringDouble - 32)))) != 0)) {
					{
					State = 219;
					rtArguments();
					}
				}

				State = 222;
				Match(RParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtArgContext[] rtArg() {
			return GetRuleContexts<RtArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtArgContext rtArg(int i) {
			return GetRuleContext<RtArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DelphiParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DelphiParser.Comma, i);
		}
		public RtArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterRtArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitRtArguments(this);
		}
	}

	[RuleVersion(0)]
	public RtArgumentsContext rtArguments() {
		RtArgumentsContext _localctx = new RtArgumentsContext(Context, State);
		EnterRule(_localctx, 44, RULE_rtArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			rtArg();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 226;
				Match(Comma);
				State = 227;
				rtArg();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtLiteralContext rtLiteral() {
			return GetRuleContext<RtLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DelphiParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DelphiParser.Const, 0); }
		public RtArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterRtArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitRtArg(this);
		}
	}

	[RuleVersion(0)]
	public RtArgContext rtArg() {
		RtArgContext _localctx = new RtArgContext(Context, State);
		EnterRule(_localctx, 46, RULE_rtArg);
		int _la;
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HexadecimalConstant:
			case Int:
			case StringDouble:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				rtLiteral();
				}
				break;
			case Const:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 234;
					Match(Const);
					}
				}

				State = 237;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(DelphiParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalConstant() { return GetToken(DelphiParser.HexadecimalConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDouble() { return GetToken(DelphiParser.StringDouble, 0); }
		public RtLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.EnterRtLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDelphiParserListener typedListener = listener as IDelphiParserListener;
			if (typedListener != null) typedListener.ExitRtLiteral(this);
		}
	}

	[RuleVersion(0)]
	public RtLiteralContext rtLiteral() {
		RtLiteralContext _localctx = new RtLiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_rtLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (HexadecimalConstant - 55)) | (1L << (Int - 55)) | (1L << (StringDouble - 55)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,65,243,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
		1,2,1,2,1,2,1,2,5,2,65,8,2,10,2,12,2,68,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,3,5,3,78,8,3,10,3,12,3,81,9,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,
		1,7,1,7,1,7,1,7,1,7,3,7,97,8,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,
		108,8,9,10,9,12,9,111,9,9,1,9,1,9,1,10,1,10,1,10,3,10,118,8,10,1,11,1,
		11,1,11,1,11,1,11,3,11,125,8,11,1,11,1,11,1,11,5,11,130,8,11,10,11,12,
		11,133,9,11,1,11,3,11,136,8,11,1,12,1,12,3,12,140,8,12,1,12,1,12,1,12,
		1,12,3,12,146,8,12,1,12,1,12,1,12,3,12,151,8,12,1,12,1,12,3,12,155,8,12,
		1,13,1,13,1,13,5,13,160,8,13,10,13,12,13,163,9,13,3,13,165,8,13,1,14,3,
		14,168,8,14,1,14,1,14,1,14,1,14,1,14,3,14,175,8,14,3,14,177,8,14,1,15,
		1,15,1,15,1,15,1,15,1,15,3,15,185,8,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
		16,5,16,194,8,16,10,16,12,16,197,9,16,1,17,1,17,1,17,1,17,1,18,1,18,1,
		19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,5,20,213,8,20,10,20,12,20,216,9,
		20,1,21,1,21,1,21,3,21,221,8,21,1,21,3,21,224,8,21,1,22,1,22,1,22,5,22,
		229,8,22,10,22,12,22,232,9,22,1,23,1,23,3,23,236,8,23,1,23,3,23,239,8,
		23,1,24,1,24,1,24,0,0,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,0,2,2,0,12,13,32,32,3,0,55,55,57,57,65,65,250,
		0,50,1,0,0,0,2,56,1,0,0,0,4,60,1,0,0,0,6,71,1,0,0,0,8,82,1,0,0,0,10,84,
		1,0,0,0,12,86,1,0,0,0,14,90,1,0,0,0,16,100,1,0,0,0,18,103,1,0,0,0,20,114,
		1,0,0,0,22,119,1,0,0,0,24,137,1,0,0,0,26,164,1,0,0,0,28,167,1,0,0,0,30,
		178,1,0,0,0,32,190,1,0,0,0,34,198,1,0,0,0,36,202,1,0,0,0,38,204,1,0,0,
		0,40,209,1,0,0,0,42,217,1,0,0,0,44,225,1,0,0,0,46,238,1,0,0,0,48,240,1,
		0,0,0,50,51,3,2,1,0,51,52,5,6,0,0,52,53,3,4,2,0,53,54,3,6,3,0,54,55,3,
		36,18,0,55,1,1,0,0,0,56,57,5,3,0,0,57,58,3,32,16,0,58,59,5,29,0,0,59,3,
		1,0,0,0,60,61,5,8,0,0,61,66,3,32,16,0,62,63,5,27,0,0,63,65,3,32,16,0,64,
		62,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,
		66,1,0,0,0,69,70,5,29,0,0,70,5,1,0,0,0,71,79,5,4,0,0,72,78,3,14,7,0,73,
		78,3,12,6,0,74,78,3,8,4,0,75,78,3,10,5,0,76,78,3,38,19,0,77,72,1,0,0,0,
		77,73,1,0,0,0,77,74,1,0,0,0,77,75,1,0,0,0,77,76,1,0,0,0,78,81,1,0,0,0,
		79,77,1,0,0,0,79,80,1,0,0,0,80,7,1,0,0,0,81,79,1,0,0,0,82,83,3,24,12,0,
		83,9,1,0,0,0,84,85,3,30,15,0,85,11,1,0,0,0,86,87,5,54,0,0,87,88,5,30,0,
		0,88,89,3,24,12,0,89,13,1,0,0,0,90,91,5,54,0,0,91,96,5,30,0,0,92,97,5,
		54,0,0,93,97,3,16,8,0,94,97,3,18,9,0,95,97,3,22,11,0,96,92,1,0,0,0,96,
		93,1,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,99,5,29,0,0,99,
		15,1,0,0,0,100,101,5,20,0,0,101,102,5,54,0,0,102,17,1,0,0,0,103,104,5,
		21,0,0,104,109,3,20,10,0,105,106,5,27,0,0,106,108,3,20,10,0,107,105,1,
		0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,112,1,0,0,0,
		111,109,1,0,0,0,112,113,5,22,0,0,113,19,1,0,0,0,114,117,5,54,0,0,115,116,
		5,30,0,0,116,118,5,50,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,21,1,0,0,
		0,119,135,5,6,0,0,120,121,5,21,0,0,121,122,5,54,0,0,122,124,5,22,0,0,123,
		125,3,34,17,0,124,123,1,0,0,0,124,125,1,0,0,0,125,131,1,0,0,0,126,130,
		3,24,12,0,127,130,3,30,15,0,128,130,3,38,19,0,129,126,1,0,0,0,129,127,
		1,0,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,
		0,132,134,1,0,0,0,133,131,1,0,0,0,134,136,5,11,0,0,135,120,1,0,0,0,135,
		136,1,0,0,0,136,23,1,0,0,0,137,139,5,9,0,0,138,140,5,54,0,0,139,138,1,
		0,0,0,139,140,1,0,0,0,140,145,1,0,0,0,141,142,5,21,0,0,142,143,3,26,13,
		0,143,144,5,22,0,0,144,146,1,0,0,0,145,141,1,0,0,0,145,146,1,0,0,0,146,
		147,1,0,0,0,147,148,5,43,0,0,148,150,5,54,0,0,149,151,5,29,0,0,150,149,
		1,0,0,0,150,151,1,0,0,0,151,154,1,0,0,0,152,153,5,52,0,0,153,155,5,29,
		0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,25,1,0,0,0,156,161,3,28,14,0,157,
		158,5,29,0,0,158,160,3,28,14,0,159,157,1,0,0,0,160,163,1,0,0,0,161,159,
		1,0,0,0,161,162,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,164,156,1,0,0,
		0,164,165,1,0,0,0,165,27,1,0,0,0,166,168,7,0,0,0,167,166,1,0,0,0,167,168,
		1,0,0,0,168,169,1,0,0,0,169,176,5,54,0,0,170,171,5,43,0,0,171,174,5,54,
		0,0,172,173,5,30,0,0,173,175,5,50,0,0,174,172,1,0,0,0,174,175,1,0,0,0,
		175,177,1,0,0,0,176,170,1,0,0,0,176,177,1,0,0,0,177,29,1,0,0,0,178,179,
		5,10,0,0,179,184,5,54,0,0,180,181,5,21,0,0,181,182,3,26,13,0,182,183,5,
		22,0,0,183,185,1,0,0,0,184,180,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,
		186,187,5,29,0,0,187,188,5,52,0,0,188,189,5,29,0,0,189,31,1,0,0,0,190,
		195,5,54,0,0,191,192,5,2,0,0,192,194,5,54,0,0,193,191,1,0,0,0,194,197,
		1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,33,1,0,0,0,197,195,1,0,0,0,
		198,199,5,25,0,0,199,200,5,1,0,0,200,201,5,26,0,0,201,35,1,0,0,0,202,203,
		5,64,0,0,203,37,1,0,0,0,204,205,5,46,0,0,205,206,5,25,0,0,206,207,3,40,
		20,0,207,208,5,26,0,0,208,39,1,0,0,0,209,214,3,42,21,0,210,211,5,27,0,
		0,211,213,3,42,21,0,212,210,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,
		215,1,0,0,0,215,41,1,0,0,0,216,214,1,0,0,0,217,223,5,54,0,0,218,220,5,
		21,0,0,219,221,3,44,22,0,220,219,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,
		0,222,224,5,22,0,0,223,218,1,0,0,0,223,224,1,0,0,0,224,43,1,0,0,0,225,
		230,3,46,23,0,226,227,5,27,0,0,227,229,3,46,23,0,228,226,1,0,0,0,229,232,
		1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,45,1,0,0,0,232,230,1,0,0,0,
		233,239,3,48,24,0,234,236,5,32,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,
		237,1,0,0,0,237,239,5,54,0,0,238,233,1,0,0,0,238,235,1,0,0,0,239,47,1,
		0,0,0,240,241,7,1,0,0,241,49,1,0,0,0,27,66,77,79,96,109,117,124,129,131,
		135,139,145,150,154,161,164,167,174,176,184,195,214,220,223,230,235,238
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
