//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:/Dewesoft/C++/git/Blueberry4/shared/tools/RTGen/src\RTGen3.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class RTGen3 : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AccessModifier=1, RtInterface=2, DeclareRtIntf=3, InheritsRtIntf=4, Pragma=5, 
		Include=6, Define=7, IfDef=8, EndIf=9, NullPtr=10, HashTag=11, AtSign=12, 
		Quote=13, LessThan=14, GreaterThan=15, LParen=16, RParen=17, LBrace=18, 
		RBrace=19, LBracket=20, RBracket=21, Comma=22, BackSlash=23, Semicolon=24, 
		AssignEquals=25, Using=26, Static=27, Constexpr=28, Template=29, TypeName=30, 
		Const=31, NoExcept=32, TypeDef=33, Struct=34, Class=35, Virtual=36, Enum=37, 
		Extern=38, Friend=39, StaticAssert=40, Operator=41, Inline=42, Ampersand=43, 
		Colon=44, DoubleColon=45, DocCommentBlock=46, CommentStart=47, RtCommentBlock=48, 
		BlockCommentStart=49, BlockCommentEnd=50, Exclamation=51, Dot=52, Pipe=53, 
		Slash=54, Star=55, CallingConvention=56, VarModifiers=57, Int=58, Bool=59, 
		MacroIdentifier=60, Identifier=61, BinaryConstant=62, HexadecimalConstant=63, 
		AlphaNumeric=64, String=65, Whitespace=66, Comment=67, BlockComment=68, 
		Newline=69, DocBody=70, MethodBody=71;
	public const int
		RULE_start = 0, RULE_docComment = 1, RULE_static_assert = 2, RULE_globalFunc = 3, 
		RULE_funcBody = 4, RULE_extern = 5, RULE_globalFuncModifiers = 6, RULE_preprocesor = 7, 
		RULE_define = 8, RULE_preprocesorIfDef = 9, RULE_varDecl = 10, RULE_varModifiers = 11, 
		RULE_varModifier = 12, RULE_typeDecl = 13, RULE_usingDecl = 14, RULE_classDecl = 15, 
		RULE_template = 16, RULE_templateArgs = 17, RULE_templateIdentifier = 18, 
		RULE_anyIdentifier = 19, RULE_classImpl = 20, RULE_rtComment = 21, RULE_rtBlockAttributes = 22, 
		RULE_rtAttributes = 23, RULE_rtAttribute = 24, RULE_rtIdentifier = 25, 
		RULE_classType = 26, RULE_classMembers = 27, RULE_methodDecl = 28, RULE_constructor = 29, 
		RULE_initializers = 30, RULE_operator = 31, RULE_operatorType = 32, RULE_methodDriectives = 33, 
		RULE_methodModifiers = 34, RULE_pureFuncDecl = 35, RULE_typedefDecl = 36, 
		RULE_enumDecl = 37, RULE_enumImpl = 38, RULE_enumMembers = 39, RULE_enumMember = 40, 
		RULE_enumValue = 41, RULE_cast = 42, RULE_type = 43, RULE_ptrOperators = 44, 
		RULE_ptrOperator = 45, RULE_namespace = 46, RULE_assignment = 47, RULE_expression = 48, 
		RULE_expr = 49, RULE_binOperator = 50, RULE_literal = 51, RULE_block = 52, 
		RULE_expressions = 53, RULE_include = 54, RULE_includeName = 55, RULE_includePath = 56, 
		RULE_pathSeparator = 57, RULE_macro = 58, RULE_macroEnd = 59, RULE_macroArguments = 60, 
		RULE_macroArg = 61, RULE_macroArgValue = 62, RULE_pragma = 63, RULE_pragmaDecl = 64, 
		RULE_arguments = 65, RULE_namedParameter = 66, RULE_arg = 67, RULE_argValueCtor = 68, 
		RULE_argValue = 69, RULE_defaultArgValue = 70;
	public static readonly string[] ruleNames = {
		"start", "docComment", "static_assert", "globalFunc", "funcBody", "extern", 
		"globalFuncModifiers", "preprocesor", "define", "preprocesorIfDef", "varDecl", 
		"varModifiers", "varModifier", "typeDecl", "usingDecl", "classDecl", "template", 
		"templateArgs", "templateIdentifier", "anyIdentifier", "classImpl", "rtComment", 
		"rtBlockAttributes", "rtAttributes", "rtAttribute", "rtIdentifier", "classType", 
		"classMembers", "methodDecl", "constructor", "initializers", "operator", 
		"operatorType", "methodDriectives", "methodModifiers", "pureFuncDecl", 
		"typedefDecl", "enumDecl", "enumImpl", "enumMembers", "enumMember", "enumValue", 
		"cast", "type", "ptrOperators", "ptrOperator", "namespace", "assignment", 
		"expression", "expr", "binOperator", "literal", "block", "expressions", 
		"include", "includeName", "includePath", "pathSeparator", "macro", "macroEnd", 
		"macroArguments", "macroArg", "macroArgValue", "pragma", "pragmaDecl", 
		"arguments", "namedParameter", "arg", "argValueCtor", "argValue", "defaultArgValue"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'INHERITS_INTERFACE'", "'pragma'", "'include'", 
		"'define'", "'ifdef'", "'endif'", "'nullptr'", "'#'", "'@'", "'\"'", "'<'", 
		"'>'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'\\'", "';'", 
		"'='", "'using'", "'static'", "'constexpr'", "'template'", "'typename'", 
		"'const'", "'noexcept'", "'typedef'", "'struct'", "'class'", "'virtual'", 
		"'enum'", "'extern'", "'friend'", "'static_assert'", "'operator'", "'inline'", 
		"'&'", "':'", "'::'", null, "'//'", "'/*#'", "'/*'", "'*/'", "'!'", "'.'", 
		"'|'", "'/'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AccessModifier", "RtInterface", "DeclareRtIntf", "InheritsRtIntf", 
		"Pragma", "Include", "Define", "IfDef", "EndIf", "NullPtr", "HashTag", 
		"AtSign", "Quote", "LessThan", "GreaterThan", "LParen", "RParen", "LBrace", 
		"RBrace", "LBracket", "RBracket", "Comma", "BackSlash", "Semicolon", "AssignEquals", 
		"Using", "Static", "Constexpr", "Template", "TypeName", "Const", "NoExcept", 
		"TypeDef", "Struct", "Class", "Virtual", "Enum", "Extern", "Friend", "StaticAssert", 
		"Operator", "Inline", "Ampersand", "Colon", "DoubleColon", "DocCommentBlock", 
		"CommentStart", "RtCommentBlock", "BlockCommentStart", "BlockCommentEnd", 
		"Exclamation", "Dot", "Pipe", "Slash", "Star", "CallingConvention", "VarModifiers", 
		"Int", "Bool", "MacroIdentifier", "Identifier", "BinaryConstant", "HexadecimalConstant", 
		"AlphaNumeric", "String", "Whitespace", "Comment", "BlockComment", "Newline", 
		"DocBody", "MethodBody"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RTGen3.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RTGen3() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RTGen3(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RTGen3(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RTGen3.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Static_assertContext[] static_assert() {
			return GetRuleContexts<Static_assertContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Static_assertContext static_assert(int i) {
			return GetRuleContext<Static_assertContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext[] usingDecl() {
			return GetRuleContexts<UsingDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext usingDecl(int i) {
			return GetRuleContext<UsingDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext[] typeDecl() {
			return GetRuleContexts<TypeDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl(int i) {
			return GetRuleContext<TypeDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocesorContext[] preprocesor() {
			return GetRuleContexts<PreprocesorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocesorContext preprocesor(int i) {
			return GetRuleContext<PreprocesorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext[] macro() {
			return GetRuleContexts<MacroContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro(int i) {
			return GetRuleContext<MacroContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFuncContext[] globalFunc() {
			return GetRuleContexts<GlobalFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFuncContext globalFunc(int i) {
			return GetRuleContext<GlobalFuncContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext[] rtComment() {
			return GetRuleContexts<RtCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext rtComment(int i) {
			return GetRuleContext<RtCommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext[] docComment() {
			return GetRuleContexts<DocCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext docComment(int i) {
			return GetRuleContext<DocCommentContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3459263068188444684L) != 0)) {
				{
				State = 151;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 142;
					static_assert();
					}
					break;
				case 2:
					{
					State = 143;
					usingDecl();
					}
					break;
				case 3:
					{
					State = 144;
					typeDecl();
					}
					break;
				case 4:
					{
					State = 145;
					preprocesor();
					}
					break;
				case 5:
					{
					State = 146;
					macro();
					}
					break;
				case 6:
					{
					State = 147;
					globalFunc();
					}
					break;
				case 7:
					{
					State = 148;
					varDecl();
					}
					break;
				case 8:
					{
					State = 149;
					rtComment();
					}
					break;
				case 9:
					{
					State = 150;
					docComment();
					}
					break;
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DocCommentBlock() { return GetToken(RTGen3.DocCommentBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DocBody() { return GetToken(RTGen3.DocBody, 0); }
		public DocCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterDocComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitDocComment(this);
		}
	}

	[RuleVersion(0)]
	public DocCommentContext docComment() {
		DocCommentContext _localctx = new DocCommentContext(Context, State);
		EnterRule(_localctx, 2, RULE_docComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(DocCommentBlock);
			State = 159;
			Match(DocBody);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StaticAssert() { return GetToken(RTGen3.StaticAssert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Static_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterStatic_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitStatic_assert(this);
		}
	}

	[RuleVersion(0)]
	public Static_assertContext static_assert() {
		Static_assertContext _localctx = new Static_assertContext(Context, State);
		EnterRule(_localctx, 4, RULE_static_assert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(StaticAssert);
			State = 162;
			Match(LParen);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 163;
				arguments();
				}
			}

			State = 166;
			Match(RParen);
			State = 167;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFuncModifiersContext globalFuncModifiers() {
			return GetRuleContext<GlobalFuncModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallingConvention() { return GetToken(RTGen3.CallingConvention, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(RTGen3.Const, 0); }
		public GlobalFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterGlobalFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitGlobalFunc(this);
		}
	}

	[RuleVersion(0)]
	public GlobalFuncContext globalFunc() {
		GlobalFuncContext _localctx = new GlobalFuncContext(Context, State);
		EnterRule(_localctx, 6, RULE_globalFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4673327071232L) != 0)) {
				{
				State = 169;
				globalFuncModifiers();
				}
			}

			State = 172;
			type();
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CallingConvention) {
				{
				State = 173;
				Match(CallingConvention);
				}
			}

			State = 176;
			Match(Identifier);
			State = 177;
			Match(LParen);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 178;
				arguments();
				}
			}

			State = 181;
			Match(RParen);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 182;
				Match(Const);
				}
			}

			State = 185;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PureFuncDeclContext pureFuncDecl() {
			return GetRuleContext<PureFuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MethodBody() { return GetToken(RTGen3.MethodBody, 0); }
		public FuncBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterFuncBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitFuncBody(this);
		}
	}

	[RuleVersion(0)]
	public FuncBodyContext funcBody() {
		FuncBodyContext _localctx = new FuncBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcBody);
		int _la;
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Semicolon:
			case AssignEquals:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AssignEquals) {
					{
					State = 187;
					pureFuncDecl();
					}
				}

				State = 190;
				Match(Semicolon);
				}
				break;
			case MethodBody:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				Match(MethodBody);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(RTGen3.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(RTGen3.String, 0); }
		public ExternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterExtern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitExtern(this);
		}
	}

	[RuleVersion(0)]
	public ExternContext @extern() {
		ExternContext _localctx = new ExternContext(Context, State);
		EnterRule(_localctx, 10, RULE_extern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(Extern);
			State = 195;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalFuncModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternContext @extern() {
			return GetRuleContext<ExternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(RTGen3.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(RTGen3.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constexpr() { return GetToken(RTGen3.Constexpr, 0); }
		public GlobalFuncModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalFuncModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterGlobalFuncModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitGlobalFuncModifiers(this);
		}
	}

	[RuleVersion(0)]
	public GlobalFuncModifiersContext globalFuncModifiers() {
		GlobalFuncModifiersContext _localctx = new GlobalFuncModifiersContext(Context, State);
		EnterRule(_localctx, 12, RULE_globalFuncModifiers);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Extern:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				@extern();
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				Match(Static);
				}
				break;
			case Inline:
				EnterOuterAlt(_localctx, 3);
				{
				State = 199;
				Match(Inline);
				}
				break;
			case Constexpr:
				EnterOuterAlt(_localctx, 4);
				{
				State = 200;
				Match(Constexpr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocesorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HashTag() { return GetToken(RTGen3.HashTag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocesorIfDefContext preprocesorIfDef() {
			return GetRuleContext<PreprocesorIfDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndIf() { return GetToken(RTGen3.EndIf, 0); }
		public PreprocesorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocesor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPreprocesor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPreprocesor(this);
		}
	}

	[RuleVersion(0)]
	public PreprocesorContext preprocesor() {
		PreprocesorContext _localctx = new PreprocesorContext(Context, State);
		EnterRule(_localctx, 14, RULE_preprocesor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(HashTag);
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Pragma:
				{
				State = 204;
				pragma();
				}
				break;
			case Include:
				{
				State = 205;
				include();
				}
				break;
			case Define:
				{
				State = 206;
				define();
				}
				break;
			case IfDef:
				{
				State = 207;
				preprocesorIfDef();
				}
				break;
			case EndIf:
				{
				State = 208;
				Match(EndIf);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Define() { return GetToken(RTGen3.Define, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitDefine(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 16, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(Define);
			State = 212;
			macro();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocesorIfDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IfDef() { return GetToken(RTGen3.IfDef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public PreprocesorIfDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocesorIfDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPreprocesorIfDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPreprocesorIfDef(this);
		}
	}

	[RuleVersion(0)]
	public PreprocesorIfDefContext preprocesorIfDef() {
		PreprocesorIfDefContext _localctx = new PreprocesorIfDefContext(Context, State);
		EnterRule(_localctx, 18, RULE_preprocesorIfDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(IfDef);
			State = 215;
			macro();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifiersContext varModifiers() {
			return GetRuleContext<VarModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			varModifiers();
			State = 218;
			type();
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 219;
				Match(Identifier);
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AssignEquals) {
					{
					State = 220;
					assignment();
					}
				}

				State = 223;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext[] varModifier() {
			return GetRuleContexts<VarModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier(int i) {
			return GetRuleContext<VarModifierContext>(i);
		}
		public VarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterVarModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitVarModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VarModifiersContext varModifiers() {
		VarModifiersContext _localctx = new VarModifiersContext(Context, State);
		EnterRule(_localctx, 22, RULE_varModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4400596647936L) != 0)) {
				{
				{
				State = 226;
				varModifier();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(RTGen3.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constexpr() { return GetToken(RTGen3.Constexpr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(RTGen3.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(RTGen3.Inline, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_varModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4400596647936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext usingDecl() {
			return GetRuleContext<UsingDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefDeclContext typedefDecl() {
			return GetRuleContext<TypedefDeclContext>(0);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeDecl);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclareRtIntf:
			case Template:
			case Struct:
			case Class:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				classDecl();
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				enumDecl();
				}
				break;
			case Using:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236;
				usingDecl();
				}
				break;
			case TypeDef:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237;
				typedefDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(RTGen3.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		public UsingDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterUsingDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitUsingDecl(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclContext usingDecl() {
		UsingDeclContext _localctx = new UsingDeclContext(Context, State);
		EnterRule(_localctx, 28, RULE_usingDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(Using);
			State = 241;
			Match(Identifier);
			State = 242;
			Match(AssignEquals);
			State = 243;
			type();
			State = 244;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassImplContext classImpl() {
			return GetRuleContext<ClassImplContext>(0);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 246;
				template();
				}
			}

			State = 249;
			classType();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBrace) {
				{
				State = 250;
				classImpl();
				}
			}

			State = 253;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(RTGen3.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgsContext templateArgs() {
			return GetRuleContext<TemplateArgsContext>(0);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 32, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(Template);
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 256;
				templateArgs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(RTGen3.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(RTGen3.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateIdentifierContext[] templateIdentifier() {
			return GetRuleContexts<TemplateIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateIdentifierContext templateIdentifier(int i) {
			return GetRuleContext<TemplateIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public TemplateArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTemplateArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTemplateArgs(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgsContext templateArgs() {
		TemplateArgsContext _localctx = new TemplateArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_templateArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(LessThan);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3458764549254021124L) != 0)) {
				{
				State = 260;
				templateIdentifier();
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 261;
					Match(Comma);
					State = 262;
					templateIdentifier();
					}
					}
					State = 267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 270;
			Match(GreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeName() { return GetToken(RTGen3.TypeName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(RTGen3.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		public TemplateIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTemplateIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTemplateIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public TemplateIdentifierContext templateIdentifier() {
		TemplateIdentifierContext _localctx = new TemplateIdentifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_templateIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 272;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843044647174144L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 275;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MacroIdentifier() { return GetToken(RTGen3.MacroIdentifier, 0); }
		public AnyIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterAnyIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitAnyIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public AnyIdentifierContext anyIdentifier() {
		AnyIdentifierContext _localctx = new AnyIdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_anyIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !(_la==MacroIdentifier || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(RTGen3.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(RTGen3.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassMembersContext[] classMembers() {
			return GetRuleContexts<ClassMembersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMembersContext classMembers(int i) {
			return GetRuleContext<ClassMembersContext>(i);
		}
		public ClassImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classImpl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterClassImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitClassImpl(this);
		}
	}

	[RuleVersion(0)]
	public ClassImplContext classImpl() {
		ClassImplContext _localctx = new ClassImplContext(Context, State);
		EnterRule(_localctx, 40, RULE_classImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(LBrace);
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3459263411785828364L) != 0)) {
				{
				{
				State = 280;
				classMembers();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 286;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommentStart() { return GetToken(RTGen3.CommentStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBracket() { return GetToken(RTGen3.LBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtAttributesContext rtAttributes() {
			return GetRuleContext<RtAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBracket() { return GetToken(RTGen3.RBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RtCommentBlock() { return GetToken(RTGen3.RtCommentBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BlockCommentEnd() { return GetToken(RTGen3.BlockCommentEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtBlockAttributesContext[] rtBlockAttributes() {
			return GetRuleContexts<RtBlockAttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtBlockAttributesContext rtBlockAttributes(int i) {
			return GetRuleContext<RtBlockAttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(RTGen3.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(RTGen3.Star, i);
		}
		public RtCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtComment(this);
		}
	}

	[RuleVersion(0)]
	public RtCommentContext rtComment() {
		RtCommentContext _localctx = new RtCommentContext(Context, State);
		EnterRule(_localctx, 42, RULE_rtComment);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CommentStart:
				{
				State = 288;
				Match(CommentStart);
				State = 289;
				Match(LBracket);
				State = 290;
				rtAttributes();
				State = 291;
				Match(RBracket);
				}
				break;
			case RtCommentBlock:
				{
				State = 293;
				Match(RtCommentBlock);
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 294;
						rtBlockAttributes();
						}
						} 
					}
					State = 299;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Star) {
					{
					{
					State = 300;
					Match(Star);
					}
					}
					State = 305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 306;
				Match(BlockCommentEnd);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtBlockAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBracket() { return GetToken(RTGen3.LBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtAttributesContext rtAttributes() {
			return GetRuleContext<RtAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBracket() { return GetToken(RTGen3.RBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(RTGen3.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(RTGen3.Star, i);
		}
		public RtBlockAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtBlockAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtBlockAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtBlockAttributes(this);
		}
	}

	[RuleVersion(0)]
	public RtBlockAttributesContext rtBlockAttributes() {
		RtBlockAttributesContext _localctx = new RtBlockAttributesContext(Context, State);
		EnterRule(_localctx, 44, RULE_rtBlockAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Star) {
				{
				{
				State = 309;
				Match(Star);
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			Match(LBracket);
			State = 316;
			rtAttributes();
			State = 317;
			Match(RBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtAttributeContext[] rtAttribute() {
			return GetRuleContexts<RtAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtAttributeContext rtAttribute(int i) {
			return GetRuleContext<RtAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public RtAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtAttributes(this);
		}
	}

	[RuleVersion(0)]
	public RtAttributesContext rtAttributes() {
		RtAttributesContext _localctx = new RtAttributesContext(Context, State);
		EnterRule(_localctx, 46, RULE_rtAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			rtAttribute();
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 320;
				Match(Comma);
				State = 321;
				rtAttribute();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtIdentifierContext rtIdentifier() {
			return GetRuleContext<RtIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public RtAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtAttribute(this);
		}
	}

	[RuleVersion(0)]
	public RtAttributeContext rtAttribute() {
		RtAttributeContext _localctx = new RtAttributeContext(Context, State);
		EnterRule(_localctx, 48, RULE_rtAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			rtIdentifier();
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 328;
				Match(LParen);
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
					{
					State = 329;
					arguments();
					}
				}

				State = 332;
				Match(RParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(RTGen3.Include, 0); }
		public RtIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public RtIdentifierContext rtIdentifier() {
		RtIdentifierContext _localctx = new RtIdentifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_rtIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_la = TokenStream.LA(1);
			if ( !(_la==Include || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public TypeContext interfaceType;
		public TypeContext baseType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(RTGen3.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(RTGen3.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(RTGen3.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AccessModifier() { return GetToken(RTGen3.AccessModifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareRtIntf() { return GetToken(RTGen3.DeclareRtIntf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LParen() { return GetTokens(RTGen3.LParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen(int i) {
			return GetToken(RTGen3.LParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(RTGen3.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RParen() { return GetTokens(RTGen3.RParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen(int i) {
			return GetToken(RTGen3.RParen, i);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_classType);
		int _la;
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Struct:
			case Class:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337;
				_la = TokenStream.LA(1);
				if ( !(_la==Struct || _la==Class) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 338;
				_localctx.interfaceType = type();
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 339;
					Match(Colon);
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AccessModifier) {
						{
						State = 340;
						Match(AccessModifier);
						}
					}

					State = 343;
					_localctx.baseType = type();
					}
				}

				}
				break;
			case DeclareRtIntf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346;
				Match(DeclareRtIntf);
				State = 347;
				Match(LParen);
				State = 348;
				_localctx.interfaceType = type();
				State = 349;
				Match(Comma);
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LParen) {
					{
					State = 350;
					Match(LParen);
					}
				}

				State = 353;
				_localctx.baseType = type();
				State = 355;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 354;
					Match(RParen);
					}
					break;
				}
				State = 357;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreprocesorContext preprocesor() {
			return GetRuleContext<PreprocesorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl() {
			return GetRuleContext<TypeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl() {
			return GetRuleContext<MethodDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Static_assertContext static_assert() {
			return GetRuleContext<Static_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext usingDecl() {
			return GetRuleContext<UsingDeclContext>(0);
		}
		public ClassMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterClassMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitClassMembers(this);
		}
	}

	[RuleVersion(0)]
	public ClassMembersContext classMembers() {
		ClassMembersContext _localctx = new ClassMembersContext(Context, State);
		EnterRule(_localctx, 54, RULE_classMembers);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				preprocesor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				macro();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 363;
				varDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 364;
				typeDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 365;
				methodDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 366;
				constructor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 367;
				@operator();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 368;
				static_assert();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 369;
				usingDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext[] rtComment() {
			return GetRuleContexts<RtCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext rtComment(int i) {
			return GetRuleContext<RtCommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext[] docComment() {
			return GetRuleContexts<DocCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext docComment(int i) {
			return GetRuleContext<DocCommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifiersContext methodModifiers() {
			return GetRuleContext<MethodModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallingConvention() { return GetToken(RTGen3.CallingConvention, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(RTGen3.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PureFuncDeclContext pureFuncDecl() {
			return GetRuleContext<PureFuncDeclContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 56, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 492581209243648L) != 0)) {
				{
				State = 374;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CommentStart:
				case RtCommentBlock:
					{
					State = 372;
					rtComment();
					}
					break;
				case DocCommentBlock:
					{
					State = 373;
					docComment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Virtual) {
				{
				State = 379;
				methodModifiers();
				}
			}

			State = 382;
			type();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CallingConvention) {
				{
				State = 383;
				Match(CallingConvention);
				}
			}

			State = 386;
			Match(Identifier);
			State = 387;
			Match(LParen);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 388;
				arguments();
				}
			}

			State = 391;
			Match(RParen);
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 392;
				Match(Const);
				}
			}

			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignEquals) {
				{
				State = 395;
				pureFuncDecl();
				}
			}

			State = 398;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(RTGen3.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(RTGen3.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializersContext initializers() {
			return GetRuleContext<InitializersContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 58, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(Identifier);
			State = 401;
			Match(LParen);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 402;
				arguments();
				}
			}

			State = 405;
			Match(RParen);
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 406;
				initializers();
				}
			}

			State = 409;
			Match(LBrace);
			State = 410;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(RTGen3.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(RTGen3.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(RTGen3.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LParen() { return GetTokens(RTGen3.LParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen(int i) {
			return GetToken(RTGen3.LParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RParen() { return GetTokens(RTGen3.RParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen(int i) {
			return GetToken(RTGen3.RParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public InitializersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterInitializers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitInitializers(this);
		}
	}

	[RuleVersion(0)]
	public InitializersContext initializers() {
		InitializersContext _localctx = new InitializersContext(Context, State);
		EnterRule(_localctx, 60, RULE_initializers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(Colon);
			State = 413;
			Match(Identifier);
			State = 414;
			Match(LParen);
			State = 415;
			arguments();
			State = 416;
			Match(RParen);
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 417;
				Match(Comma);
				State = 418;
				Match(Identifier);
				State = 419;
				Match(LParen);
				State = 420;
				arguments();
				State = 421;
				Match(RParen);
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(RTGen3.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorTypeContext operatorType() {
			return GetRuleContext<OperatorTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MethodBody() { return GetToken(RTGen3.MethodBody, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Friend() { return GetToken(RTGen3.Friend, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDriectivesContext[] methodDriectives() {
			return GetRuleContexts<MethodDriectivesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDriectivesContext methodDriectives(int i) {
			return GetRuleContext<MethodDriectivesContext>(i);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Friend) {
				{
				State = 428;
				Match(Friend);
				}
			}

			State = 431;
			type();
			State = 432;
			Match(Operator);
			State = 433;
			operatorType();
			State = 434;
			Match(LParen);
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 435;
				arguments();
				}
			}

			State = 438;
			Match(RParen);
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Const || _la==NoExcept) {
				{
				{
				State = 439;
				methodDriectives();
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 445;
			Match(MethodBody);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AssignEquals() { return GetTokens(RTGen3.AssignEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals(int i) {
			return GetToken(RTGen3.AssignEquals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation() { return GetToken(RTGen3.Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OperatorTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterOperatorType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitOperatorType(this);
		}
	}

	[RuleVersion(0)]
	public OperatorTypeContext operatorType() {
		OperatorTypeContext _localctx = new OperatorTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_operatorType);
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AssignEquals:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				Match(AssignEquals);
				State = 448;
				Match(AssignEquals);
				}
				break;
			case Exclamation:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449;
				Match(Exclamation);
				State = 450;
				Match(AssignEquals);
				}
				break;
			case RtInterface:
			case MacroIdentifier:
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 451;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDriectivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(RTGen3.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoExcept() { return GetToken(RTGen3.NoExcept, 0); }
		public MethodDriectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDriectives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMethodDriectives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMethodDriectives(this);
		}
	}

	[RuleVersion(0)]
	public MethodDriectivesContext methodDriectives() {
		MethodDriectivesContext _localctx = new MethodDriectivesContext(Context, State);
		EnterRule(_localctx, 66, RULE_methodDriectives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = TokenStream.LA(1);
			if ( !(_la==Const || _la==NoExcept) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(RTGen3.Virtual, 0); }
		public MethodModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMethodModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMethodModifiers(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifiersContext methodModifiers() {
		MethodModifiersContext _localctx = new MethodModifiersContext(Context, State);
		EnterRule(_localctx, 68, RULE_methodModifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureFuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(RTGen3.Int, 0); }
		public PureFuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureFuncDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPureFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPureFuncDecl(this);
		}
	}

	[RuleVersion(0)]
	public PureFuncDeclContext pureFuncDecl() {
		PureFuncDeclContext _localctx = new PureFuncDeclContext(Context, State);
		EnterRule(_localctx, 70, RULE_pureFuncDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(AssignEquals);
			State = 459;
			Match(Int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeDef() { return GetToken(RTGen3.TypeDef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		public TypedefDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTypedefDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTypedefDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypedefDeclContext typedefDecl() {
		TypedefDeclContext _localctx = new TypedefDeclContext(Context, State);
		EnterRule(_localctx, 72, RULE_typedefDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(TypeDef);
			State = 462;
			type();
			State = 463;
			type();
			State = 464;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(RTGen3.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(RTGen3.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumImplContext enumImpl() {
			return GetRuleContext<EnumImplContext>(0);
		}
		public EnumDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumDecl(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclContext enumDecl() {
		EnumDeclContext _localctx = new EnumDeclContext(Context, State);
		EnterRule(_localctx, 74, RULE_enumDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(Enum);
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Class) {
				{
				State = 467;
				Match(Class);
				}
			}

			State = 470;
			Match(Identifier);
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBrace || _la==Colon) {
				{
				State = 471;
				enumImpl();
				}
			}

			State = 474;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(RTGen3.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(RTGen3.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(RTGen3.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMembersContext enumMembers() {
			return GetRuleContext<EnumMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(RTGen3.Comma, 0); }
		public EnumImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumImpl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumImpl(this);
		}
	}

	[RuleVersion(0)]
	public EnumImplContext enumImpl() {
		EnumImplContext _localctx = new EnumImplContext(Context, State);
		EnterRule(_localctx, 76, RULE_enumImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 476;
				Match(Colon);
				State = 477;
				type();
				}
			}

			State = 480;
			Match(LBrace);
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 481;
				enumMembers();
				}
			}

			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 484;
				Match(Comma);
				}
			}

			State = 487;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext[] docComment() {
			return GetRuleContexts<DocCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext docComment(int i) {
			return GetRuleContext<DocCommentContext>(i);
		}
		public EnumMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumMembers(this);
		}
	}

	[RuleVersion(0)]
	public EnumMembersContext enumMembers() {
		EnumMembersContext _localctx = new EnumMembersContext(Context, State);
		EnterRule(_localctx, 78, RULE_enumMembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			enumMember();
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 490;
					Match(Comma);
					State = 492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DocCommentBlock) {
						{
						State = 491;
						docComment();
						}
					}

					State = 494;
					enumMember();
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DocCommentBlock) {
				{
				State = 500;
				docComment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(Identifier);
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignEquals) {
				{
				State = 504;
				Match(AssignEquals);
				State = 505;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MacroIdentifier() { return GetToken(RTGen3.MacroIdentifier, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumValue);
		try {
			State = 513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 508;
					cast();
					}
					break;
				}
				State = 511;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512;
				Match(MacroIdentifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 84, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(LParen);
			State = 516;
			type();
			State = 517;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PtrOperatorsContext ptrOperators() {
			return GetRuleContext<PtrOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgsContext templateArgs() {
			return GetRuleContext<TemplateArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RtInterface() { return GetToken(RTGen3.RtInterface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_type);
		int _la;
		try {
			State = 532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MacroIdentifier:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 519;
					@namespace();
					}
					break;
				}
				State = 522;
				Match(Identifier);
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LessThan) {
					{
					State = 523;
					templateArgs();
					}
				}

				State = 526;
				ptrOperators();
				}
				break;
			case RtInterface:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527;
				Match(RtInterface);
				State = 528;
				Match(LParen);
				State = 529;
				type();
				State = 530;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PtrOperatorContext[] ptrOperator() {
			return GetRuleContexts<PtrOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PtrOperatorContext ptrOperator(int i) {
			return GetRuleContext<PtrOperatorContext>(i);
		}
		public PtrOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPtrOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPtrOperators(this);
		}
	}

	[RuleVersion(0)]
	public PtrOperatorsContext ptrOperators() {
		PtrOperatorsContext _localctx = new PtrOperatorsContext(Context, State);
		EnterRule(_localctx, 88, RULE_ptrOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Ampersand || _la==Star) {
				{
				{
				State = 534;
				ptrOperator();
				}
				}
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(RTGen3.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(RTGen3.Ampersand, 0); }
		public PtrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPtrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPtrOperator(this);
		}
	}

	[RuleVersion(0)]
	public PtrOperatorContext ptrOperator() {
		PtrOperatorContext _localctx = new PtrOperatorContext(Context, State);
		EnterRule(_localctx, 90, RULE_ptrOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			_la = TokenStream.LA(1);
			if ( !(_la==Ampersand || _la==Star) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext[] anyIdentifier() {
			return GetRuleContexts<AnyIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier(int i) {
			return GetRuleContext<AnyIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DoubleColon() { return GetTokens(RTGen3.DoubleColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleColon(int i) {
			return GetToken(RTGen3.DoubleColon, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 92, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 542;
					anyIdentifier();
					State = 543;
					Match(DoubleColon);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 547;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 94, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(AssignEquals);
			State = 550;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Quote() { return GetTokens(RTGen3.Quote); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quote(int i) {
			return GetToken(RTGen3.Quote, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinOperatorContext binOperator() {
			return GetRuleContext<BinOperatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullPtr:
			case Int:
			case Bool:
			case BinaryConstant:
			case HexadecimalConstant:
			case String:
				{
				State = 553;
				literal();
				}
				break;
			case LBrace:
				{
				State = 554;
				block();
				}
				break;
			case Quote:
				{
				State = 555;
				Match(Quote);
				State = 556;
				Match(Quote);
				}
				break;
			case MacroIdentifier:
			case Identifier:
				{
				State = 558;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 557;
					@namespace();
					}
					break;
				}
				State = 560;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 569;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 563;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 564;
					binOperator();
					State = 565;
					expression(6);
					}
					} 
				}
				State = 571;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 98, RULE_expr);
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				Match(LParen);
				State = 573;
				expression(0);
				State = 574;
				Match(RParen);
				}
				break;
			case NullPtr:
			case Quote:
			case LBrace:
			case Int:
			case Bool:
			case MacroIdentifier:
			case Identifier:
			case BinaryConstant:
			case HexadecimalConstant:
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 576;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(RTGen3.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe() { return GetToken(RTGen3.Pipe, 0); }
		public BinOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterBinOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitBinOperator(this);
		}
	}

	[RuleVersion(0)]
	public BinOperatorContext binOperator() {
		BinOperatorContext _localctx = new BinOperatorContext(Context, State);
		EnterRule(_localctx, 100, RULE_binOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_la = TokenStream.LA(1);
			if ( !(_la==Ampersand || _la==Pipe) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(RTGen3.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalConstant() { return GetToken(RTGen3.HexadecimalConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryConstant() { return GetToken(RTGen3.BinaryConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(RTGen3.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(RTGen3.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullPtr() { return GetToken(RTGen3.NullPtr, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & 50384020831207425L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(RTGen3.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(RTGen3.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 104, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(LBrace);
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & 53761720551735561L) != 0)) {
				{
				{
				State = 584;
				expressions();
				}
				}
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 590;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 106, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			expression(0);
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 593;
				Match(Comma);
				State = 594;
				expression(0);
				}
				}
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(RTGen3.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncludeNameContext includeName() {
			return GetRuleContext<IncludeNameContext>(0);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 108, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(Include);
			State = 601;
			includeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(RTGen3.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(RTGen3.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncludePathContext includePath() {
			return GetRuleContext<IncludePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(RTGen3.GreaterThan, 0); }
		public IncludeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterIncludeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitIncludeName(this);
		}
	}

	[RuleVersion(0)]
	public IncludeNameContext includeName() {
		IncludeNameContext _localctx = new IncludeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_includeName);
		try {
			State = 608;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 603;
				Match(String);
				}
				break;
			case LessThan:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604;
				Match(LessThan);
				State = 605;
				includePath();
				State = 606;
				Match(GreaterThan);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext[] anyIdentifier() {
			return GetRuleContexts<AnyIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier(int i) {
			return GetRuleContext<AnyIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathSeparatorContext[] pathSeparator() {
			return GetRuleContexts<PathSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathSeparatorContext pathSeparator(int i) {
			return GetRuleContext<PathSeparatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(RTGen3.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(RTGen3.Dot, i);
		}
		public IncludePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterIncludePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitIncludePath(this);
		}
	}

	[RuleVersion(0)]
	public IncludePathContext includePath() {
		IncludePathContext _localctx = new IncludePathContext(Context, State);
		EnterRule(_localctx, 112, RULE_includePath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 22517998145241088L) != 0)) {
				{
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Dot) {
					{
					{
					State = 610;
					Match(Dot);
					}
					}
					State = 615;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 616;
				pathSeparator();
				}
			}

			State = 619;
			anyIdentifier();
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BackSlash || _la==Slash) {
				{
				{
				State = 620;
				pathSeparator();
				State = 621;
				anyIdentifier();
				}
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dot) {
				{
				State = 628;
				Match(Dot);
				State = 629;
				anyIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(RTGen3.Slash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackSlash() { return GetToken(RTGen3.BackSlash, 0); }
		public PathSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPathSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPathSeparator(this);
		}
	}

	[RuleVersion(0)]
	public PathSeparatorContext pathSeparator() {
		PathSeparatorContext _localctx = new PathSeparatorContext(Context, State);
		EnterRule(_localctx, 114, RULE_pathSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			_la = TokenStream.LA(1);
			if ( !(_la==BackSlash || _la==Slash) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MacroIdentifier() { return GetToken(RTGen3.MacroIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroEndContext macroEnd() {
			return GetRuleContext<MacroEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgValueContext macroArgValue() {
			return GetRuleContext<MacroArgValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackSlash() { return GetTokens(RTGen3.BackSlash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackSlash(int i) {
			return GetToken(RTGen3.BackSlash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgumentsContext macroArguments() {
			return GetRuleContext<MacroArgumentsContext>(0);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 116, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(MacroIdentifier);
			State = 650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				{
				State = 635;
				Match(LParen);
				State = 637;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 636;
					Match(BackSlash);
					}
					break;
				}
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
					{
					State = 639;
					macroArguments();
					}
				}

				State = 643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BackSlash) {
					{
					State = 642;
					Match(BackSlash);
					}
				}

				State = 645;
				Match(RParen);
				}
				}
				break;
			case 2:
				{
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LParen) {
					{
					State = 646;
					cast();
					}
				}

				State = 649;
				macroArgValue();
				}
				break;
			}
			State = 652;
			macroEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackSlash() { return GetToken(RTGen3.BackSlash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgumentsContext macroArguments() {
			return GetRuleContext<MacroArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		public MacroEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacroEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacroEnd(this);
		}
	}

	[RuleVersion(0)]
	public MacroEndContext macroEnd() {
		MacroEndContext _localctx = new MacroEndContext(Context, State);
		EnterRule(_localctx, 118, RULE_macroEnd);
		try {
			State = 659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 654;
				Match(BackSlash);
				State = 655;
				macroArguments();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 656;
					Match(Semicolon);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgContext[] macroArg() {
			return GetRuleContexts<MacroArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgContext macroArg(int i) {
			return GetRuleContext<MacroArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackSlash() { return GetTokens(RTGen3.BackSlash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackSlash(int i) {
			return GetToken(RTGen3.BackSlash, i);
		}
		public MacroArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacroArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacroArguments(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgumentsContext macroArguments() {
		MacroArgumentsContext _localctx = new MacroArgumentsContext(Context, State);
		EnterRule(_localctx, 120, RULE_macroArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			macroArg();
			State = 669;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 662;
					Match(Comma);
					State = 664;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BackSlash) {
						{
						State = 663;
						Match(BackSlash);
						}
					}

					State = 666;
					macroArg();
					}
					} 
				}
				State = 671;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgValueContext macroArgValue() {
			return GetRuleContext<MacroArgValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedParameterContext namedParameter() {
			return GetRuleContext<NamedParameterContext>(0);
		}
		public MacroArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacroArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacroArg(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgContext macroArg() {
		MacroArgContext _localctx = new MacroArgContext(Context, State);
		EnterRule(_localctx, 122, RULE_macroArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 672;
				namedParameter();
				}
				break;
			}
			State = 675;
			macroArgValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(RTGen3.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(RTGen3.Const, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		public MacroArgValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArgValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacroArgValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacroArgValue(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgValueContext macroArgValue() {
		MacroArgValueContext _localctx = new MacroArgValueContext(Context, State);
		EnterRule(_localctx, 124, RULE_macroArgValue);
		int _la;
		try {
			State = 689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 677;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 678;
				macro();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 679;
					Match(Const);
					}
				}

				State = 682;
				type();
				State = 687;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 684;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Const) {
						{
						State = 683;
						Match(Const);
						}
					}

					State = 686;
					Match(Identifier);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pragma() { return GetToken(RTGen3.Pragma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDeclContext pragmaDecl() {
			return GetRuleContext<PragmaDeclContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 126, RULE_pragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(Pragma);
			State = 692;
			pragmaDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PragmaDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPragmaDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPragmaDecl(this);
		}
	}

	[RuleVersion(0)]
	public PragmaDeclContext pragmaDecl() {
		PragmaDeclContext _localctx = new PragmaDeclContext(Context, State);
		EnterRule(_localctx, 128, RULE_pragmaDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(Identifier);
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 695;
				Match(LParen);
				State = 697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
					{
					State = 696;
					arguments();
					}
				}

				State = 699;
				Match(RParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 130, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			arg();
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 703;
				Match(Comma);
				State = 704;
				arg();
				}
				}
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(RTGen3.Colon, 0); }
		public NamedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
	}

	[RuleVersion(0)]
	public NamedParameterContext namedParameter() {
		NamedParameterContext _localctx = new NamedParameterContext(Context, State);
		EnterRule(_localctx, 132, RULE_namedParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			Match(Identifier);
			State = 711;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgValueContext argValue() {
			return GetRuleContext<ArgValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedParameterContext namedParameter() {
			return GetRuleContext<NamedParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultArgValueContext defaultArgValue() {
			return GetRuleContext<DefaultArgValueContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 134, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 713;
				namedParameter();
				}
				break;
			}
			State = 716;
			argValue();
			State = 718;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignEquals) {
				{
				State = 717;
				defaultArgValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgValueCtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgValueCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argValueCtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterArgValueCtor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitArgValueCtor(this);
		}
	}

	[RuleVersion(0)]
	public ArgValueCtorContext argValueCtor() {
		ArgValueCtorContext _localctx = new ArgValueCtorContext(Context, State);
		EnterRule(_localctx, 136, RULE_argValueCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			Match(Identifier);
			{
			State = 721;
			Match(LParen);
			State = 723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 722;
				arguments();
				}
			}

			State = 725;
			Match(RParen);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleColon() { return GetToken(RTGen3.DoubleColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(RTGen3.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(RTGen3.Const, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgValueCtorContext argValueCtor() {
			return GetRuleContext<ArgValueCtorContext>(0);
		}
		public ArgValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterArgValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitArgValue(this);
		}
	}

	[RuleVersion(0)]
	public ArgValueContext argValue() {
		ArgValueContext _localctx = new ArgValueContext(Context, State);
		EnterRule(_localctx, 138, RULE_argValue);
		int _la;
		try {
			State = 743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 727;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 728;
				type();
				State = 729;
				Match(DoubleColon);
				State = 730;
				Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 732;
					Match(Const);
					}
				}

				State = 735;
				type();
				State = 740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const || _la==Identifier) {
					{
					State = 737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Const) {
						{
						State = 736;
						Match(Const);
						}
					}

					State = 739;
					Match(Identifier);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 742;
				argValueCtor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultArgValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public DefaultArgValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultArgValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterDefaultArgValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitDefaultArgValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultArgValueContext defaultArgValue() {
		DefaultArgValueContext _localctx = new DefaultArgValueContext(Context, State);
		EnterRule(_localctx, 140, RULE_defaultArgValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(AssignEquals);
			State = 746;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 48: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,749,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,152,8,0,10,0,12,0,155,9,0,1,0,
		1,0,1,1,1,1,1,1,1,2,1,2,1,2,3,2,165,8,2,1,2,1,2,1,2,1,3,3,3,171,8,3,1,
		3,1,3,3,3,175,8,3,1,3,1,3,1,3,3,3,180,8,3,1,3,1,3,3,3,184,8,3,1,3,1,3,
		1,4,3,4,189,8,4,1,4,1,4,3,4,193,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,202,
		8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,210,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,
		10,1,10,1,10,3,10,222,8,10,1,10,3,10,225,8,10,1,11,5,11,228,8,11,10,11,
		12,11,231,9,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,239,8,13,1,14,1,14,1,
		14,1,14,1,14,1,14,1,15,3,15,248,8,15,1,15,1,15,3,15,252,8,15,1,15,1,15,
		1,16,1,16,3,16,258,8,16,1,17,1,17,1,17,1,17,5,17,264,8,17,10,17,12,17,
		267,9,17,3,17,269,8,17,1,17,1,17,1,18,3,18,274,8,18,1,18,1,18,1,19,1,19,
		1,20,1,20,5,20,282,8,20,10,20,12,20,285,9,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,5,21,296,8,21,10,21,12,21,299,9,21,1,21,5,21,302,8,
		21,10,21,12,21,305,9,21,1,21,3,21,308,8,21,1,22,5,22,311,8,22,10,22,12,
		22,314,9,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,5,23,323,8,23,10,23,12,
		23,326,9,23,1,24,1,24,1,24,3,24,331,8,24,1,24,3,24,334,8,24,1,25,1,25,
		1,26,1,26,1,26,1,26,3,26,342,8,26,1,26,3,26,345,8,26,1,26,1,26,1,26,1,
		26,1,26,3,26,352,8,26,1,26,1,26,3,26,356,8,26,1,26,1,26,3,26,360,8,26,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,371,8,27,1,28,1,28,5,
		28,375,8,28,10,28,12,28,378,9,28,1,28,3,28,381,8,28,1,28,1,28,3,28,385,
		8,28,1,28,1,28,1,28,3,28,390,8,28,1,28,1,28,3,28,394,8,28,1,28,3,28,397,
		8,28,1,28,1,28,1,29,1,29,1,29,3,29,404,8,29,1,29,1,29,3,29,408,8,29,1,
		29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,
		30,424,8,30,10,30,12,30,427,9,30,1,31,3,31,430,8,31,1,31,1,31,1,31,1,31,
		1,31,3,31,437,8,31,1,31,1,31,5,31,441,8,31,10,31,12,31,444,9,31,1,31,1,
		31,1,32,1,32,1,32,1,32,1,32,3,32,453,8,32,1,33,1,33,1,34,1,34,1,35,1,35,
		1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,3,37,469,8,37,1,37,1,37,3,37,473,
		8,37,1,37,1,37,1,38,1,38,3,38,479,8,38,1,38,1,38,3,38,483,8,38,1,38,3,
		38,486,8,38,1,38,1,38,1,39,1,39,1,39,3,39,493,8,39,1,39,5,39,496,8,39,
		10,39,12,39,499,9,39,1,39,3,39,502,8,39,1,40,1,40,1,40,3,40,507,8,40,1,
		41,3,41,510,8,41,1,41,1,41,3,41,514,8,41,1,42,1,42,1,42,1,42,1,43,3,43,
		521,8,43,1,43,1,43,3,43,525,8,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,533,
		8,43,1,44,5,44,536,8,44,10,44,12,44,539,9,44,1,45,1,45,1,46,1,46,1,46,
		4,46,546,8,46,11,46,12,46,547,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,559,8,48,1,48,3,48,562,8,48,1,48,1,48,1,48,1,48,5,48,568,8,48,
		10,48,12,48,571,9,48,1,49,1,49,1,49,1,49,1,49,3,49,578,8,49,1,50,1,50,
		1,51,1,51,1,52,1,52,5,52,586,8,52,10,52,12,52,589,9,52,1,52,1,52,1,53,
		1,53,1,53,5,53,596,8,53,10,53,12,53,599,9,53,1,54,1,54,1,54,1,55,1,55,
		1,55,1,55,1,55,3,55,609,8,55,1,56,5,56,612,8,56,10,56,12,56,615,9,56,1,
		56,3,56,618,8,56,1,56,1,56,1,56,1,56,5,56,624,8,56,10,56,12,56,627,9,56,
		1,56,1,56,3,56,631,8,56,1,57,1,57,1,58,1,58,1,58,3,58,638,8,58,1,58,3,
		58,641,8,58,1,58,3,58,644,8,58,1,58,1,58,3,58,648,8,58,1,58,3,58,651,8,
		58,1,58,1,58,1,59,1,59,1,59,3,59,658,8,59,3,59,660,8,59,1,60,1,60,1,60,
		3,60,665,8,60,1,60,5,60,668,8,60,10,60,12,60,671,9,60,1,61,3,61,674,8,
		61,1,61,1,61,1,62,1,62,1,62,3,62,681,8,62,1,62,1,62,3,62,685,8,62,1,62,
		3,62,688,8,62,3,62,690,8,62,1,63,1,63,1,63,1,64,1,64,1,64,3,64,698,8,64,
		1,64,3,64,701,8,64,1,65,1,65,1,65,5,65,706,8,65,10,65,12,65,709,9,65,1,
		66,1,66,1,66,1,67,3,67,715,8,67,1,67,1,67,3,67,719,8,67,1,68,1,68,1,68,
		3,68,724,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,734,8,69,1,
		69,1,69,3,69,738,8,69,1,69,3,69,741,8,69,1,69,3,69,744,8,69,1,70,1,70,
		1,70,1,70,0,1,96,71,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,0,10,3,0,27,28,31,31,42,42,3,0,30,30,35,
		35,61,61,1,0,60,61,2,0,6,6,61,61,1,0,34,35,1,0,31,32,2,0,43,43,55,55,2,
		0,43,43,53,53,4,0,10,10,58,59,62,63,65,65,2,0,23,23,54,54,805,0,153,1,
		0,0,0,2,158,1,0,0,0,4,161,1,0,0,0,6,170,1,0,0,0,8,192,1,0,0,0,10,194,1,
		0,0,0,12,201,1,0,0,0,14,203,1,0,0,0,16,211,1,0,0,0,18,214,1,0,0,0,20,217,
		1,0,0,0,22,229,1,0,0,0,24,232,1,0,0,0,26,238,1,0,0,0,28,240,1,0,0,0,30,
		247,1,0,0,0,32,255,1,0,0,0,34,259,1,0,0,0,36,273,1,0,0,0,38,277,1,0,0,
		0,40,279,1,0,0,0,42,307,1,0,0,0,44,312,1,0,0,0,46,319,1,0,0,0,48,327,1,
		0,0,0,50,335,1,0,0,0,52,359,1,0,0,0,54,370,1,0,0,0,56,376,1,0,0,0,58,400,
		1,0,0,0,60,412,1,0,0,0,62,429,1,0,0,0,64,452,1,0,0,0,66,454,1,0,0,0,68,
		456,1,0,0,0,70,458,1,0,0,0,72,461,1,0,0,0,74,466,1,0,0,0,76,478,1,0,0,
		0,78,489,1,0,0,0,80,503,1,0,0,0,82,513,1,0,0,0,84,515,1,0,0,0,86,532,1,
		0,0,0,88,537,1,0,0,0,90,540,1,0,0,0,92,545,1,0,0,0,94,549,1,0,0,0,96,561,
		1,0,0,0,98,577,1,0,0,0,100,579,1,0,0,0,102,581,1,0,0,0,104,583,1,0,0,0,
		106,592,1,0,0,0,108,600,1,0,0,0,110,608,1,0,0,0,112,617,1,0,0,0,114,632,
		1,0,0,0,116,634,1,0,0,0,118,659,1,0,0,0,120,661,1,0,0,0,122,673,1,0,0,
		0,124,689,1,0,0,0,126,691,1,0,0,0,128,694,1,0,0,0,130,702,1,0,0,0,132,
		710,1,0,0,0,134,714,1,0,0,0,136,720,1,0,0,0,138,743,1,0,0,0,140,745,1,
		0,0,0,142,152,3,4,2,0,143,152,3,28,14,0,144,152,3,26,13,0,145,152,3,14,
		7,0,146,152,3,116,58,0,147,152,3,6,3,0,148,152,3,20,10,0,149,152,3,42,
		21,0,150,152,3,2,1,0,151,142,1,0,0,0,151,143,1,0,0,0,151,144,1,0,0,0,151,
		145,1,0,0,0,151,146,1,0,0,0,151,147,1,0,0,0,151,148,1,0,0,0,151,149,1,
		0,0,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,
		154,156,1,0,0,0,155,153,1,0,0,0,156,157,5,0,0,1,157,1,1,0,0,0,158,159,
		5,46,0,0,159,160,5,70,0,0,160,3,1,0,0,0,161,162,5,40,0,0,162,164,5,16,
		0,0,163,165,3,130,65,0,164,163,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,
		166,167,5,17,0,0,167,168,5,24,0,0,168,5,1,0,0,0,169,171,3,12,6,0,170,169,
		1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,174,3,86,43,0,173,175,5,56,
		0,0,174,173,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,5,61,0,0,177,
		179,5,16,0,0,178,180,3,130,65,0,179,178,1,0,0,0,179,180,1,0,0,0,180,181,
		1,0,0,0,181,183,5,17,0,0,182,184,5,31,0,0,183,182,1,0,0,0,183,184,1,0,
		0,0,184,185,1,0,0,0,185,186,3,8,4,0,186,7,1,0,0,0,187,189,3,70,35,0,188,
		187,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,193,5,24,0,0,191,193,5,
		71,0,0,192,188,1,0,0,0,192,191,1,0,0,0,193,9,1,0,0,0,194,195,5,38,0,0,
		195,196,5,65,0,0,196,11,1,0,0,0,197,202,3,10,5,0,198,202,5,27,0,0,199,
		202,5,42,0,0,200,202,5,28,0,0,201,197,1,0,0,0,201,198,1,0,0,0,201,199,
		1,0,0,0,201,200,1,0,0,0,202,13,1,0,0,0,203,209,5,11,0,0,204,210,3,126,
		63,0,205,210,3,108,54,0,206,210,3,16,8,0,207,210,3,18,9,0,208,210,5,9,
		0,0,209,204,1,0,0,0,209,205,1,0,0,0,209,206,1,0,0,0,209,207,1,0,0,0,209,
		208,1,0,0,0,210,15,1,0,0,0,211,212,5,7,0,0,212,213,3,116,58,0,213,17,1,
		0,0,0,214,215,5,8,0,0,215,216,3,116,58,0,216,19,1,0,0,0,217,218,3,22,11,
		0,218,224,3,86,43,0,219,221,5,61,0,0,220,222,3,94,47,0,221,220,1,0,0,0,
		221,222,1,0,0,0,222,223,1,0,0,0,223,225,5,24,0,0,224,219,1,0,0,0,224,225,
		1,0,0,0,225,21,1,0,0,0,226,228,3,24,12,0,227,226,1,0,0,0,228,231,1,0,0,
		0,229,227,1,0,0,0,229,230,1,0,0,0,230,23,1,0,0,0,231,229,1,0,0,0,232,233,
		7,0,0,0,233,25,1,0,0,0,234,239,3,30,15,0,235,239,3,74,37,0,236,239,3,28,
		14,0,237,239,3,72,36,0,238,234,1,0,0,0,238,235,1,0,0,0,238,236,1,0,0,0,
		238,237,1,0,0,0,239,27,1,0,0,0,240,241,5,26,0,0,241,242,5,61,0,0,242,243,
		5,25,0,0,243,244,3,86,43,0,244,245,5,24,0,0,245,29,1,0,0,0,246,248,3,32,
		16,0,247,246,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,251,3,52,26,0,
		250,252,3,40,20,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,
		254,5,24,0,0,254,31,1,0,0,0,255,257,5,29,0,0,256,258,3,34,17,0,257,256,
		1,0,0,0,257,258,1,0,0,0,258,33,1,0,0,0,259,268,5,14,0,0,260,265,3,36,18,
		0,261,262,5,22,0,0,262,264,3,36,18,0,263,261,1,0,0,0,264,267,1,0,0,0,265,
		263,1,0,0,0,265,266,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,268,260,1,
		0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,5,15,0,0,271,35,1,0,0,0,
		272,274,7,1,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,
		3,86,43,0,276,37,1,0,0,0,277,278,7,2,0,0,278,39,1,0,0,0,279,283,5,18,0,
		0,280,282,3,54,27,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,
		284,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,5,19,0,0,287,41,1,
		0,0,0,288,289,5,47,0,0,289,290,5,20,0,0,290,291,3,46,23,0,291,292,5,21,
		0,0,292,308,1,0,0,0,293,297,5,48,0,0,294,296,3,44,22,0,295,294,1,0,0,0,
		296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,303,1,0,0,0,299,297,
		1,0,0,0,300,302,5,55,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,
		0,303,304,1,0,0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,308,5,50,0,0,307,
		288,1,0,0,0,307,293,1,0,0,0,308,43,1,0,0,0,309,311,5,55,0,0,310,309,1,
		0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,
		314,312,1,0,0,0,315,316,5,20,0,0,316,317,3,46,23,0,317,318,5,21,0,0,318,
		45,1,0,0,0,319,324,3,48,24,0,320,321,5,22,0,0,321,323,3,48,24,0,322,320,
		1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,47,1,0,0,0,
		326,324,1,0,0,0,327,333,3,50,25,0,328,330,5,16,0,0,329,331,3,130,65,0,
		330,329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,334,5,17,0,0,333,328,
		1,0,0,0,333,334,1,0,0,0,334,49,1,0,0,0,335,336,7,3,0,0,336,51,1,0,0,0,
		337,338,7,4,0,0,338,344,3,86,43,0,339,341,5,44,0,0,340,342,5,1,0,0,341,
		340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,345,3,86,43,0,344,339,
		1,0,0,0,344,345,1,0,0,0,345,360,1,0,0,0,346,347,5,3,0,0,347,348,5,16,0,
		0,348,349,3,86,43,0,349,351,5,22,0,0,350,352,5,16,0,0,351,350,1,0,0,0,
		351,352,1,0,0,0,352,353,1,0,0,0,353,355,3,86,43,0,354,356,5,17,0,0,355,
		354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,17,0,0,358,360,1,
		0,0,0,359,337,1,0,0,0,359,346,1,0,0,0,360,53,1,0,0,0,361,371,3,14,7,0,
		362,371,3,116,58,0,363,371,3,20,10,0,364,371,3,26,13,0,365,371,3,56,28,
		0,366,371,3,58,29,0,367,371,3,62,31,0,368,371,3,4,2,0,369,371,3,28,14,
		0,370,361,1,0,0,0,370,362,1,0,0,0,370,363,1,0,0,0,370,364,1,0,0,0,370,
		365,1,0,0,0,370,366,1,0,0,0,370,367,1,0,0,0,370,368,1,0,0,0,370,369,1,
		0,0,0,371,55,1,0,0,0,372,375,3,42,21,0,373,375,3,2,1,0,374,372,1,0,0,0,
		374,373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,380,
		1,0,0,0,378,376,1,0,0,0,379,381,3,68,34,0,380,379,1,0,0,0,380,381,1,0,
		0,0,381,382,1,0,0,0,382,384,3,86,43,0,383,385,5,56,0,0,384,383,1,0,0,0,
		384,385,1,0,0,0,385,386,1,0,0,0,386,387,5,61,0,0,387,389,5,16,0,0,388,
		390,3,130,65,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,393,
		5,17,0,0,392,394,5,31,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,396,1,0,
		0,0,395,397,3,70,35,0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,
		398,399,5,24,0,0,399,57,1,0,0,0,400,401,5,61,0,0,401,403,5,16,0,0,402,
		404,3,130,65,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,407,
		5,17,0,0,406,408,3,60,30,0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,
		0,0,409,410,5,18,0,0,410,411,5,19,0,0,411,59,1,0,0,0,412,413,5,44,0,0,
		413,414,5,61,0,0,414,415,5,16,0,0,415,416,3,130,65,0,416,425,5,17,0,0,
		417,418,5,22,0,0,418,419,5,61,0,0,419,420,5,16,0,0,420,421,3,130,65,0,
		421,422,5,17,0,0,422,424,1,0,0,0,423,417,1,0,0,0,424,427,1,0,0,0,425,423,
		1,0,0,0,425,426,1,0,0,0,426,61,1,0,0,0,427,425,1,0,0,0,428,430,5,39,0,
		0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,3,86,43,0,432,
		433,5,41,0,0,433,434,3,64,32,0,434,436,5,16,0,0,435,437,3,130,65,0,436,
		435,1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,442,5,17,0,0,439,441,3,
		66,33,0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,
		0,443,445,1,0,0,0,444,442,1,0,0,0,445,446,5,71,0,0,446,63,1,0,0,0,447,
		448,5,25,0,0,448,453,5,25,0,0,449,450,5,51,0,0,450,453,5,25,0,0,451,453,
		3,86,43,0,452,447,1,0,0,0,452,449,1,0,0,0,452,451,1,0,0,0,453,65,1,0,0,
		0,454,455,7,5,0,0,455,67,1,0,0,0,456,457,5,36,0,0,457,69,1,0,0,0,458,459,
		5,25,0,0,459,460,5,58,0,0,460,71,1,0,0,0,461,462,5,33,0,0,462,463,3,86,
		43,0,463,464,3,86,43,0,464,465,5,24,0,0,465,73,1,0,0,0,466,468,5,37,0,
		0,467,469,5,35,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,
		472,5,61,0,0,471,473,3,76,38,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,
		1,0,0,0,474,475,5,24,0,0,475,75,1,0,0,0,476,477,5,44,0,0,477,479,3,86,
		43,0,478,476,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,482,5,18,0,0,
		481,483,3,78,39,0,482,481,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,
		486,5,22,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,488,5,
		19,0,0,488,77,1,0,0,0,489,497,3,80,40,0,490,492,5,22,0,0,491,493,3,2,1,
		0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,496,3,80,40,0,495,
		490,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,501,1,
		0,0,0,499,497,1,0,0,0,500,502,3,2,1,0,501,500,1,0,0,0,501,502,1,0,0,0,
		502,79,1,0,0,0,503,506,5,61,0,0,504,505,5,25,0,0,505,507,3,82,41,0,506,
		504,1,0,0,0,506,507,1,0,0,0,507,81,1,0,0,0,508,510,3,84,42,0,509,508,1,
		0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,514,3,98,49,0,512,514,5,60,0,
		0,513,509,1,0,0,0,513,512,1,0,0,0,514,83,1,0,0,0,515,516,5,16,0,0,516,
		517,3,86,43,0,517,518,5,17,0,0,518,85,1,0,0,0,519,521,3,92,46,0,520,519,
		1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,524,5,61,0,0,523,525,3,34,
		17,0,524,523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,533,3,88,44,0,
		527,528,5,2,0,0,528,529,5,16,0,0,529,530,3,86,43,0,530,531,5,17,0,0,531,
		533,1,0,0,0,532,520,1,0,0,0,532,527,1,0,0,0,533,87,1,0,0,0,534,536,3,90,
		45,0,535,534,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,
		89,1,0,0,0,539,537,1,0,0,0,540,541,7,6,0,0,541,91,1,0,0,0,542,543,3,38,
		19,0,543,544,5,45,0,0,544,546,1,0,0,0,545,542,1,0,0,0,546,547,1,0,0,0,
		547,545,1,0,0,0,547,548,1,0,0,0,548,93,1,0,0,0,549,550,5,25,0,0,550,551,
		3,96,48,0,551,95,1,0,0,0,552,553,6,48,-1,0,553,562,3,102,51,0,554,562,
		3,104,52,0,555,556,5,13,0,0,556,562,5,13,0,0,557,559,3,92,46,0,558,557,
		1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,562,5,61,0,0,561,552,1,0,0,
		0,561,554,1,0,0,0,561,555,1,0,0,0,561,558,1,0,0,0,562,569,1,0,0,0,563,
		564,10,5,0,0,564,565,3,100,50,0,565,566,3,96,48,6,566,568,1,0,0,0,567,
		563,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,97,1,0,
		0,0,571,569,1,0,0,0,572,573,5,16,0,0,573,574,3,96,48,0,574,575,5,17,0,
		0,575,578,1,0,0,0,576,578,3,96,48,0,577,572,1,0,0,0,577,576,1,0,0,0,578,
		99,1,0,0,0,579,580,7,7,0,0,580,101,1,0,0,0,581,582,7,8,0,0,582,103,1,0,
		0,0,583,587,5,18,0,0,584,586,3,106,53,0,585,584,1,0,0,0,586,589,1,0,0,
		0,587,585,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,587,1,0,0,0,590,
		591,5,19,0,0,591,105,1,0,0,0,592,597,3,96,48,0,593,594,5,22,0,0,594,596,
		3,96,48,0,595,593,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,
		0,0,598,107,1,0,0,0,599,597,1,0,0,0,600,601,5,6,0,0,601,602,3,110,55,0,
		602,109,1,0,0,0,603,609,5,65,0,0,604,605,5,14,0,0,605,606,3,112,56,0,606,
		607,5,15,0,0,607,609,1,0,0,0,608,603,1,0,0,0,608,604,1,0,0,0,609,111,1,
		0,0,0,610,612,5,52,0,0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,
		613,614,1,0,0,0,614,616,1,0,0,0,615,613,1,0,0,0,616,618,3,114,57,0,617,
		613,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,625,3,38,19,0,620,621,
		3,114,57,0,621,622,3,38,19,0,622,624,1,0,0,0,623,620,1,0,0,0,624,627,1,
		0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,630,1,0,0,0,627,625,1,0,0,0,
		628,629,5,52,0,0,629,631,3,38,19,0,630,628,1,0,0,0,630,631,1,0,0,0,631,
		113,1,0,0,0,632,633,7,9,0,0,633,115,1,0,0,0,634,650,5,60,0,0,635,637,5,
		16,0,0,636,638,5,23,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,
		0,639,641,3,120,60,0,640,639,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,
		644,5,23,0,0,643,642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,651,5,
		17,0,0,646,648,3,84,42,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,
		0,649,651,3,124,62,0,650,635,1,0,0,0,650,647,1,0,0,0,650,651,1,0,0,0,651,
		652,1,0,0,0,652,653,3,118,59,0,653,117,1,0,0,0,654,655,5,23,0,0,655,660,
		3,120,60,0,656,658,5,24,0,0,657,656,1,0,0,0,657,658,1,0,0,0,658,660,1,
		0,0,0,659,654,1,0,0,0,659,657,1,0,0,0,660,119,1,0,0,0,661,669,3,122,61,
		0,662,664,5,22,0,0,663,665,5,23,0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,
		666,1,0,0,0,666,668,3,122,61,0,667,662,1,0,0,0,668,671,1,0,0,0,669,667,
		1,0,0,0,669,670,1,0,0,0,670,121,1,0,0,0,671,669,1,0,0,0,672,674,3,132,
		66,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,3,124,62,
		0,676,123,1,0,0,0,677,690,3,102,51,0,678,690,3,116,58,0,679,681,5,31,0,
		0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,687,3,86,43,0,683,
		685,5,31,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,688,5,
		61,0,0,687,684,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,0,689,677,1,0,0,0,
		689,678,1,0,0,0,689,680,1,0,0,0,690,125,1,0,0,0,691,692,5,5,0,0,692,693,
		3,128,64,0,693,127,1,0,0,0,694,700,5,61,0,0,695,697,5,16,0,0,696,698,3,
		130,65,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,701,5,17,
		0,0,700,695,1,0,0,0,700,701,1,0,0,0,701,129,1,0,0,0,702,707,3,134,67,0,
		703,704,5,22,0,0,704,706,3,134,67,0,705,703,1,0,0,0,706,709,1,0,0,0,707,
		705,1,0,0,0,707,708,1,0,0,0,708,131,1,0,0,0,709,707,1,0,0,0,710,711,5,
		61,0,0,711,712,5,44,0,0,712,133,1,0,0,0,713,715,3,132,66,0,714,713,1,0,
		0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,718,3,138,69,0,717,719,3,140,70,
		0,718,717,1,0,0,0,718,719,1,0,0,0,719,135,1,0,0,0,720,721,5,61,0,0,721,
		723,5,16,0,0,722,724,3,130,65,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,
		1,0,0,0,725,726,5,17,0,0,726,137,1,0,0,0,727,744,3,102,51,0,728,729,3,
		86,43,0,729,730,5,45,0,0,730,731,5,61,0,0,731,744,1,0,0,0,732,734,5,31,
		0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,740,3,86,43,0,
		736,738,5,31,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,741,
		5,61,0,0,740,737,1,0,0,0,740,741,1,0,0,0,741,744,1,0,0,0,742,744,3,136,
		68,0,743,727,1,0,0,0,743,728,1,0,0,0,743,733,1,0,0,0,743,742,1,0,0,0,744,
		139,1,0,0,0,745,746,5,25,0,0,746,747,3,102,51,0,747,141,1,0,0,0,100,151,
		153,164,170,174,179,183,188,192,201,209,221,224,229,238,247,251,257,265,
		268,273,283,297,303,307,312,324,330,333,341,344,351,355,359,370,374,376,
		380,384,389,393,396,403,407,425,429,436,442,452,468,472,478,482,485,492,
		497,501,506,509,513,520,524,532,537,547,558,561,569,577,587,597,608,613,
		617,625,630,637,640,643,647,650,657,659,664,669,673,680,684,687,689,697,
		700,707,714,718,723,733,737,740,743
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
