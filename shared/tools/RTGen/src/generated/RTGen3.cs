//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:/Dewesoft/C++/git/openDAQ2/shared/tools/RTGen/src\RTGen3.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class RTGen3 : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AccessModifier=1, RtInterface=2, DeclareRtIntf=3, InheritsRtIntf=4, Pragma=5, 
		Include=6, Define=7, IfDef=8, EndIf=9, NullPtr=10, HashTag=11, AtSign=12, 
		Quote=13, LessThan=14, GreaterThan=15, LParen=16, RParen=17, LBrace=18, 
		RBrace=19, LBracket=20, RBracket=21, Comma=22, BackSlash=23, Semicolon=24, 
		AssignEquals=25, Using=26, Static=27, Constexpr=28, Template=29, TypeName=30, 
		Const=31, NoExcept=32, TypeDef=33, Struct=34, Class=35, Virtual=36, Enum=37, 
		Extern=38, Friend=39, StaticAssert=40, Operator=41, Inline=42, Ampersand=43, 
		Colon=44, DoubleColon=45, DocCommentBlock=46, CommentStart=47, RtCommentBlock=48, 
		BlockCommentStart=49, BlockCommentEnd=50, Exclamation=51, Dot=52, Pipe=53, 
		Slash=54, Star=55, CallingConvention=56, VarModifiers=57, Int=58, Bool=59, 
		MacroIdentifier=60, Identifier=61, BinaryConstant=62, HexadecimalConstant=63, 
		AlphaNumeric=64, String=65, Whitespace=66, Comment=67, BlockComment=68, 
		Newline=69, IncludePath=70, DocBody=71, MethodBody=72;
	public const int
		RULE_start = 0, RULE_docComment = 1, RULE_static_assert = 2, RULE_globalFunc = 3, 
		RULE_funcBody = 4, RULE_extern = 5, RULE_globalFuncModifiers = 6, RULE_preprocesor = 7, 
		RULE_define = 8, RULE_preprocesorIfDef = 9, RULE_varDecl = 10, RULE_varModifiers = 11, 
		RULE_varModifier = 12, RULE_typeDecl = 13, RULE_usingDecl = 14, RULE_classDecl = 15, 
		RULE_template = 16, RULE_templateArgs = 17, RULE_templateIdentifier = 18, 
		RULE_anyIdentifier = 19, RULE_classImpl = 20, RULE_rtComment = 21, RULE_rtBlockAttributes = 22, 
		RULE_rtAttributes = 23, RULE_rtAttribute = 24, RULE_rtIdentifier = 25, 
		RULE_classType = 26, RULE_classMembers = 27, RULE_methodDecl = 28, RULE_constructor = 29, 
		RULE_initializers = 30, RULE_operator = 31, RULE_operatorType = 32, RULE_methodDriectives = 33, 
		RULE_methodModifiers = 34, RULE_pureFuncDecl = 35, RULE_typedefDecl = 36, 
		RULE_enumDecl = 37, RULE_enumImpl = 38, RULE_enumMembers = 39, RULE_enumMember = 40, 
		RULE_enumValue = 41, RULE_cast = 42, RULE_type = 43, RULE_ptrOperators = 44, 
		RULE_ptrOperator = 45, RULE_namespace = 46, RULE_assignment = 47, RULE_expression = 48, 
		RULE_expr = 49, RULE_binOperator = 50, RULE_literal = 51, RULE_block = 52, 
		RULE_expressions = 53, RULE_include = 54, RULE_includeName = 55, RULE_macro = 56, 
		RULE_macroEnd = 57, RULE_macroArguments = 58, RULE_macroArg = 59, RULE_macroArgValue = 60, 
		RULE_pragma = 61, RULE_pragmaDecl = 62, RULE_arguments = 63, RULE_namedParameter = 64, 
		RULE_arg = 65, RULE_argValueCtor = 66, RULE_argValue = 67, RULE_defaultArgValue = 68;
	public static readonly string[] ruleNames = {
		"start", "docComment", "static_assert", "globalFunc", "funcBody", "extern", 
		"globalFuncModifiers", "preprocesor", "define", "preprocesorIfDef", "varDecl", 
		"varModifiers", "varModifier", "typeDecl", "usingDecl", "classDecl", "template", 
		"templateArgs", "templateIdentifier", "anyIdentifier", "classImpl", "rtComment", 
		"rtBlockAttributes", "rtAttributes", "rtAttribute", "rtIdentifier", "classType", 
		"classMembers", "methodDecl", "constructor", "initializers", "operator", 
		"operatorType", "methodDriectives", "methodModifiers", "pureFuncDecl", 
		"typedefDecl", "enumDecl", "enumImpl", "enumMembers", "enumMember", "enumValue", 
		"cast", "type", "ptrOperators", "ptrOperator", "namespace", "assignment", 
		"expression", "expr", "binOperator", "literal", "block", "expressions", 
		"include", "includeName", "macro", "macroEnd", "macroArguments", "macroArg", 
		"macroArgValue", "pragma", "pragmaDecl", "arguments", "namedParameter", 
		"arg", "argValueCtor", "argValue", "defaultArgValue"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'INHERITS_INTERFACE'", "'pragma'", "'include'", 
		"'define'", "'ifdef'", "'endif'", "'nullptr'", "'#'", "'@'", "'\"'", "'<'", 
		"'>'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'\\'", "';'", 
		"'='", "'using'", "'static'", "'constexpr'", "'template'", "'typename'", 
		"'const'", "'noexcept'", "'typedef'", "'struct'", "'class'", "'virtual'", 
		"'enum'", "'extern'", "'friend'", "'static_assert'", "'operator'", "'inline'", 
		"'&'", "':'", "'::'", null, "'//'", "'/*#'", "'/*'", "'*/'", "'!'", "'.'", 
		"'|'", "'/'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AccessModifier", "RtInterface", "DeclareRtIntf", "InheritsRtIntf", 
		"Pragma", "Include", "Define", "IfDef", "EndIf", "NullPtr", "HashTag", 
		"AtSign", "Quote", "LessThan", "GreaterThan", "LParen", "RParen", "LBrace", 
		"RBrace", "LBracket", "RBracket", "Comma", "BackSlash", "Semicolon", "AssignEquals", 
		"Using", "Static", "Constexpr", "Template", "TypeName", "Const", "NoExcept", 
		"TypeDef", "Struct", "Class", "Virtual", "Enum", "Extern", "Friend", "StaticAssert", 
		"Operator", "Inline", "Ampersand", "Colon", "DoubleColon", "DocCommentBlock", 
		"CommentStart", "RtCommentBlock", "BlockCommentStart", "BlockCommentEnd", 
		"Exclamation", "Dot", "Pipe", "Slash", "Star", "CallingConvention", "VarModifiers", 
		"Int", "Bool", "MacroIdentifier", "Identifier", "BinaryConstant", "HexadecimalConstant", 
		"AlphaNumeric", "String", "Whitespace", "Comment", "BlockComment", "Newline", 
		"IncludePath", "DocBody", "MethodBody"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RTGen3.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RTGen3() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RTGen3(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RTGen3(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RTGen3.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Static_assertContext[] static_assert() {
			return GetRuleContexts<Static_assertContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Static_assertContext static_assert(int i) {
			return GetRuleContext<Static_assertContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext[] usingDecl() {
			return GetRuleContexts<UsingDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext usingDecl(int i) {
			return GetRuleContext<UsingDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext[] typeDecl() {
			return GetRuleContexts<TypeDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl(int i) {
			return GetRuleContext<TypeDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocesorContext[] preprocesor() {
			return GetRuleContexts<PreprocesorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocesorContext preprocesor(int i) {
			return GetRuleContext<PreprocesorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext[] macro() {
			return GetRuleContexts<MacroContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro(int i) {
			return GetRuleContext<MacroContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFuncContext[] globalFunc() {
			return GetRuleContexts<GlobalFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFuncContext globalFunc(int i) {
			return GetRuleContext<GlobalFuncContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext[] rtComment() {
			return GetRuleContexts<RtCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext rtComment(int i) {
			return GetRuleContext<RtCommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext[] docComment() {
			return GetRuleContexts<DocCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext docComment(int i) {
			return GetRuleContext<DocCommentContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3459263068188444684L) != 0)) {
				{
				State = 147;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 138;
					static_assert();
					}
					break;
				case 2:
					{
					State = 139;
					usingDecl();
					}
					break;
				case 3:
					{
					State = 140;
					typeDecl();
					}
					break;
				case 4:
					{
					State = 141;
					preprocesor();
					}
					break;
				case 5:
					{
					State = 142;
					macro();
					}
					break;
				case 6:
					{
					State = 143;
					globalFunc();
					}
					break;
				case 7:
					{
					State = 144;
					varDecl();
					}
					break;
				case 8:
					{
					State = 145;
					rtComment();
					}
					break;
				case 9:
					{
					State = 146;
					docComment();
					}
					break;
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DocCommentBlock() { return GetToken(RTGen3.DocCommentBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DocBody() { return GetToken(RTGen3.DocBody, 0); }
		public DocCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterDocComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitDocComment(this);
		}
	}

	[RuleVersion(0)]
	public DocCommentContext docComment() {
		DocCommentContext _localctx = new DocCommentContext(Context, State);
		EnterRule(_localctx, 2, RULE_docComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(DocCommentBlock);
			State = 155;
			Match(DocBody);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StaticAssert() { return GetToken(RTGen3.StaticAssert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Static_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterStatic_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitStatic_assert(this);
		}
	}

	[RuleVersion(0)]
	public Static_assertContext static_assert() {
		Static_assertContext _localctx = new Static_assertContext(Context, State);
		EnterRule(_localctx, 4, RULE_static_assert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(StaticAssert);
			State = 158;
			Match(LParen);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 159;
				arguments();
				}
			}

			State = 162;
			Match(RParen);
			State = 163;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFuncModifiersContext globalFuncModifiers() {
			return GetRuleContext<GlobalFuncModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallingConvention() { return GetToken(RTGen3.CallingConvention, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(RTGen3.Const, 0); }
		public GlobalFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterGlobalFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitGlobalFunc(this);
		}
	}

	[RuleVersion(0)]
	public GlobalFuncContext globalFunc() {
		GlobalFuncContext _localctx = new GlobalFuncContext(Context, State);
		EnterRule(_localctx, 6, RULE_globalFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4673327071232L) != 0)) {
				{
				State = 165;
				globalFuncModifiers();
				}
			}

			State = 168;
			type();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CallingConvention) {
				{
				State = 169;
				Match(CallingConvention);
				}
			}

			State = 172;
			Match(Identifier);
			State = 173;
			Match(LParen);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 174;
				arguments();
				}
			}

			State = 177;
			Match(RParen);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 178;
				Match(Const);
				}
			}

			State = 181;
			funcBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PureFuncDeclContext pureFuncDecl() {
			return GetRuleContext<PureFuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MethodBody() { return GetToken(RTGen3.MethodBody, 0); }
		public FuncBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterFuncBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitFuncBody(this);
		}
	}

	[RuleVersion(0)]
	public FuncBodyContext funcBody() {
		FuncBodyContext _localctx = new FuncBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcBody);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Semicolon:
			case AssignEquals:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AssignEquals) {
					{
					State = 183;
					pureFuncDecl();
					}
				}

				State = 186;
				Match(Semicolon);
				}
				break;
			case MethodBody:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				Match(MethodBody);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(RTGen3.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(RTGen3.String, 0); }
		public ExternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterExtern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitExtern(this);
		}
	}

	[RuleVersion(0)]
	public ExternContext @extern() {
		ExternContext _localctx = new ExternContext(Context, State);
		EnterRule(_localctx, 10, RULE_extern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(Extern);
			State = 191;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalFuncModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternContext @extern() {
			return GetRuleContext<ExternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(RTGen3.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(RTGen3.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constexpr() { return GetToken(RTGen3.Constexpr, 0); }
		public GlobalFuncModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalFuncModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterGlobalFuncModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitGlobalFuncModifiers(this);
		}
	}

	[RuleVersion(0)]
	public GlobalFuncModifiersContext globalFuncModifiers() {
		GlobalFuncModifiersContext _localctx = new GlobalFuncModifiersContext(Context, State);
		EnterRule(_localctx, 12, RULE_globalFuncModifiers);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Extern:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				@extern();
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(Static);
				}
				break;
			case Inline:
				EnterOuterAlt(_localctx, 3);
				{
				State = 195;
				Match(Inline);
				}
				break;
			case Constexpr:
				EnterOuterAlt(_localctx, 4);
				{
				State = 196;
				Match(Constexpr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocesorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HashTag() { return GetToken(RTGen3.HashTag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaContext pragma() {
			return GetRuleContext<PragmaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocesorIfDefContext preprocesorIfDef() {
			return GetRuleContext<PreprocesorIfDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndIf() { return GetToken(RTGen3.EndIf, 0); }
		public PreprocesorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocesor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPreprocesor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPreprocesor(this);
		}
	}

	[RuleVersion(0)]
	public PreprocesorContext preprocesor() {
		PreprocesorContext _localctx = new PreprocesorContext(Context, State);
		EnterRule(_localctx, 14, RULE_preprocesor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(HashTag);
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Pragma:
				{
				State = 200;
				pragma();
				}
				break;
			case Include:
				{
				State = 201;
				include();
				}
				break;
			case Define:
				{
				State = 202;
				define();
				}
				break;
			case IfDef:
				{
				State = 203;
				preprocesorIfDef();
				}
				break;
			case EndIf:
				{
				State = 204;
				Match(EndIf);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Define() { return GetToken(RTGen3.Define, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitDefine(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 16, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(Define);
			State = 208;
			macro();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocesorIfDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IfDef() { return GetToken(RTGen3.IfDef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public PreprocesorIfDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocesorIfDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPreprocesorIfDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPreprocesorIfDef(this);
		}
	}

	[RuleVersion(0)]
	public PreprocesorIfDefContext preprocesorIfDef() {
		PreprocesorIfDefContext _localctx = new PreprocesorIfDefContext(Context, State);
		EnterRule(_localctx, 18, RULE_preprocesorIfDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(IfDef);
			State = 211;
			macro();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifiersContext varModifiers() {
			return GetRuleContext<VarModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			varModifiers();
			State = 214;
			type();
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 215;
				Match(Identifier);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AssignEquals) {
					{
					State = 216;
					assignment();
					}
				}

				State = 219;
				Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext[] varModifier() {
			return GetRuleContexts<VarModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier(int i) {
			return GetRuleContext<VarModifierContext>(i);
		}
		public VarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterVarModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitVarModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VarModifiersContext varModifiers() {
		VarModifiersContext _localctx = new VarModifiersContext(Context, State);
		EnterRule(_localctx, 22, RULE_varModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4400596647936L) != 0)) {
				{
				{
				State = 222;
				varModifier();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(RTGen3.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constexpr() { return GetToken(RTGen3.Constexpr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(RTGen3.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(RTGen3.Inline, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_varModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4400596647936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext usingDecl() {
			return GetRuleContext<UsingDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefDeclContext typedefDecl() {
			return GetRuleContext<TypedefDeclContext>(0);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeDecl);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclareRtIntf:
			case Template:
			case Struct:
			case Class:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				classDecl();
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				enumDecl();
				}
				break;
			case Using:
				EnterOuterAlt(_localctx, 3);
				{
				State = 232;
				usingDecl();
				}
				break;
			case TypeDef:
				EnterOuterAlt(_localctx, 4);
				{
				State = 233;
				typedefDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(RTGen3.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		public UsingDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterUsingDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitUsingDecl(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclContext usingDecl() {
		UsingDeclContext _localctx = new UsingDeclContext(Context, State);
		EnterRule(_localctx, 28, RULE_usingDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(Using);
			State = 237;
			Match(Identifier);
			State = 238;
			Match(AssignEquals);
			State = 239;
			type();
			State = 240;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassImplContext classImpl() {
			return GetRuleContext<ClassImplContext>(0);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 242;
				template();
				}
			}

			State = 245;
			classType();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBrace) {
				{
				State = 246;
				classImpl();
				}
			}

			State = 249;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(RTGen3.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgsContext templateArgs() {
			return GetRuleContext<TemplateArgsContext>(0);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 32, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(Template);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 252;
				templateArgs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(RTGen3.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(RTGen3.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateIdentifierContext[] templateIdentifier() {
			return GetRuleContexts<TemplateIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateIdentifierContext templateIdentifier(int i) {
			return GetRuleContext<TemplateIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public TemplateArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTemplateArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTemplateArgs(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgsContext templateArgs() {
		TemplateArgsContext _localctx = new TemplateArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_templateArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(LessThan);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3458764549254021124L) != 0)) {
				{
				State = 256;
				templateIdentifier();
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 257;
					Match(Comma);
					State = 258;
					templateIdentifier();
					}
					}
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 266;
			Match(GreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeName() { return GetToken(RTGen3.TypeName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(RTGen3.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		public TemplateIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTemplateIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTemplateIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public TemplateIdentifierContext templateIdentifier() {
		TemplateIdentifierContext _localctx = new TemplateIdentifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_templateIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 268;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843044647174144L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 271;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MacroIdentifier() { return GetToken(RTGen3.MacroIdentifier, 0); }
		public AnyIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterAnyIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitAnyIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public AnyIdentifierContext anyIdentifier() {
		AnyIdentifierContext _localctx = new AnyIdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_anyIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_la = TokenStream.LA(1);
			if ( !(_la==MacroIdentifier || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(RTGen3.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(RTGen3.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassMembersContext[] classMembers() {
			return GetRuleContexts<ClassMembersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMembersContext classMembers(int i) {
			return GetRuleContext<ClassMembersContext>(i);
		}
		public ClassImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classImpl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterClassImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitClassImpl(this);
		}
	}

	[RuleVersion(0)]
	public ClassImplContext classImpl() {
		ClassImplContext _localctx = new ClassImplContext(Context, State);
		EnterRule(_localctx, 40, RULE_classImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(LBrace);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3459263411785828364L) != 0)) {
				{
				{
				State = 276;
				classMembers();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 282;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommentStart() { return GetToken(RTGen3.CommentStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBracket() { return GetToken(RTGen3.LBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtAttributesContext rtAttributes() {
			return GetRuleContext<RtAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBracket() { return GetToken(RTGen3.RBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RtCommentBlock() { return GetToken(RTGen3.RtCommentBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BlockCommentEnd() { return GetToken(RTGen3.BlockCommentEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtBlockAttributesContext[] rtBlockAttributes() {
			return GetRuleContexts<RtBlockAttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtBlockAttributesContext rtBlockAttributes(int i) {
			return GetRuleContext<RtBlockAttributesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(RTGen3.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(RTGen3.Star, i);
		}
		public RtCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtComment(this);
		}
	}

	[RuleVersion(0)]
	public RtCommentContext rtComment() {
		RtCommentContext _localctx = new RtCommentContext(Context, State);
		EnterRule(_localctx, 42, RULE_rtComment);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CommentStart:
				{
				State = 284;
				Match(CommentStart);
				State = 285;
				Match(LBracket);
				State = 286;
				rtAttributes();
				State = 287;
				Match(RBracket);
				}
				break;
			case RtCommentBlock:
				{
				State = 289;
				Match(RtCommentBlock);
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 290;
						rtBlockAttributes();
						}
						} 
					}
					State = 295;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Star) {
					{
					{
					State = 296;
					Match(Star);
					}
					}
					State = 301;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 302;
				Match(BlockCommentEnd);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtBlockAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBracket() { return GetToken(RTGen3.LBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtAttributesContext rtAttributes() {
			return GetRuleContext<RtAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBracket() { return GetToken(RTGen3.RBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(RTGen3.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(RTGen3.Star, i);
		}
		public RtBlockAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtBlockAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtBlockAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtBlockAttributes(this);
		}
	}

	[RuleVersion(0)]
	public RtBlockAttributesContext rtBlockAttributes() {
		RtBlockAttributesContext _localctx = new RtBlockAttributesContext(Context, State);
		EnterRule(_localctx, 44, RULE_rtBlockAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Star) {
				{
				{
				State = 305;
				Match(Star);
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 311;
			Match(LBracket);
			State = 312;
			rtAttributes();
			State = 313;
			Match(RBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtAttributeContext[] rtAttribute() {
			return GetRuleContexts<RtAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtAttributeContext rtAttribute(int i) {
			return GetRuleContext<RtAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public RtAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtAttributes(this);
		}
	}

	[RuleVersion(0)]
	public RtAttributesContext rtAttributes() {
		RtAttributesContext _localctx = new RtAttributesContext(Context, State);
		EnterRule(_localctx, 46, RULE_rtAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			rtAttribute();
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 316;
				Match(Comma);
				State = 317;
				rtAttribute();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtIdentifierContext rtIdentifier() {
			return GetRuleContext<RtIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public RtAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtAttribute(this);
		}
	}

	[RuleVersion(0)]
	public RtAttributeContext rtAttribute() {
		RtAttributeContext _localctx = new RtAttributeContext(Context, State);
		EnterRule(_localctx, 48, RULE_rtAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			rtIdentifier();
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 324;
				Match(LParen);
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
					{
					State = 325;
					arguments();
					}
				}

				State = 328;
				Match(RParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(RTGen3.Include, 0); }
		public RtIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterRtIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitRtIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public RtIdentifierContext rtIdentifier() {
		RtIdentifierContext _localctx = new RtIdentifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_rtIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_la = TokenStream.LA(1);
			if ( !(_la==Include || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public TypeContext interfaceType;
		public TypeContext baseType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(RTGen3.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(RTGen3.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(RTGen3.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AccessModifier() { return GetToken(RTGen3.AccessModifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclareRtIntf() { return GetToken(RTGen3.DeclareRtIntf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LParen() { return GetTokens(RTGen3.LParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen(int i) {
			return GetToken(RTGen3.LParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(RTGen3.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RParen() { return GetTokens(RTGen3.RParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen(int i) {
			return GetToken(RTGen3.RParen, i);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_classType);
		int _la;
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Struct:
			case Class:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				_la = TokenStream.LA(1);
				if ( !(_la==Struct || _la==Class) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 334;
				_localctx.interfaceType = type();
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 335;
					Match(Colon);
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AccessModifier) {
						{
						State = 336;
						Match(AccessModifier);
						}
					}

					State = 339;
					_localctx.baseType = type();
					}
				}

				}
				break;
			case DeclareRtIntf:
				EnterOuterAlt(_localctx, 2);
				{
				State = 342;
				Match(DeclareRtIntf);
				State = 343;
				Match(LParen);
				State = 344;
				_localctx.interfaceType = type();
				State = 345;
				Match(Comma);
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LParen) {
					{
					State = 346;
					Match(LParen);
					}
				}

				State = 349;
				_localctx.baseType = type();
				State = 351;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 350;
					Match(RParen);
					}
					break;
				}
				State = 353;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreprocesorContext preprocesor() {
			return GetRuleContext<PreprocesorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl() {
			return GetRuleContext<TypeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl() {
			return GetRuleContext<MethodDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Static_assertContext static_assert() {
			return GetRuleContext<Static_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDeclContext usingDecl() {
			return GetRuleContext<UsingDeclContext>(0);
		}
		public ClassMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterClassMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitClassMembers(this);
		}
	}

	[RuleVersion(0)]
	public ClassMembersContext classMembers() {
		ClassMembersContext _localctx = new ClassMembersContext(Context, State);
		EnterRule(_localctx, 54, RULE_classMembers);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357;
				preprocesor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				macro();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359;
				varDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 360;
				typeDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 361;
				methodDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 362;
				constructor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 363;
				@operator();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 364;
				static_assert();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 365;
				usingDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext[] rtComment() {
			return GetRuleContexts<RtCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtCommentContext rtComment(int i) {
			return GetRuleContext<RtCommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext[] docComment() {
			return GetRuleContexts<DocCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext docComment(int i) {
			return GetRuleContext<DocCommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifiersContext methodModifiers() {
			return GetRuleContext<MethodModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallingConvention() { return GetToken(RTGen3.CallingConvention, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(RTGen3.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PureFuncDeclContext pureFuncDecl() {
			return GetRuleContext<PureFuncDeclContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 56, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 492581209243648L) != 0)) {
				{
				State = 370;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CommentStart:
				case RtCommentBlock:
					{
					State = 368;
					rtComment();
					}
					break;
				case DocCommentBlock:
					{
					State = 369;
					docComment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Virtual) {
				{
				State = 375;
				methodModifiers();
				}
			}

			State = 378;
			type();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CallingConvention) {
				{
				State = 379;
				Match(CallingConvention);
				}
			}

			State = 382;
			Match(Identifier);
			State = 383;
			Match(LParen);
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 384;
				arguments();
				}
			}

			State = 387;
			Match(RParen);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 388;
				Match(Const);
				}
			}

			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignEquals) {
				{
				State = 391;
				pureFuncDecl();
				}
			}

			State = 394;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(RTGen3.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(RTGen3.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializersContext initializers() {
			return GetRuleContext<InitializersContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 58, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(Identifier);
			State = 397;
			Match(LParen);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 398;
				arguments();
				}
			}

			State = 401;
			Match(RParen);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 402;
				initializers();
				}
			}

			State = 405;
			Match(LBrace);
			State = 406;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(RTGen3.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(RTGen3.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(RTGen3.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LParen() { return GetTokens(RTGen3.LParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen(int i) {
			return GetToken(RTGen3.LParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext[] arguments() {
			return GetRuleContexts<ArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments(int i) {
			return GetRuleContext<ArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RParen() { return GetTokens(RTGen3.RParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen(int i) {
			return GetToken(RTGen3.RParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public InitializersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterInitializers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitInitializers(this);
		}
	}

	[RuleVersion(0)]
	public InitializersContext initializers() {
		InitializersContext _localctx = new InitializersContext(Context, State);
		EnterRule(_localctx, 60, RULE_initializers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			Match(Colon);
			State = 409;
			Match(Identifier);
			State = 410;
			Match(LParen);
			State = 411;
			arguments();
			State = 412;
			Match(RParen);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 413;
				Match(Comma);
				State = 414;
				Match(Identifier);
				State = 415;
				Match(LParen);
				State = 416;
				arguments();
				State = 417;
				Match(RParen);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(RTGen3.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorTypeContext operatorType() {
			return GetRuleContext<OperatorTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MethodBody() { return GetToken(RTGen3.MethodBody, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Friend() { return GetToken(RTGen3.Friend, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDriectivesContext[] methodDriectives() {
			return GetRuleContexts<MethodDriectivesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDriectivesContext methodDriectives(int i) {
			return GetRuleContext<MethodDriectivesContext>(i);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Friend) {
				{
				State = 424;
				Match(Friend);
				}
			}

			State = 427;
			type();
			State = 428;
			Match(Operator);
			State = 429;
			operatorType();
			State = 430;
			Match(LParen);
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 431;
				arguments();
				}
			}

			State = 434;
			Match(RParen);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Const || _la==NoExcept) {
				{
				{
				State = 435;
				methodDriectives();
				}
				}
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 441;
			Match(MethodBody);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AssignEquals() { return GetTokens(RTGen3.AssignEquals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals(int i) {
			return GetToken(RTGen3.AssignEquals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation() { return GetToken(RTGen3.Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OperatorTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterOperatorType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitOperatorType(this);
		}
	}

	[RuleVersion(0)]
	public OperatorTypeContext operatorType() {
		OperatorTypeContext _localctx = new OperatorTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_operatorType);
		try {
			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AssignEquals:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443;
				Match(AssignEquals);
				State = 444;
				Match(AssignEquals);
				}
				break;
			case Exclamation:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				Match(Exclamation);
				State = 446;
				Match(AssignEquals);
				}
				break;
			case RtInterface:
			case MacroIdentifier:
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDriectivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(RTGen3.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NoExcept() { return GetToken(RTGen3.NoExcept, 0); }
		public MethodDriectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDriectives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMethodDriectives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMethodDriectives(this);
		}
	}

	[RuleVersion(0)]
	public MethodDriectivesContext methodDriectives() {
		MethodDriectivesContext _localctx = new MethodDriectivesContext(Context, State);
		EnterRule(_localctx, 66, RULE_methodDriectives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			_la = TokenStream.LA(1);
			if ( !(_la==Const || _la==NoExcept) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(RTGen3.Virtual, 0); }
		public MethodModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMethodModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMethodModifiers(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifiersContext methodModifiers() {
		MethodModifiersContext _localctx = new MethodModifiersContext(Context, State);
		EnterRule(_localctx, 68, RULE_methodModifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureFuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(RTGen3.Int, 0); }
		public PureFuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureFuncDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPureFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPureFuncDecl(this);
		}
	}

	[RuleVersion(0)]
	public PureFuncDeclContext pureFuncDecl() {
		PureFuncDeclContext _localctx = new PureFuncDeclContext(Context, State);
		EnterRule(_localctx, 70, RULE_pureFuncDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(AssignEquals);
			State = 455;
			Match(Int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeDef() { return GetToken(RTGen3.TypeDef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		public TypedefDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterTypedefDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitTypedefDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypedefDeclContext typedefDecl() {
		TypedefDeclContext _localctx = new TypedefDeclContext(Context, State);
		EnterRule(_localctx, 72, RULE_typedefDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			Match(TypeDef);
			State = 458;
			type();
			State = 459;
			type();
			State = 460;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(RTGen3.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(RTGen3.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumImplContext enumImpl() {
			return GetRuleContext<EnumImplContext>(0);
		}
		public EnumDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumDecl(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclContext enumDecl() {
		EnumDeclContext _localctx = new EnumDeclContext(Context, State);
		EnterRule(_localctx, 74, RULE_enumDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(Enum);
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Class) {
				{
				State = 463;
				Match(Class);
				}
			}

			State = 466;
			Match(Identifier);
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBrace || _la==Colon) {
				{
				State = 467;
				enumImpl();
				}
			}

			State = 470;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(RTGen3.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(RTGen3.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(RTGen3.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMembersContext enumMembers() {
			return GetRuleContext<EnumMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(RTGen3.Comma, 0); }
		public EnumImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumImpl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumImpl(this);
		}
	}

	[RuleVersion(0)]
	public EnumImplContext enumImpl() {
		EnumImplContext _localctx = new EnumImplContext(Context, State);
		EnterRule(_localctx, 76, RULE_enumImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 472;
				Match(Colon);
				State = 473;
				type();
				}
			}

			State = 476;
			Match(LBrace);
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 477;
				enumMembers();
				}
			}

			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 480;
				Match(Comma);
				}
			}

			State = 483;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext[] docComment() {
			return GetRuleContexts<DocCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentContext docComment(int i) {
			return GetRuleContext<DocCommentContext>(i);
		}
		public EnumMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumMembers(this);
		}
	}

	[RuleVersion(0)]
	public EnumMembersContext enumMembers() {
		EnumMembersContext _localctx = new EnumMembersContext(Context, State);
		EnterRule(_localctx, 78, RULE_enumMembers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			enumMember();
			State = 493;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 486;
					Match(Comma);
					State = 488;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DocCommentBlock) {
						{
						State = 487;
						docComment();
						}
					}

					State = 490;
					enumMember();
					}
					} 
				}
				State = 495;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DocCommentBlock) {
				{
				State = 496;
				docComment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(Identifier);
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignEquals) {
				{
				State = 500;
				Match(AssignEquals);
				State = 501;
				enumValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MacroIdentifier() { return GetToken(RTGen3.MacroIdentifier, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumValue);
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 504;
					cast();
					}
					break;
				}
				State = 507;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508;
				Match(MacroIdentifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 84, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(LParen);
			State = 512;
			type();
			State = 513;
			Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PtrOperatorsContext ptrOperators() {
			return GetRuleContext<PtrOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateArgsContext templateArgs() {
			return GetRuleContext<TemplateArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RtInterface() { return GetToken(RTGen3.RtInterface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_type);
		int _la;
		try {
			State = 528;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MacroIdentifier:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 515;
					@namespace();
					}
					break;
				}
				State = 518;
				Match(Identifier);
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LessThan) {
					{
					State = 519;
					templateArgs();
					}
				}

				State = 522;
				ptrOperators();
				}
				break;
			case RtInterface:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523;
				Match(RtInterface);
				State = 524;
				Match(LParen);
				State = 525;
				type();
				State = 526;
				Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PtrOperatorContext[] ptrOperator() {
			return GetRuleContexts<PtrOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PtrOperatorContext ptrOperator(int i) {
			return GetRuleContext<PtrOperatorContext>(i);
		}
		public PtrOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPtrOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPtrOperators(this);
		}
	}

	[RuleVersion(0)]
	public PtrOperatorsContext ptrOperators() {
		PtrOperatorsContext _localctx = new PtrOperatorsContext(Context, State);
		EnterRule(_localctx, 88, RULE_ptrOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Ampersand || _la==Star) {
				{
				{
				State = 530;
				ptrOperator();
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(RTGen3.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(RTGen3.Ampersand, 0); }
		public PtrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPtrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPtrOperator(this);
		}
	}

	[RuleVersion(0)]
	public PtrOperatorContext ptrOperator() {
		PtrOperatorContext _localctx = new PtrOperatorContext(Context, State);
		EnterRule(_localctx, 90, RULE_ptrOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			_la = TokenStream.LA(1);
			if ( !(_la==Ampersand || _la==Star) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext[] anyIdentifier() {
			return GetRuleContexts<AnyIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyIdentifierContext anyIdentifier(int i) {
			return GetRuleContext<AnyIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DoubleColon() { return GetTokens(RTGen3.DoubleColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleColon(int i) {
			return GetToken(RTGen3.DoubleColon, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 92, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 538;
					anyIdentifier();
					State = 539;
					Match(DoubleColon);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 543;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 94, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(AssignEquals);
			State = 546;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Quote() { return GetTokens(RTGen3.Quote); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quote(int i) {
			return GetToken(RTGen3.Quote, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinOperatorContext binOperator() {
			return GetRuleContext<BinOperatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullPtr:
			case Int:
			case Bool:
			case BinaryConstant:
			case HexadecimalConstant:
			case String:
				{
				State = 549;
				literal();
				}
				break;
			case LBrace:
				{
				State = 550;
				block();
				}
				break;
			case Quote:
				{
				State = 551;
				Match(Quote);
				State = 552;
				Match(Quote);
				}
				break;
			case MacroIdentifier:
			case Identifier:
				{
				State = 554;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 553;
					@namespace();
					}
					break;
				}
				State = 556;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 565;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 559;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 560;
					binOperator();
					State = 561;
					expression(6);
					}
					} 
				}
				State = 567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 98, RULE_expr);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568;
				Match(LParen);
				State = 569;
				expression(0);
				State = 570;
				Match(RParen);
				}
				break;
			case NullPtr:
			case Quote:
			case LBrace:
			case Int:
			case Bool:
			case MacroIdentifier:
			case Identifier:
			case BinaryConstant:
			case HexadecimalConstant:
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(RTGen3.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe() { return GetToken(RTGen3.Pipe, 0); }
		public BinOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterBinOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitBinOperator(this);
		}
	}

	[RuleVersion(0)]
	public BinOperatorContext binOperator() {
		BinOperatorContext _localctx = new BinOperatorContext(Context, State);
		EnterRule(_localctx, 100, RULE_binOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			_la = TokenStream.LA(1);
			if ( !(_la==Ampersand || _la==Pipe) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(RTGen3.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalConstant() { return GetToken(RTGen3.HexadecimalConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryConstant() { return GetToken(RTGen3.BinaryConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(RTGen3.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(RTGen3.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullPtr() { return GetToken(RTGen3.NullPtr, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & 50384020831207425L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBrace() { return GetToken(RTGen3.LBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBrace() { return GetToken(RTGen3.RBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 104, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(LBrace);
			State = 583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & 53761720551735561L) != 0)) {
				{
				{
				State = 580;
				expressions();
				}
				}
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 586;
			Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 106, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			expression(0);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 589;
				Match(Comma);
				State = 590;
				expression(0);
				}
				}
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(RTGen3.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncludeNameContext includeName() {
			return GetRuleContext<IncludeNameContext>(0);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 108, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(Include);
			State = 597;
			includeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(RTGen3.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncludePath() { return GetToken(RTGen3.IncludePath, 0); }
		public IncludeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterIncludeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitIncludeName(this);
		}
	}

	[RuleVersion(0)]
	public IncludeNameContext includeName() {
		IncludeNameContext _localctx = new IncludeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_includeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			_la = TokenStream.LA(1);
			if ( !(_la==String || _la==IncludePath) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MacroIdentifier() { return GetToken(RTGen3.MacroIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroEndContext macroEnd() {
			return GetRuleContext<MacroEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgValueContext macroArgValue() {
			return GetRuleContext<MacroArgValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackSlash() { return GetTokens(RTGen3.BackSlash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackSlash(int i) {
			return GetToken(RTGen3.BackSlash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgumentsContext macroArguments() {
			return GetRuleContext<MacroArgumentsContext>(0);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 112, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(MacroIdentifier);
			State = 617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				{
				State = 602;
				Match(LParen);
				State = 604;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 603;
					Match(BackSlash);
					}
					break;
				}
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
					{
					State = 606;
					macroArguments();
					}
				}

				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BackSlash) {
					{
					State = 609;
					Match(BackSlash);
					}
				}

				State = 612;
				Match(RParen);
				}
				}
				break;
			case 2:
				{
				State = 614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LParen) {
					{
					State = 613;
					cast();
					}
				}

				State = 616;
				macroArgValue();
				}
				break;
			}
			State = 619;
			macroEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackSlash() { return GetToken(RTGen3.BackSlash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgumentsContext macroArguments() {
			return GetRuleContext<MacroArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(RTGen3.Semicolon, 0); }
		public MacroEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacroEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacroEnd(this);
		}
	}

	[RuleVersion(0)]
	public MacroEndContext macroEnd() {
		MacroEndContext _localctx = new MacroEndContext(Context, State);
		EnterRule(_localctx, 114, RULE_macroEnd);
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 621;
				Match(BackSlash);
				State = 622;
				macroArguments();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 624;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 623;
					Match(Semicolon);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgContext[] macroArg() {
			return GetRuleContexts<MacroArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgContext macroArg(int i) {
			return GetRuleContext<MacroArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackSlash() { return GetTokens(RTGen3.BackSlash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackSlash(int i) {
			return GetToken(RTGen3.BackSlash, i);
		}
		public MacroArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacroArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacroArguments(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgumentsContext macroArguments() {
		MacroArgumentsContext _localctx = new MacroArgumentsContext(Context, State);
		EnterRule(_localctx, 116, RULE_macroArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			macroArg();
			State = 636;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 629;
					Match(Comma);
					State = 631;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BackSlash) {
						{
						State = 630;
						Match(BackSlash);
						}
					}

					State = 633;
					macroArg();
					}
					} 
				}
				State = 638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroArgValueContext macroArgValue() {
			return GetRuleContext<MacroArgValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedParameterContext namedParameter() {
			return GetRuleContext<NamedParameterContext>(0);
		}
		public MacroArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacroArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacroArg(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgContext macroArg() {
		MacroArgContext _localctx = new MacroArgContext(Context, State);
		EnterRule(_localctx, 118, RULE_macroArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 639;
				namedParameter();
				}
				break;
			}
			State = 642;
			macroArgValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(RTGen3.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(RTGen3.Const, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		public MacroArgValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArgValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterMacroArgValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitMacroArgValue(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgValueContext macroArgValue() {
		MacroArgValueContext _localctx = new MacroArgValueContext(Context, State);
		EnterRule(_localctx, 120, RULE_macroArgValue);
		int _la;
		try {
			State = 656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645;
				macro();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 646;
					Match(Const);
					}
				}

				State = 649;
				type();
				State = 654;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 651;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Const) {
						{
						State = 650;
						Match(Const);
						}
					}

					State = 653;
					Match(Identifier);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pragma() { return GetToken(RTGen3.Pragma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDeclContext pragmaDecl() {
			return GetRuleContext<PragmaDeclContext>(0);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 122, RULE_pragma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(Pragma);
			State = 659;
			pragmaDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PragmaDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterPragmaDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitPragmaDecl(this);
		}
	}

	[RuleVersion(0)]
	public PragmaDeclContext pragmaDecl() {
		PragmaDeclContext _localctx = new PragmaDeclContext(Context, State);
		EnterRule(_localctx, 124, RULE_pragmaDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(Identifier);
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 662;
				Match(LParen);
				State = 664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
					{
					State = 663;
					arguments();
					}
				}

				State = 666;
				Match(RParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(RTGen3.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(RTGen3.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 126, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			arg();
			State = 674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 670;
				Match(Comma);
				State = 671;
				arg();
				}
				}
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(RTGen3.Colon, 0); }
		public NamedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
	}

	[RuleVersion(0)]
	public NamedParameterContext namedParameter() {
		NamedParameterContext _localctx = new NamedParameterContext(Context, State);
		EnterRule(_localctx, 128, RULE_namedParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			Match(Identifier);
			State = 678;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgValueContext argValue() {
			return GetRuleContext<ArgValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedParameterContext namedParameter() {
			return GetRuleContext<NamedParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultArgValueContext defaultArgValue() {
			return GetRuleContext<DefaultArgValueContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 130, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 680;
				namedParameter();
				}
				break;
			}
			State = 683;
			argValue();
			State = 685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignEquals) {
				{
				State = 684;
				defaultArgValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgValueCtorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LParen() { return GetToken(RTGen3.LParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RParen() { return GetToken(RTGen3.RParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgValueCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argValueCtor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterArgValueCtor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitArgValueCtor(this);
		}
	}

	[RuleVersion(0)]
	public ArgValueCtorContext argValueCtor() {
		ArgValueCtorContext _localctx = new ArgValueCtorContext(Context, State);
		EnterRule(_localctx, 132, RULE_argValueCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(Identifier);
			{
			State = 688;
			Match(LParen);
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -4683743611928444671L) != 0)) {
				{
				State = 689;
				arguments();
				}
			}

			State = 692;
			Match(RParen);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleColon() { return GetToken(RTGen3.DoubleColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RTGen3.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(RTGen3.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(RTGen3.Const, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgValueCtorContext argValueCtor() {
			return GetRuleContext<ArgValueCtorContext>(0);
		}
		public ArgValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterArgValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitArgValue(this);
		}
	}

	[RuleVersion(0)]
	public ArgValueContext argValue() {
		ArgValueContext _localctx = new ArgValueContext(Context, State);
		EnterRule(_localctx, 134, RULE_argValue);
		int _la;
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				type();
				State = 696;
				Match(DoubleColon);
				State = 697;
				Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 699;
					Match(Const);
					}
				}

				State = 702;
				type();
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const || _la==Identifier) {
					{
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Const) {
						{
						State = 703;
						Match(Const);
						}
					}

					State = 706;
					Match(Identifier);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 709;
				argValueCtor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultArgValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignEquals() { return GetToken(RTGen3.AssignEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public DefaultArgValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultArgValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.EnterDefaultArgValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRTGen3Listener typedListener = listener as IRTGen3Listener;
			if (typedListener != null) typedListener.ExitDefaultArgValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultArgValueContext defaultArgValue() {
		DefaultArgValueContext _localctx = new DefaultArgValueContext(Context, State);
		EnterRule(_localctx, 136, RULE_defaultArgValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(AssignEquals);
			State = 713;
			literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 48: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,72,716,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,5,0,148,8,0,10,0,12,0,151,9,0,1,0,1,0,1,1,1,1,1,1,1,2,
		1,2,1,2,3,2,161,8,2,1,2,1,2,1,2,1,3,3,3,167,8,3,1,3,1,3,3,3,171,8,3,1,
		3,1,3,1,3,3,3,176,8,3,1,3,1,3,3,3,180,8,3,1,3,1,3,1,4,3,4,185,8,4,1,4,
		1,4,3,4,189,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,198,8,6,1,7,1,7,1,7,1,
		7,1,7,1,7,3,7,206,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,
		218,8,10,1,10,3,10,221,8,10,1,11,5,11,224,8,11,10,11,12,11,227,9,11,1,
		12,1,12,1,13,1,13,1,13,1,13,3,13,235,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,15,3,15,244,8,15,1,15,1,15,3,15,248,8,15,1,15,1,15,1,16,1,16,3,16,254,
		8,16,1,17,1,17,1,17,1,17,5,17,260,8,17,10,17,12,17,263,9,17,3,17,265,8,
		17,1,17,1,17,1,18,3,18,270,8,18,1,18,1,18,1,19,1,19,1,20,1,20,5,20,278,
		8,20,10,20,12,20,281,9,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		5,21,292,8,21,10,21,12,21,295,9,21,1,21,5,21,298,8,21,10,21,12,21,301,
		9,21,1,21,3,21,304,8,21,1,22,5,22,307,8,22,10,22,12,22,310,9,22,1,22,1,
		22,1,22,1,22,1,23,1,23,1,23,5,23,319,8,23,10,23,12,23,322,9,23,1,24,1,
		24,1,24,3,24,327,8,24,1,24,3,24,330,8,24,1,25,1,25,1,26,1,26,1,26,1,26,
		3,26,338,8,26,1,26,3,26,341,8,26,1,26,1,26,1,26,1,26,1,26,3,26,348,8,26,
		1,26,1,26,3,26,352,8,26,1,26,1,26,3,26,356,8,26,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,3,27,367,8,27,1,28,1,28,5,28,371,8,28,10,28,12,
		28,374,9,28,1,28,3,28,377,8,28,1,28,1,28,3,28,381,8,28,1,28,1,28,1,28,
		3,28,386,8,28,1,28,1,28,3,28,390,8,28,1,28,3,28,393,8,28,1,28,1,28,1,29,
		1,29,1,29,3,29,400,8,29,1,29,1,29,3,29,404,8,29,1,29,1,29,1,29,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,420,8,30,10,30,12,
		30,423,9,30,1,31,3,31,426,8,31,1,31,1,31,1,31,1,31,1,31,3,31,433,8,31,
		1,31,1,31,5,31,437,8,31,10,31,12,31,440,9,31,1,31,1,31,1,32,1,32,1,32,
		1,32,1,32,3,32,449,8,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
		36,1,36,1,36,1,37,1,37,3,37,465,8,37,1,37,1,37,3,37,469,8,37,1,37,1,37,
		1,38,1,38,3,38,475,8,38,1,38,1,38,3,38,479,8,38,1,38,3,38,482,8,38,1,38,
		1,38,1,39,1,39,1,39,3,39,489,8,39,1,39,5,39,492,8,39,10,39,12,39,495,9,
		39,1,39,3,39,498,8,39,1,40,1,40,1,40,3,40,503,8,40,1,41,3,41,506,8,41,
		1,41,1,41,3,41,510,8,41,1,42,1,42,1,42,1,42,1,43,3,43,517,8,43,1,43,1,
		43,3,43,521,8,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,529,8,43,1,44,5,44,
		532,8,44,10,44,12,44,535,9,44,1,45,1,45,1,46,1,46,1,46,4,46,542,8,46,11,
		46,12,46,543,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,555,8,48,
		1,48,3,48,558,8,48,1,48,1,48,1,48,1,48,5,48,564,8,48,10,48,12,48,567,9,
		48,1,49,1,49,1,49,1,49,1,49,3,49,574,8,49,1,50,1,50,1,51,1,51,1,52,1,52,
		5,52,582,8,52,10,52,12,52,585,9,52,1,52,1,52,1,53,1,53,1,53,5,53,592,8,
		53,10,53,12,53,595,9,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,56,3,56,605,
		8,56,1,56,3,56,608,8,56,1,56,3,56,611,8,56,1,56,1,56,3,56,615,8,56,1,56,
		3,56,618,8,56,1,56,1,56,1,57,1,57,1,57,3,57,625,8,57,3,57,627,8,57,1,58,
		1,58,1,58,3,58,632,8,58,1,58,5,58,635,8,58,10,58,12,58,638,9,58,1,59,3,
		59,641,8,59,1,59,1,59,1,60,1,60,1,60,3,60,648,8,60,1,60,1,60,3,60,652,
		8,60,1,60,3,60,655,8,60,3,60,657,8,60,1,61,1,61,1,61,1,62,1,62,1,62,3,
		62,665,8,62,1,62,3,62,668,8,62,1,63,1,63,1,63,5,63,673,8,63,10,63,12,63,
		676,9,63,1,64,1,64,1,64,1,65,3,65,682,8,65,1,65,1,65,3,65,686,8,65,1,66,
		1,66,1,66,3,66,691,8,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,701,
		8,67,1,67,1,67,3,67,705,8,67,1,67,3,67,708,8,67,1,67,3,67,711,8,67,1,68,
		1,68,1,68,1,68,0,1,96,69,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,0,10,3,0,27,28,31,31,42,42,3,0,30,30,35,
		35,61,61,1,0,60,61,2,0,6,6,61,61,1,0,34,35,1,0,31,32,2,0,43,43,55,55,2,
		0,43,43,53,53,4,0,10,10,58,59,62,63,65,65,2,0,65,65,70,70,769,0,149,1,
		0,0,0,2,154,1,0,0,0,4,157,1,0,0,0,6,166,1,0,0,0,8,188,1,0,0,0,10,190,1,
		0,0,0,12,197,1,0,0,0,14,199,1,0,0,0,16,207,1,0,0,0,18,210,1,0,0,0,20,213,
		1,0,0,0,22,225,1,0,0,0,24,228,1,0,0,0,26,234,1,0,0,0,28,236,1,0,0,0,30,
		243,1,0,0,0,32,251,1,0,0,0,34,255,1,0,0,0,36,269,1,0,0,0,38,273,1,0,0,
		0,40,275,1,0,0,0,42,303,1,0,0,0,44,308,1,0,0,0,46,315,1,0,0,0,48,323,1,
		0,0,0,50,331,1,0,0,0,52,355,1,0,0,0,54,366,1,0,0,0,56,372,1,0,0,0,58,396,
		1,0,0,0,60,408,1,0,0,0,62,425,1,0,0,0,64,448,1,0,0,0,66,450,1,0,0,0,68,
		452,1,0,0,0,70,454,1,0,0,0,72,457,1,0,0,0,74,462,1,0,0,0,76,474,1,0,0,
		0,78,485,1,0,0,0,80,499,1,0,0,0,82,509,1,0,0,0,84,511,1,0,0,0,86,528,1,
		0,0,0,88,533,1,0,0,0,90,536,1,0,0,0,92,541,1,0,0,0,94,545,1,0,0,0,96,557,
		1,0,0,0,98,573,1,0,0,0,100,575,1,0,0,0,102,577,1,0,0,0,104,579,1,0,0,0,
		106,588,1,0,0,0,108,596,1,0,0,0,110,599,1,0,0,0,112,601,1,0,0,0,114,626,
		1,0,0,0,116,628,1,0,0,0,118,640,1,0,0,0,120,656,1,0,0,0,122,658,1,0,0,
		0,124,661,1,0,0,0,126,669,1,0,0,0,128,677,1,0,0,0,130,681,1,0,0,0,132,
		687,1,0,0,0,134,710,1,0,0,0,136,712,1,0,0,0,138,148,3,4,2,0,139,148,3,
		28,14,0,140,148,3,26,13,0,141,148,3,14,7,0,142,148,3,112,56,0,143,148,
		3,6,3,0,144,148,3,20,10,0,145,148,3,42,21,0,146,148,3,2,1,0,147,138,1,
		0,0,0,147,139,1,0,0,0,147,140,1,0,0,0,147,141,1,0,0,0,147,142,1,0,0,0,
		147,143,1,0,0,0,147,144,1,0,0,0,147,145,1,0,0,0,147,146,1,0,0,0,148,151,
		1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,
		0,152,153,5,0,0,1,153,1,1,0,0,0,154,155,5,46,0,0,155,156,5,71,0,0,156,
		3,1,0,0,0,157,158,5,40,0,0,158,160,5,16,0,0,159,161,3,126,63,0,160,159,
		1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,17,0,0,163,164,5,24,
		0,0,164,5,1,0,0,0,165,167,3,12,6,0,166,165,1,0,0,0,166,167,1,0,0,0,167,
		168,1,0,0,0,168,170,3,86,43,0,169,171,5,56,0,0,170,169,1,0,0,0,170,171,
		1,0,0,0,171,172,1,0,0,0,172,173,5,61,0,0,173,175,5,16,0,0,174,176,3,126,
		63,0,175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,179,5,17,0,0,
		178,180,5,31,0,0,179,178,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,182,
		3,8,4,0,182,7,1,0,0,0,183,185,3,70,35,0,184,183,1,0,0,0,184,185,1,0,0,
		0,185,186,1,0,0,0,186,189,5,24,0,0,187,189,5,72,0,0,188,184,1,0,0,0,188,
		187,1,0,0,0,189,9,1,0,0,0,190,191,5,38,0,0,191,192,5,65,0,0,192,11,1,0,
		0,0,193,198,3,10,5,0,194,198,5,27,0,0,195,198,5,42,0,0,196,198,5,28,0,
		0,197,193,1,0,0,0,197,194,1,0,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,
		13,1,0,0,0,199,205,5,11,0,0,200,206,3,122,61,0,201,206,3,108,54,0,202,
		206,3,16,8,0,203,206,3,18,9,0,204,206,5,9,0,0,205,200,1,0,0,0,205,201,
		1,0,0,0,205,202,1,0,0,0,205,203,1,0,0,0,205,204,1,0,0,0,206,15,1,0,0,0,
		207,208,5,7,0,0,208,209,3,112,56,0,209,17,1,0,0,0,210,211,5,8,0,0,211,
		212,3,112,56,0,212,19,1,0,0,0,213,214,3,22,11,0,214,220,3,86,43,0,215,
		217,5,61,0,0,216,218,3,94,47,0,217,216,1,0,0,0,217,218,1,0,0,0,218,219,
		1,0,0,0,219,221,5,24,0,0,220,215,1,0,0,0,220,221,1,0,0,0,221,21,1,0,0,
		0,222,224,3,24,12,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,
		226,1,0,0,0,226,23,1,0,0,0,227,225,1,0,0,0,228,229,7,0,0,0,229,25,1,0,
		0,0,230,235,3,30,15,0,231,235,3,74,37,0,232,235,3,28,14,0,233,235,3,72,
		36,0,234,230,1,0,0,0,234,231,1,0,0,0,234,232,1,0,0,0,234,233,1,0,0,0,235,
		27,1,0,0,0,236,237,5,26,0,0,237,238,5,61,0,0,238,239,5,25,0,0,239,240,
		3,86,43,0,240,241,5,24,0,0,241,29,1,0,0,0,242,244,3,32,16,0,243,242,1,
		0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,247,3,52,26,0,246,248,3,40,20,
		0,247,246,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,250,5,24,0,0,250,
		31,1,0,0,0,251,253,5,29,0,0,252,254,3,34,17,0,253,252,1,0,0,0,253,254,
		1,0,0,0,254,33,1,0,0,0,255,264,5,14,0,0,256,261,3,36,18,0,257,258,5,22,
		0,0,258,260,3,36,18,0,259,257,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,
		261,262,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,264,256,1,0,0,0,264,265,
		1,0,0,0,265,266,1,0,0,0,266,267,5,15,0,0,267,35,1,0,0,0,268,270,7,1,0,
		0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,272,3,86,43,0,272,
		37,1,0,0,0,273,274,7,2,0,0,274,39,1,0,0,0,275,279,5,18,0,0,276,278,3,54,
		27,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,
		282,1,0,0,0,281,279,1,0,0,0,282,283,5,19,0,0,283,41,1,0,0,0,284,285,5,
		47,0,0,285,286,5,20,0,0,286,287,3,46,23,0,287,288,5,21,0,0,288,304,1,0,
		0,0,289,293,5,48,0,0,290,292,3,44,22,0,291,290,1,0,0,0,292,295,1,0,0,0,
		293,291,1,0,0,0,293,294,1,0,0,0,294,299,1,0,0,0,295,293,1,0,0,0,296,298,
		5,55,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,
		0,300,302,1,0,0,0,301,299,1,0,0,0,302,304,5,50,0,0,303,284,1,0,0,0,303,
		289,1,0,0,0,304,43,1,0,0,0,305,307,5,55,0,0,306,305,1,0,0,0,307,310,1,
		0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,
		311,312,5,20,0,0,312,313,3,46,23,0,313,314,5,21,0,0,314,45,1,0,0,0,315,
		320,3,48,24,0,316,317,5,22,0,0,317,319,3,48,24,0,318,316,1,0,0,0,319,322,
		1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,47,1,0,0,0,322,320,1,0,0,0,
		323,329,3,50,25,0,324,326,5,16,0,0,325,327,3,126,63,0,326,325,1,0,0,0,
		326,327,1,0,0,0,327,328,1,0,0,0,328,330,5,17,0,0,329,324,1,0,0,0,329,330,
		1,0,0,0,330,49,1,0,0,0,331,332,7,3,0,0,332,51,1,0,0,0,333,334,7,4,0,0,
		334,340,3,86,43,0,335,337,5,44,0,0,336,338,5,1,0,0,337,336,1,0,0,0,337,
		338,1,0,0,0,338,339,1,0,0,0,339,341,3,86,43,0,340,335,1,0,0,0,340,341,
		1,0,0,0,341,356,1,0,0,0,342,343,5,3,0,0,343,344,5,16,0,0,344,345,3,86,
		43,0,345,347,5,22,0,0,346,348,5,16,0,0,347,346,1,0,0,0,347,348,1,0,0,0,
		348,349,1,0,0,0,349,351,3,86,43,0,350,352,5,17,0,0,351,350,1,0,0,0,351,
		352,1,0,0,0,352,353,1,0,0,0,353,354,5,17,0,0,354,356,1,0,0,0,355,333,1,
		0,0,0,355,342,1,0,0,0,356,53,1,0,0,0,357,367,3,14,7,0,358,367,3,112,56,
		0,359,367,3,20,10,0,360,367,3,26,13,0,361,367,3,56,28,0,362,367,3,58,29,
		0,363,367,3,62,31,0,364,367,3,4,2,0,365,367,3,28,14,0,366,357,1,0,0,0,
		366,358,1,0,0,0,366,359,1,0,0,0,366,360,1,0,0,0,366,361,1,0,0,0,366,362,
		1,0,0,0,366,363,1,0,0,0,366,364,1,0,0,0,366,365,1,0,0,0,367,55,1,0,0,0,
		368,371,3,42,21,0,369,371,3,2,1,0,370,368,1,0,0,0,370,369,1,0,0,0,371,
		374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,376,1,0,0,0,374,372,1,
		0,0,0,375,377,3,68,34,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,
		0,378,380,3,86,43,0,379,381,5,56,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,
		382,1,0,0,0,382,383,5,61,0,0,383,385,5,16,0,0,384,386,3,126,63,0,385,384,
		1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,389,5,17,0,0,388,390,5,31,
		0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,393,3,70,35,0,
		392,391,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,5,24,0,0,395,57,
		1,0,0,0,396,397,5,61,0,0,397,399,5,16,0,0,398,400,3,126,63,0,399,398,1,
		0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,403,5,17,0,0,402,404,3,60,30,
		0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,18,0,0,406,
		407,5,19,0,0,407,59,1,0,0,0,408,409,5,44,0,0,409,410,5,61,0,0,410,411,
		5,16,0,0,411,412,3,126,63,0,412,421,5,17,0,0,413,414,5,22,0,0,414,415,
		5,61,0,0,415,416,5,16,0,0,416,417,3,126,63,0,417,418,5,17,0,0,418,420,
		1,0,0,0,419,413,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,
		0,422,61,1,0,0,0,423,421,1,0,0,0,424,426,5,39,0,0,425,424,1,0,0,0,425,
		426,1,0,0,0,426,427,1,0,0,0,427,428,3,86,43,0,428,429,5,41,0,0,429,430,
		3,64,32,0,430,432,5,16,0,0,431,433,3,126,63,0,432,431,1,0,0,0,432,433,
		1,0,0,0,433,434,1,0,0,0,434,438,5,17,0,0,435,437,3,66,33,0,436,435,1,0,
		0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,
		438,1,0,0,0,441,442,5,72,0,0,442,63,1,0,0,0,443,444,5,25,0,0,444,449,5,
		25,0,0,445,446,5,51,0,0,446,449,5,25,0,0,447,449,3,86,43,0,448,443,1,0,
		0,0,448,445,1,0,0,0,448,447,1,0,0,0,449,65,1,0,0,0,450,451,7,5,0,0,451,
		67,1,0,0,0,452,453,5,36,0,0,453,69,1,0,0,0,454,455,5,25,0,0,455,456,5,
		58,0,0,456,71,1,0,0,0,457,458,5,33,0,0,458,459,3,86,43,0,459,460,3,86,
		43,0,460,461,5,24,0,0,461,73,1,0,0,0,462,464,5,37,0,0,463,465,5,35,0,0,
		464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,468,5,61,0,0,467,469,
		3,76,38,0,468,467,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,471,5,24,
		0,0,471,75,1,0,0,0,472,473,5,44,0,0,473,475,3,86,43,0,474,472,1,0,0,0,
		474,475,1,0,0,0,475,476,1,0,0,0,476,478,5,18,0,0,477,479,3,78,39,0,478,
		477,1,0,0,0,478,479,1,0,0,0,479,481,1,0,0,0,480,482,5,22,0,0,481,480,1,
		0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,484,5,19,0,0,484,77,1,0,0,0,
		485,493,3,80,40,0,486,488,5,22,0,0,487,489,3,2,1,0,488,487,1,0,0,0,488,
		489,1,0,0,0,489,490,1,0,0,0,490,492,3,80,40,0,491,486,1,0,0,0,492,495,
		1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,
		0,496,498,3,2,1,0,497,496,1,0,0,0,497,498,1,0,0,0,498,79,1,0,0,0,499,502,
		5,61,0,0,500,501,5,25,0,0,501,503,3,82,41,0,502,500,1,0,0,0,502,503,1,
		0,0,0,503,81,1,0,0,0,504,506,3,84,42,0,505,504,1,0,0,0,505,506,1,0,0,0,
		506,507,1,0,0,0,507,510,3,98,49,0,508,510,5,60,0,0,509,505,1,0,0,0,509,
		508,1,0,0,0,510,83,1,0,0,0,511,512,5,16,0,0,512,513,3,86,43,0,513,514,
		5,17,0,0,514,85,1,0,0,0,515,517,3,92,46,0,516,515,1,0,0,0,516,517,1,0,
		0,0,517,518,1,0,0,0,518,520,5,61,0,0,519,521,3,34,17,0,520,519,1,0,0,0,
		520,521,1,0,0,0,521,522,1,0,0,0,522,529,3,88,44,0,523,524,5,2,0,0,524,
		525,5,16,0,0,525,526,3,86,43,0,526,527,5,17,0,0,527,529,1,0,0,0,528,516,
		1,0,0,0,528,523,1,0,0,0,529,87,1,0,0,0,530,532,3,90,45,0,531,530,1,0,0,
		0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,89,1,0,0,0,535,533,
		1,0,0,0,536,537,7,6,0,0,537,91,1,0,0,0,538,539,3,38,19,0,539,540,5,45,
		0,0,540,542,1,0,0,0,541,538,1,0,0,0,542,543,1,0,0,0,543,541,1,0,0,0,543,
		544,1,0,0,0,544,93,1,0,0,0,545,546,5,25,0,0,546,547,3,96,48,0,547,95,1,
		0,0,0,548,549,6,48,-1,0,549,558,3,102,51,0,550,558,3,104,52,0,551,552,
		5,13,0,0,552,558,5,13,0,0,553,555,3,92,46,0,554,553,1,0,0,0,554,555,1,
		0,0,0,555,556,1,0,0,0,556,558,5,61,0,0,557,548,1,0,0,0,557,550,1,0,0,0,
		557,551,1,0,0,0,557,554,1,0,0,0,558,565,1,0,0,0,559,560,10,5,0,0,560,561,
		3,100,50,0,561,562,3,96,48,6,562,564,1,0,0,0,563,559,1,0,0,0,564,567,1,
		0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,97,1,0,0,0,567,565,1,0,0,0,568,
		569,5,16,0,0,569,570,3,96,48,0,570,571,5,17,0,0,571,574,1,0,0,0,572,574,
		3,96,48,0,573,568,1,0,0,0,573,572,1,0,0,0,574,99,1,0,0,0,575,576,7,7,0,
		0,576,101,1,0,0,0,577,578,7,8,0,0,578,103,1,0,0,0,579,583,5,18,0,0,580,
		582,3,106,53,0,581,580,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,
		1,0,0,0,584,586,1,0,0,0,585,583,1,0,0,0,586,587,5,19,0,0,587,105,1,0,0,
		0,588,593,3,96,48,0,589,590,5,22,0,0,590,592,3,96,48,0,591,589,1,0,0,0,
		592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,107,1,0,0,0,595,593,
		1,0,0,0,596,597,5,6,0,0,597,598,3,110,55,0,598,109,1,0,0,0,599,600,7,9,
		0,0,600,111,1,0,0,0,601,617,5,60,0,0,602,604,5,16,0,0,603,605,5,23,0,0,
		604,603,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,608,3,116,58,0,607,
		606,1,0,0,0,607,608,1,0,0,0,608,610,1,0,0,0,609,611,5,23,0,0,610,609,1,
		0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,618,5,17,0,0,613,615,3,84,42,
		0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,618,3,120,60,0,617,
		602,1,0,0,0,617,614,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,620,3,
		114,57,0,620,113,1,0,0,0,621,622,5,23,0,0,622,627,3,116,58,0,623,625,5,
		24,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,621,1,0,0,0,
		626,624,1,0,0,0,627,115,1,0,0,0,628,636,3,118,59,0,629,631,5,22,0,0,630,
		632,5,23,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,635,3,
		118,59,0,634,629,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,
		0,637,117,1,0,0,0,638,636,1,0,0,0,639,641,3,128,64,0,640,639,1,0,0,0,640,
		641,1,0,0,0,641,642,1,0,0,0,642,643,3,120,60,0,643,119,1,0,0,0,644,657,
		3,102,51,0,645,657,3,112,56,0,646,648,5,31,0,0,647,646,1,0,0,0,647,648,
		1,0,0,0,648,649,1,0,0,0,649,654,3,86,43,0,650,652,5,31,0,0,651,650,1,0,
		0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,655,5,61,0,0,654,651,1,0,0,0,654,
		655,1,0,0,0,655,657,1,0,0,0,656,644,1,0,0,0,656,645,1,0,0,0,656,647,1,
		0,0,0,657,121,1,0,0,0,658,659,5,5,0,0,659,660,3,124,62,0,660,123,1,0,0,
		0,661,667,5,61,0,0,662,664,5,16,0,0,663,665,3,126,63,0,664,663,1,0,0,0,
		664,665,1,0,0,0,665,666,1,0,0,0,666,668,5,17,0,0,667,662,1,0,0,0,667,668,
		1,0,0,0,668,125,1,0,0,0,669,674,3,130,65,0,670,671,5,22,0,0,671,673,3,
		130,65,0,672,670,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,
		0,675,127,1,0,0,0,676,674,1,0,0,0,677,678,5,61,0,0,678,679,5,44,0,0,679,
		129,1,0,0,0,680,682,3,128,64,0,681,680,1,0,0,0,681,682,1,0,0,0,682,683,
		1,0,0,0,683,685,3,134,67,0,684,686,3,136,68,0,685,684,1,0,0,0,685,686,
		1,0,0,0,686,131,1,0,0,0,687,688,5,61,0,0,688,690,5,16,0,0,689,691,3,126,
		63,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,5,17,0,0,
		693,133,1,0,0,0,694,711,3,102,51,0,695,696,3,86,43,0,696,697,5,45,0,0,
		697,698,5,61,0,0,698,711,1,0,0,0,699,701,5,31,0,0,700,699,1,0,0,0,700,
		701,1,0,0,0,701,702,1,0,0,0,702,707,3,86,43,0,703,705,5,31,0,0,704,703,
		1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,708,5,61,0,0,707,704,1,0,0,
		0,707,708,1,0,0,0,708,711,1,0,0,0,709,711,3,132,66,0,710,694,1,0,0,0,710,
		695,1,0,0,0,710,700,1,0,0,0,710,709,1,0,0,0,711,135,1,0,0,0,712,713,5,
		25,0,0,713,714,3,102,51,0,714,137,1,0,0,0,95,147,149,160,166,170,175,179,
		184,188,197,205,217,220,225,234,243,247,253,261,264,269,279,293,299,303,
		308,320,326,329,337,340,347,351,355,366,370,372,376,380,385,389,392,399,
		403,421,425,432,438,448,464,468,474,478,481,488,493,497,502,505,509,516,
		520,528,533,543,554,557,565,573,583,593,604,607,610,614,617,624,626,631,
		636,640,647,651,654,656,664,667,674,681,685,690,700,704,707,710
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
