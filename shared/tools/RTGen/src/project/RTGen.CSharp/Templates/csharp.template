$CSLicenseComment$
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen ($GeneratorName$ $GeneratorVersion$) on $DateAndTime$.
// </auto-generated>
//------------------------------------------------------------------------------
$CSUsings$

namespace $Namespace$;

$CSEnumerations$
[StructLayout(LayoutKind.Sequential)]
internal unsafe class Raw$NonInterfaceType$ : Raw$BaseTypeNonInterface$
{
$CSRawMethods$
}

$CSInterfaceDoc$[Guid("$InterfaceGuid$")]
public class $NonInterfaceType$$CSClassGenericParams$ : $BaseTypeNonInterface$$CSClassDotNetInterfaces$
$CSClassGenericParamConstraints${
    //type-casted base._virtualTable
    private readonly Raw$NonInterfaceType$ _raw$NonInterfaceType$;

    internal $NonInterfaceType$(IntPtr nativePointer, bool incrementReference)
        : base(nativePointer, incrementReference)
    {
        IntPtr objVirtualTable = Marshal.ReadIntPtr(nativePointer, 0); //read the pointer from the given address
        base._virtualTable =
            _raw$NonInterfaceType$ = Marshal.PtrToStructure<Raw$NonInterfaceType$>(objVirtualTable);
    }
$CSImplementationMethods$$CSInterfaceImplementation$$CSOperators$
}


#region Class Factory

// Factory functions of the &apos;$LibraryName$&apos; library.
public static partial class $LibraryName$Factory
{$CSExportedFactories$
}

#endregion Class Factory
