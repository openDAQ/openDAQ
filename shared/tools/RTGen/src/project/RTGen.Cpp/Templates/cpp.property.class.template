//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen ($GeneratorName$ $GeneratorVersion$) on $DateAndTime$.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/common.h>
#include <coreobjects/property_value.h>
#include <coreobjects/property_object_class_factory.h>
#include <coreobjects/property_object_manager_factory.h>
$headers$
$start_namespace$

struct $PropertyClassName$PropertyClass
{
    static constexpr char ClassName[] = "$PropertyClassName$";
    static constexpr char ClassParent[] = "$PropertyClassParent$";

$PropertyClassPropertyNames$
};

template<typename... TInterfaces>
class $PropertyClassName$PropertyObject;

using $PropertyClassName$PropertyObjectImpl = $PropertyClassName$PropertyObject<>;

template<typename... TInterfaces>
class $PropertyClassName$PropertyObject
    : public $PropertyObjectImplBase$<$InterfaceImpl$TInterfaces...>
    , public $PropertyClassName$PropertyClass
{
public:

    explicit $PropertyClassName$PropertyObject($PropClassCtorArgs$)
        : $PropertyObjectImplBase$<$InterfaceImpl$TInterfaces...>($PropClassCtorArgNames$)
$PropertyClassVariableInit$
    {
        using namespace std::placeholders;

$FuncPropertySetters$
    }

$Methods$
protected:
$PropertyClassVariables$
};

class $PropertyClassName$PropertyClassRegistrator : public $PropertyClassName$PropertyClass
{
public:
    $PropertyClassName$PropertyClassRegistrator()
    {
        auto propClassManager = PropertyObjectManager();

        PropertyObjectClassPtr findPropClass;
        if (propClassManager->findClass(String(ClassName), &findPropClass) != OPENDAQ_ERR_NOTFOUND)
        {
            return;
        }

        auto propClass = PropertyObjectClass();
        propClass.setName(ClassName);

        if (strlen(ClassParent) > 0)
        {
            propClass.setParent(ClassParent);
        }

        PropertyInfoPtr prop;
$PropertyRegistrations$
        propClassManager.registerClass(propClass);
    }
};

static $PropertyClassName$PropertyClassRegistrator g$PropertyClassName$PropertyClassRegistrator;

$end_namespace$
