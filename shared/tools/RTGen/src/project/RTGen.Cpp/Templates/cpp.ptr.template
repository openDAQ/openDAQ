//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen ($GeneratorName$ $GeneratorVersion$) on $DateAndTime$.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#include <coretypes/coretypes.h>
#include "$SourceFileInclude$.h"
$headers$

$ForwardDeclareMuiWindowPtr$

$start_namespace$

$PrototypeTemplate$
class $PtrNameOnly$;

$TemplatedUsing$

$end_namespace$

BEGIN_NAMESPACE_OPENDAQ

$InterfaceToSmartPtr$

END_NAMESPACE_OPENDAQ

$start_namespace$

$CustomTypes$

$LeadingDocComment$$DocComment$$PtrTemplate$
class $PtrNameOnly$ : public $BasePtrNameFull$$BasePtrInterfaceTemplate$
{
public:
    using $BasePtrNameFull$$BasePtrInterfaceTemplate$::$BasePtrName$;
    //using $BasePtrNameFull$$BasePtrInterfaceTemplate$::operator=;

$EventFields$

    $PtrNameOnly$()
        : $BasePtrNameFull$$BasePtrInterfaceTemplate$()
$EventWrappers$
    {
    }

    $PtrNameOnly$(daq::ObjectPtr$PtrInterfaceTemplate$&& ptr)
        : $BasePtrNameFull$$BasePtrInterfaceTemplate$(std::move(ptr))
$EventWrappers$
    {
    }

    $PtrNameOnly$(const daq::ObjectPtr$PtrInterfaceTemplate$& ptr)
        : $BasePtrNameFull$$BasePtrInterfaceTemplate$(ptr)
$EventWrappers$
    {
    }

    $PtrNameOnly$(const $PtrName$& other)
        : $BasePtrNameFull$$BasePtrInterfaceTemplate$(other)
$CopyEventWrappers$
    {
    }

    $PtrNameOnly$($PtrName$&& other) noexcept
        : $BasePtrNameFull$$BasePtrInterfaceTemplate$(std::move(other))
$MoveEventWrappers$
    {
    }
    
    $PtrNameOnly$& operator=(const $PtrName$& other)
    {
        if (this == &other)
            return *this;

        $BasePtrNameFull$$BasePtrInterfaceTemplate$::operator =(other);

$EventWrappersCopyAssign$
        return *this;
    }

    $PtrNameOnly$& operator=($PtrName$&& other) noexcept
    {
        if (this == std::addressof(other))
        {
            return *this;
        }

$EventWrappersMoveAssign$
        $BasePtrNameFull$$BasePtrInterfaceTemplate$::operator =(std::move(other));
$EventWrappersMoveAssignRebind$
        return *this;
    }

$UiControlMembers$
$Methods$

#if __has_include($ThisHeaderName$)
    $CustomExtensionsHeader$
#endif
};

$TrailingDocComment$$end_namespace$
